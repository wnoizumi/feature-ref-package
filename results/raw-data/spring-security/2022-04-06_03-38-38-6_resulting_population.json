{
  "executionId" : "91f9f83f-b1f1-403d-9dce-20345f65387e",
  "computingTime" : 916494,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2816492450638797,
    "meanNumConcerns" : 1.7074792243767314,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "5d7da200-de9c-4e39-b9db-7a49cc429c46",
    "objectives" : {
      "NumberOfConcerns" : 1.0068137573004543,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5537575457895663,
      "MetricsIntensity" : 0.05320818881274168,
      "Density" : 0.998407361528933
    },
    "euclideanDistance" : 10.115333396992916,
    "generation" : 38,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7105843439911799,
      "LackOfCohesion" : 0.5537575457895663,
      "MetricsIntensity" : 0.05320818881274168,
      "Density" : 3.2575057736720554
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "7f678fa5-021f-4c5c-b8b6-49d16e8dcc9d",
    "objectives" : {
      "NumberOfConcerns" : 1.0048669695003245,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5538634574903898,
      "MetricsIntensity" : 0.05328253437213058,
      "Density" : 1.0019465581313043
    },
    "euclideanDistance" : 10.1154959487786,
    "generation" : 17,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.707276736493936,
      "LackOfCohesion" : 0.5538634574903898,
      "MetricsIntensity" : 0.053282534372130576,
      "Density" : 3.26905311778291
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "f2669bb0-c2d6-4416-b0cb-34de47cb222d",
    "objectives" : {
      "NumberOfConcerns" : 1.0077871512005192,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5546707877986986,
      "MetricsIntensity" : 0.053198870016730126,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 10.115532727153022,
    "generation" : 14,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7122381477398014,
      "LackOfCohesion" : 0.5546707877986986,
      "MetricsIntensity" : 0.05319887001673013,
      "Density" : 3.259237875288684
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "ba55a3e9-154c-4b45-a31c-aa869ac71560",
    "objectives" : {
      "NumberOfConcerns" : 1.0077871512005192,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5546707877986985,
      "MetricsIntensity" : 0.05319887001673014,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 10.115532727153022,
    "generation" : 9,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7122381477398017,
      "LackOfCohesion" : 0.5546707877986985,
      "MetricsIntensity" : 0.05319887001673014,
      "Density" : 3.259237875288684
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "4d92a0f4-ab32-4e1d-b9d0-4bbbc97c9071",
    "objectives" : {
      "NumberOfConcerns" : 1.0061648280337443,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5525492085734012,
      "MetricsIntensity" : 0.05322373720681956,
      "Density" : 1.0017695983011856
    },
    "euclideanDistance" : 10.115535249473952,
    "generation" : 39,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7094818081587648,
      "LackOfCohesion" : 0.5525492085734012,
      "MetricsIntensity" : 0.05322373720681956,
      "Density" : 3.2684757505773674
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a75f3582-909d-4911-99c5-3cd3e6c05397",
    "objectives" : {
      "NumberOfConcerns" : 1.007462686567164,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5552198201970461,
      "MetricsIntensity" : 0.05320513342755413,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 10.11554803677765,
    "generation" : 32,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7116868798235936,
      "LackOfCohesion" : 0.5552198201970461,
      "MetricsIntensity" : 0.05320513342755413,
      "Density" : 3.2598152424942257
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "c2131e5b-a91b-48fa-9655-7a8120e422fe",
    "objectives" : {
      "NumberOfConcerns" : 1.0064892926670992,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5537295894015315,
      "MetricsIntensity" : 0.05320818881274168,
      "Density" : 1.0015926384710672
    },
    "euclideanDistance" : 10.115614468692867,
    "generation" : 42,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7100330760749722,
      "LackOfCohesion" : 0.5537295894015315,
      "MetricsIntensity" : 0.05320818881274169,
      "Density" : 3.267898383371825
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "b3295458-4e42-4cbc-a264-aed72cc1ed19",
    "objectives" : {
      "NumberOfConcerns" : 1.0068137573004543,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5535349301070678,
      "MetricsIntensity" : 0.053214418410808,
      "Density" : 1.0023004777915414
    },
    "euclideanDistance" : 10.115706247358414,
    "generation" : 13,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7105843439911799,
      "LackOfCohesion" : 0.5535349301070678,
      "MetricsIntensity" : 0.053214418410808,
      "Density" : 3.270207852193996
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "f3dfa1f6-91c0-4dc1-abce-3dafe9354efb",
    "objectives" : {
      "NumberOfConcerns" : 1.0071382219338092,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5535628864951027,
      "MetricsIntensity" : 0.05321441841080799,
      "Density" : 1.0024774376216599
    },
    "euclideanDistance" : 10.115757611501577,
    "generation" : 43,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7111356119073866,
      "LackOfCohesion" : 0.5535628864951027,
      "MetricsIntensity" : 0.053214418410808,
      "Density" : 3.2707852193995377
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "fbdbd0c6-7432-4f60-953e-5bc4960ce110",
    "objectives" : {
      "NumberOfConcerns" : 1.0071382219338092,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5547153109351983,
      "MetricsIntensity" : 0.05319887001673014,
      "Density" : 1.0021235179614227
    },
    "euclideanDistance" : 10.115785591800984,
    "generation" : 43,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7111356119073868,
      "LackOfCohesion" : 0.5547153109351983,
      "MetricsIntensity" : 0.05319887001673015,
      "Density" : 3.2696304849884523
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "3697c09e-6769-471c-bbeb-1d53b270cb7e",
    "objectives" : {
      "NumberOfConcerns" : 1.007462686567164,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.554642831410664,
      "MetricsIntensity" : 0.05319887001673014,
      "Density" : 1.0021235179614227
    },
    "euclideanDistance" : 10.115813926732875,
    "generation" : 42,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7116868798235942,
      "LackOfCohesion" : 0.554642831410664,
      "MetricsIntensity" : 0.05319887001673014,
      "Density" : 3.2696304849884523
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "929984a1-5106-466d-bd02-0183187c1d55",
    "objectives" : {
      "NumberOfConcerns" : 1.0035691109669047,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5547708811074262,
      "MetricsIntensity" : 0.0533244443816485,
      "Density" : 1.0010617589807114
    },
    "euclideanDistance" : 12.096275866260399,
    "generation" : 35,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706012134583563,
      "LackOfCohesion" : 0.5547708811074262,
      "MetricsIntensity" : 0.053324444381648496,
      "Density" : 3.268053148469093
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "7488a729-fa59-4abe-80d6-fb7ad659f323",
    "objectives" : {
      "NumberOfConcerns" : 1.0064892926670992,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.555578738393743,
      "MetricsIntensity" : 0.05324072541504999,
      "Density" : 0.9980534418686958
    },
    "euclideanDistance" : 12.096306613114491,
    "generation" : 28,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7109762824048538,
      "LackOfCohesion" : 0.555578738393743,
      "MetricsIntensity" : 0.05324072541505,
      "Density" : 3.258232235701906
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "b584e796-7de3-42ea-92f5-4875c6dfd53f",
    "objectives" : {
      "NumberOfConcerns" : 1.0058403634003894,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5531031125907675,
      "MetricsIntensity" : 0.05323893216913141,
      "Density" : 0.9982304016988144
    },
    "euclideanDistance" : 14.082504614186261,
    "generation" : 29,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7098731384445667,
      "LackOfCohesion" : 0.5531031125907675,
      "MetricsIntensity" : 0.05323893216913142,
      "Density" : 3.2588099364529173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "981ef653-8a07-4eda-85a5-8a0d21f42f7a",
    "objectives" : {
      "NumberOfConcerns" : 1.0061648280337443,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5542842639024672,
      "MetricsIntensity" : 0.053223373625971244,
      "Density" : 0.9980534418686958
    },
    "euclideanDistance" : 14.082561631560791,
    "generation" : 46,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7104247104247101,
      "LackOfCohesion" : 0.5542842639024672,
      "MetricsIntensity" : 0.053223373625971244,
      "Density" : 3.258232235701906
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "1f36ae59-9ddf-4182-9a14-d5b95935967d",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5521612998343333,
      "MetricsIntensity" : 0.053248257047908,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 14.082563456387069,
    "generation" : 30,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7076668505239934,
      "LackOfCohesion" : 0.5521612998343333,
      "MetricsIntensity" : 0.053248257047908004,
      "Density" : 3.267475447718082
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "4b534673-1a0c-4006-a7da-0a5c909d0f6c",
    "objectives" : {
      "NumberOfConcerns" : 1.0042180402336145,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.554136141789593,
      "MetricsIntensity" : 0.05328526655019729,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 14.082618024954385,
    "generation" : 35,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7071152785438504,
      "LackOfCohesion" : 0.554136141789593,
      "MetricsIntensity" : 0.053285266550197295,
      "Density" : 3.267475447718082
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a949a505-a4e4-490d-8c47-2fee62f27d2c",
    "objectives" : {
      "NumberOfConcerns" : 1.0051914341336794,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5533403789507493,
      "MetricsIntensity" : 0.05324646380198943,
      "Density" : 1.0014156786409485
    },
    "euclideanDistance" : 15.07721008481239,
    "generation" : 35,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7087699944842802,
      "LackOfCohesion" : 0.5533403789507493,
      "MetricsIntensity" : 0.05324646380198943,
      "Density" : 3.269208549971115
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "22d39681-0f6c-41d4-9f4b-30163da2c02e",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5543841701239397,
      "MetricsIntensity" : 0.053349046016999455,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 16.07216348987755,
    "generation" : 35,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7041942604856513,
      "LackOfCohesion" : 0.5543841701239397,
      "MetricsIntensity" : 0.05334904601699946,
      "Density" : 3.267052023121387
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "88a9bd17-c83d-4edd-837e-742cd2cdea02",
    "objectives" : {
      "NumberOfConcerns" : 1.0055158987670343,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5566030542317036,
      "MetricsIntensity" : 0.05327460333735011,
      "Density" : 0.997168642718103
    },
    "euclideanDistance" : 16.07227590193854,
    "generation" : 40,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7102649006622515,
      "LackOfCohesion" : 0.5566030542317036,
      "MetricsIntensity" : 0.0532746033373501,
      "Density" : 3.257225433526012
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "7a1f2c53-c4d0-4fc1-9471-7edb5888e2e4",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5551645621682115,
      "MetricsIntensity" : 0.05326527236786237,
      "Density" : 1.0003539196602371
    },
    "euclideanDistance" : 16.072363189307037,
    "generation" : 44,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7086092715231789,
      "LackOfCohesion" : 0.5551645621682115,
      "MetricsIntensity" : 0.05326527236786237,
      "Density" : 3.267630057803468
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "7436b4dc-3406-4a3a-a455-88fce3c19d11",
    "objectives" : {
      "NumberOfConcerns" : 1.0048669695003245,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.555301751636665,
      "MetricsIntensity" : 0.053294591428973866,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 17.06797164944216,
    "generation" : 14,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7082184225041368,
      "LackOfCohesion" : 0.555301751636665,
      "MetricsIntensity" : 0.053294591428973866,
      "Density" : 3.2559214326978623
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "84d7b5c3-9506-4a4a-8c83-487465e8a137",
    "objectives" : {
      "NumberOfConcerns" : 1.0055158987670343,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5546085624643635,
      "MetricsIntensity" : 0.05324202338352441,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 17.067987164402496,
    "generation" : 39,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7093215664644232,
      "LackOfCohesion" : 0.5546085624643635,
      "MetricsIntensity" : 0.05324202338352441,
      "Density" : 3.2559214326978627
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "24e1e0a4-5f50-43a4-abe7-bde2438c7d0f",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.554248053609639,
      "MetricsIntensity" : 0.05328837762564149,
      "Density" : 1.0005308794903558
    },
    "euclideanDistance" : 17.068066525182786,
    "generation" : 36,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7075055187637969,
      "LackOfCohesion" : 0.554248053609639,
      "MetricsIntensity" : 0.053288377625641495,
      "Density" : 3.2682080924855494
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "46016162-c738-4799-b9d4-942b169334a4",
    "objectives" : {
      "NumberOfConcerns" : 1.0042180402336145,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5538181810292114,
      "MetricsIntensity" : 0.05328213988962867,
      "Density" : 0.9975225623783401
    },
    "euclideanDistance" : 19.06077277286664,
    "generation" : 30,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7080573951434894,
      "LackOfCohesion" : 0.5538181810292114,
      "MetricsIntensity" : 0.05328213988962867,
      "Density" : 3.258381502890173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "41c935db-9e8c-4c34-b04f-df9b17524826",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5536419692592701,
      "MetricsIntensity" : 0.053344073240323794,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 19.06078740075638,
    "generation" : 35,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7041942604856513,
      "LackOfCohesion" : 0.5536419692592701,
      "MetricsIntensity" : 0.0533440732403238,
      "Density" : 3.267052023121387
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "6d99ec16-7899-4be9-a1c8-3e4fa3bc003b",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5517708108074451,
      "MetricsIntensity" : 0.053286583208432325,
      "Density" : 1.0007078393204742
    },
    "euclideanDistance" : 19.060829113333018,
    "generation" : 6,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706401766004414,
      "LackOfCohesion" : 0.5517708108074451,
      "MetricsIntensity" : 0.053286583208432325,
      "Density" : 3.2687861271676306
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "bdba8995-383d-404b-a6ac-49e099b0d3ae",
    "objectives" : {
      "NumberOfConcerns" : 1.0048669695003245,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5526527986531822,
      "MetricsIntensity" : 0.05321760419691918,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 19.06096780931373,
    "generation" : 10,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7082184225041366,
      "LackOfCohesion" : 0.5526527986531822,
      "MetricsIntensity" : 0.053217604196919184,
      "Density" : 3.2686308492201053
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "5923ab9d-192b-49b2-a380-f9fcdfbaa96d",
    "objectives" : {
      "NumberOfConcerns" : 1.0061648280337443,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5547477880849863,
      "MetricsIntensity" : 0.05319272077498238,
      "Density" : 1.0015926384710672
    },
    "euclideanDistance" : 19.061115655924766,
    "generation" : 9,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7104247104247101,
      "LackOfCohesion" : 0.5547477880849863,
      "MetricsIntensity" : 0.05319272077498238,
      "Density" : 3.2697862507221256
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "f66bfe25-6c30-431f-93f3-e19632bfa486",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5528866791179576,
      "MetricsIntensity" : 0.05334721774286181,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 20.05780392163206,
    "generation" : 36,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7052980132450328,
      "LackOfCohesion" : 0.5528866791179576,
      "MetricsIntensity" : 0.05334721774286181,
      "Density" : 3.269364161849711
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "232a642a-22b8-487b-85f2-884b1a8f104e",
    "objectives" : {
      "NumberOfConcerns" : 1.0035691109669047,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5561892767902328,
      "MetricsIntensity" : 0.05329918847635531,
      "Density" : 0.9994691205096443
    },
    "euclideanDistance" : 20.057873187315945,
    "generation" : 29,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7078961899503033,
      "LackOfCohesion" : 0.5561892767902328,
      "MetricsIntensity" : 0.053299188476355314,
      "Density" : 3.2666281087333724
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "16cf8e7e-fd65-47ae-aea5-2cfece5a19ef",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5534874499995907,
      "MetricsIntensity" : 0.053259499170404616,
      "Density" : 0.9969916828879845
    },
    "euclideanDistance" : 21.054951428546165,
    "generation" : 45,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7075055187637969,
      "LackOfCohesion" : 0.5534874499995907,
      "MetricsIntensity" : 0.053259499170404616,
      "Density" : 3.2566473988439304
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "6613c096-1f7a-4f09-944d-9aa0b0108285",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5526780528562145,
      "MetricsIntensity" : 0.053328550648574634,
      "Density" : 0.9998230401698814
    },
    "euclideanDistance" : 21.05497186988529,
    "generation" : 13,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7051352843732748,
      "LackOfCohesion" : 0.5526780528562145,
      "MetricsIntensity" : 0.05332855064857465,
      "Density" : 3.267784846732215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "3bd928e8-f0ca-41b1-a5ca-b7f92395c481",
    "objectives" : {
      "NumberOfConcerns" : 1.0051914341336794,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5555838078111672,
      "MetricsIntensity" : 0.053234599495416327,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 21.05508526129171,
    "generation" : 45,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7097130242825607,
      "LackOfCohesion" : 0.5555838078111672,
      "MetricsIntensity" : 0.05323459949541633,
      "Density" : 3.257803468208092
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "e24c545b-f034-471b-be5a-d6f2da3b0fd0",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5530844039564401,
      "MetricsIntensity" : 0.05328213988962865,
      "Density" : 1.0023004777915414
    },
    "euclideanDistance" : 21.05514655572299,
    "generation" : 42,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.705849889624724,
      "LackOfCohesion" : 0.5530844039564401,
      "MetricsIntensity" : 0.05328213988962865,
      "Density" : 3.2720970537261693
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "52a9735a-33df-4042-a429-59dc563daeb1",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.552376805436954,
      "MetricsIntensity" : 0.053272808920140906,
      "Density" : 1.0005308794903558
    },
    "euclideanDistance" : 22.052592194100452,
    "generation" : 41,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.707505518763797,
      "LackOfCohesion" : 0.552376805436954,
      "MetricsIntensity" : 0.05327280892014091,
      "Density" : 3.2682080924855486
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a715492f-06ae-48dc-88b8-34e7480406c3",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5533740528009551,
      "MetricsIntensity" : 0.05322656734219427,
      "Density" : 0.9968147230578659
    },
    "euclideanDistance" : 23.050173487698977,
    "generation" : 33,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.707505518763797,
      "LackOfCohesion" : 0.5533740528009551,
      "MetricsIntensity" : 0.053226567342194275,
      "Density" : 3.25606936416185
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "f84a284f-845d-4cf3-b60b-2a57f8fd2818",
    "objectives" : {
      "NumberOfConcerns" : 1.00064892926671,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5552367087972235,
      "MetricsIntensity" : 0.053383016879511455,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 23.050177157963407,
    "generation" : 40,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.70292655991165,
      "LackOfCohesion" : 0.5552367087972235,
      "MetricsIntensity" : 0.053383016879511455,
      "Density" : 3.2654713707345286
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "0978ee73-9b59-4deb-95a3-7111c904c8b8",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5522367112978394,
      "MetricsIntensity" : 0.0532421360476949,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 23.050249520388984,
    "generation" : 42,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.705849889624724,
      "LackOfCohesion" : 0.5522367112978394,
      "MetricsIntensity" : 0.0532421360476949,
      "Density" : 3.267052023121387
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "e2b7e6b0-c112-4082-afde-6c5db4250706",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5524854758254022,
      "MetricsIntensity" : 0.05332985031373984,
      "Density" : 1.0
    },
    "euclideanDistance" : 24.0481045313804,
    "generation" : 41,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7045831032578684,
      "LackOfCohesion" : 0.5524854758254022,
      "MetricsIntensity" : 0.05332985031373983,
      "Density" : 3.2683632157316374
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "28b9d979-9d9e-418e-ad81-ca90dca2def4",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5540351373566813,
      "MetricsIntensity" : 0.05331606702264562,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 25.046201764124913,
    "generation" : 42,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7056874654886807,
      "LackOfCohesion" : 0.5540351373566813,
      "MetricsIntensity" : 0.05331606702264562,
      "Density" : 3.264893001735107
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a96bf802-1e8c-4a7c-b34b-0030b67ec843",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5526216414027443,
      "MetricsIntensity" : 0.05332051324557924,
      "Density" : 0.9996460803397629
    },
    "euclideanDistance" : 26.044412517989365,
    "generation" : 41,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7051352843732746,
      "LackOfCohesion" : 0.5526216414027443,
      "MetricsIntensity" : 0.05332051324557924,
      "Density" : 3.267206477732794
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "44216905-5c30-4c0a-a0f3-8b680aa2b82c",
    "objectives" : {
      "NumberOfConcerns" : 1.0042180402336145,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5546129981940477,
      "MetricsIntensity" : 0.05323589831168201,
      "Density" : 0.9966377632277473
    },
    "euclideanDistance" : 26.04442685762267,
    "generation" : 34,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7080573951434879,
      "LackOfCohesion" : 0.5546129981940477,
      "MetricsIntensity" : 0.05323589831168201,
      "Density" : 3.2554913294797694
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "74e6032c-811a-4c9f-b0b2-1806e5602964",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5545837756907654,
      "MetricsIntensity" : 0.05343258734626737,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 27.042701521679028,
    "generation" : 36,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7016574585635365,
      "LackOfCohesion" : 0.5545837756907654,
      "MetricsIntensity" : 0.05343258734626737,
      "Density" : 3.2679398148148135
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "daadab3e-f9d2-4597-b302-ff4e1242c7ba",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5532875234963225,
      "MetricsIntensity" : 0.053276037034409925,
      "Density" : 0.9994691205096443
    },
    "euclideanDistance" : 27.04278927193136,
    "generation" : 27,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7056874654886807,
      "LackOfCohesion" : 0.5532875234963225,
      "MetricsIntensity" : 0.053276037034409925,
      "Density" : 3.2666281087333724
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "1d938732-7148-45ed-bcc5-3cc8b478086d",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5519862020418147,
      "MetricsIntensity" : 0.053311176177418644,
      "Density" : 1.0003539196602371
    },
    "euclideanDistance" : 27.042807490813715,
    "generation" : 42,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7062396466040863,
      "LackOfCohesion" : 0.5519862020418147,
      "MetricsIntensity" : 0.05331117617741864,
      "Density" : 3.26951995373048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "71b6bdbf-10cb-4bfa-b602-ac1edaf97721",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5553589996674282,
      "MetricsIntensity" : 0.05342009555576943,
      "Density" : 0.9950451247566803
    },
    "euclideanDistance" : 28.041066173122285,
    "generation" : 30,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7027624309392262,
      "LackOfCohesion" : 0.5553589996674282,
      "MetricsIntensity" : 0.053420095555769424,
      "Density" : 3.254050925925926
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "ef132582-299d-4beb-940b-3b048db24b4e",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5532560433116559,
      "MetricsIntensity" : 0.05330672995448501,
      "Density" : 0.9962838435675102
    },
    "euclideanDistance" : 29.039754892986522,
    "generation" : 38,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706791827719492,
      "LackOfCohesion" : 0.5532560433116559,
      "MetricsIntensity" : 0.053306729954485016,
      "Density" : 3.2562174667437813
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "4a98bb2e-14de-42cc-8aa3-12a87b185e59",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.554225931266838,
      "MetricsIntensity" : 0.053260458153284854,
      "Density" : 0.9957529640771545
    },
    "euclideanDistance" : 30.038420817290653,
    "generation" : 45,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7062396466040863,
      "LackOfCohesion" : 0.554225931266838,
      "MetricsIntensity" : 0.053260458153284854,
      "Density" : 3.254482359745518
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "c851280b-22fa-4b2f-bb71-ee0aeef37a19",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5536453630841873,
      "MetricsIntensity" : 0.05335448766472377,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 30.03845604756538,
    "generation" : 26,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027622,
      "LackOfCohesion" : 0.5536453630841873,
      "MetricsIntensity" : 0.05335448766472377,
      "Density" : 3.2662037037037037
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a13c319d-a4ae-41b5-b5fc-b9ae73bc513f",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5523797854010842,
      "MetricsIntensity" : 0.05326669996624934,
      "Density" : 0.9998230401698814
    },
    "euclideanDistance" : 31.037280890119554,
    "generation" : 41,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7062396466040861,
      "LackOfCohesion" : 0.5523797854010842,
      "MetricsIntensity" : 0.05326669996624933,
      "Density" : 3.267784846732215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "023a5a4f-927e-4ab9-9077-639f8f8de88c",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5528245911303219,
      "MetricsIntensity" : 0.053314431495985644,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 32.036067793676914,
    "generation" : 38,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7049723756906077,
      "LackOfCohesion" : 0.5528245911303219,
      "MetricsIntensity" : 0.05331443149598564,
      "Density" : 3.267939814814814
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "2fb21cc1-4855-4ea9-90c0-b619e33a9cf8",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5545317393977219,
      "MetricsIntensity" : 0.05340406157262342,
      "Density" : 0.9994691205096443
    },
    "euclideanDistance" : 32.03607255893251,
    "generation" : 36,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7033149171270716,
      "LackOfCohesion" : 0.5545317393977219,
      "MetricsIntensity" : 0.05340406157262342,
      "Density" : 3.268518518518518
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "2777809a-cf5f-476d-b3df-c30c7a7d9fb0",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.55494523266261,
      "MetricsIntensity" : 0.05337674118748976,
      "Density" : 0.9959299239072731
    },
    "euclideanDistance" : 33.03491996326546,
    "generation" : 20,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7045831032578689,
      "LackOfCohesion" : 0.55494523266261,
      "MetricsIntensity" : 0.05337674118748977,
      "Density" : 3.2569444444444446
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "2804d745-47a0-4486-b13a-128f88cd6633",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5539008729619993,
      "MetricsIntensity" : 0.053333117845607236,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 33.03498423120887,
    "generation" : 40,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027622,
      "LackOfCohesion" : 0.5539008729619993,
      "MetricsIntensity" : 0.05333311784560724,
      "Density" : 3.2679398148148135
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "ef91db7c-7429-4ebb-b27b-9d113dbac92f",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5553648441885268,
      "MetricsIntensity" : 0.05346665734690391,
      "Density" : 0.9982304016988144
    },
    "euclideanDistance" : 34.03387299021495,
    "generation" : 44,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7009397457158653,
      "LackOfCohesion" : 0.5553648441885268,
      "MetricsIntensity" : 0.05346665734690391,
      "Density" : 3.2663578459756804
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "abc1ceae-82b4-414a-bcc0-91fe9d64f6f7",
    "objectives" : {
      "NumberOfConcerns" : 1.00064892926671,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5518539715221124,
      "MetricsIntensity" : 0.053326923286483585,
      "Density" : 1.0
    },
    "euclideanDistance" : 34.03393431336252,
    "generation" : 19,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7038674033149173,
      "LackOfCohesion" : 0.5518539715221124,
      "MetricsIntensity" : 0.05332692328648359,
      "Density" : 3.2702546296296293
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "bd97d351-9d72-4e6b-af30-c2c31a60afe3",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5536475517668898,
      "MetricsIntensity" : 0.05327603703440993,
      "Density" : 0.9964608033976288
    },
    "euclideanDistance" : 34.033935974271394,
    "generation" : 22,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7073440088348977,
      "LackOfCohesion" : 0.5536475517668898,
      "MetricsIntensity" : 0.05327603703440993,
      "Density" : 3.256795835743204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "53501d97-1aad-4e53-87e0-0af2db699293",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5542058494329191,
      "MetricsIntensity" : 0.05336452001580777,
      "Density" : 0.9952220845867988
    },
    "euclideanDistance" : 35.03284828404895,
    "generation" : 41,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037037037037037,
      "LackOfCohesion" : 0.5542058494329191,
      "MetricsIntensity" : 0.05336452001580778,
      "Density" : 3.2565141864504916
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "89ba0639-a93f-4562-9db0-976157ab30c0",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5551474333527131,
      "MetricsIntensity" : 0.05350522692913162,
      "Density" : 0.9982304016988144
    },
    "euclideanDistance" : 36.03196262654251,
    "generation" : 36,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7002212389380533,
      "LackOfCohesion" : 0.5551474333527131,
      "MetricsIntensity" : 0.053505226929131615,
      "Density" : 3.2682502896871375
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "ed47f246-0ed8-437e-aba1-dbfa3ca417bf",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5567019365821476,
      "MetricsIntensity" : 0.053342737350980995,
      "Density" : 0.9945142452663246
    },
    "euclideanDistance" : 36.03196456082299,
    "generation" : 44,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7042564953012715,
      "LackOfCohesion" : 0.5567019365821476,
      "MetricsIntensity" : 0.053342737350980995,
      "Density" : 3.2541980312680945
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "a5257d14-976e-452d-a2fb-e70272f05dbd",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5545687239401069,
      "MetricsIntensity" : 0.053251467017182606,
      "Density" : 1.0
    },
    "euclideanDistance" : 36.03216454792453,
    "generation" : 39,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7064017660044148,
      "LackOfCohesion" : 0.5545687239401069,
      "MetricsIntensity" : 0.053251467017182606,
      "Density" : 3.2683632157316374
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "1a94272b-c058-43e7-8636-a26047d5bbbd",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5565195604615794,
      "MetricsIntensity" : 0.05349900679889052,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 37.031087515490114,
    "generation" : 35,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699668141592921,
      "LackOfCohesion" : 0.5565195604615794,
      "MetricsIntensity" : 0.05349900679889051,
      "Density" : 3.2653534183082273
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "64f863cd-f89e-43d4-b77e-a5c18d54f092",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.554074299303414,
      "MetricsIntensity" : 0.053362788665908885,
      "Density" : 0.9985843213590515
    },
    "euclideanDistance" : 37.031145258090554,
    "generation" : 40,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702598120508568,
      "LackOfCohesion" : 0.554074299303414,
      "MetricsIntensity" : 0.05336278866590889,
      "Density" : 3.2675159235668803
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "a707879c-dbc6-414d-98dd-95c538e9dc4c",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5564644674791777,
      "MetricsIntensity" : 0.053500771970985954,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 38.03026927923534,
    "generation" : 37,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6996681415929207,
      "LackOfCohesion" : 0.5564644674791777,
      "MetricsIntensity" : 0.053500771970985954,
      "Density" : 3.2653534183082273
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "ebf010a9-2c25-4b9c-90cd-cb51a8c85a5e",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5533976877629282,
      "MetricsIntensity" : 0.053355170726353776,
      "Density" : 0.9957529640771545
    },
    "euclideanDistance" : 39.02949229461071,
    "generation" : 43,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7042564953012713,
      "LackOfCohesion" : 0.5533976877629282,
      "MetricsIntensity" : 0.053355170726353776,
      "Density" : 3.2582513028372917
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "2b17f611-6f04-4351-a9cc-0ab99f366ddb",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5533696398945662,
      "MetricsIntensity" : 0.053355170726353804,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 39.029564977616275,
    "generation" : 41,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037037037037037,
      "LackOfCohesion" : 0.5533696398945662,
      "MetricsIntensity" : 0.0533551707263538,
      "Density" : 3.2686740011580775
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "e8bfc121-30eb-4112-9bd5-640cd4f0274f",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5548954469268566,
      "MetricsIntensity" : 0.053407923164418065,
      "Density" : 0.9976995222084587
    },
    "euclideanDistance" : 40.02876810388092,
    "generation" : 37,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283188,
      "LackOfCohesion" : 0.5548954469268566,
      "MetricsIntensity" : 0.05340792316441806,
      "Density" : 3.266512166859792
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "6ca3e327-73c2-44df-b7fc-93b9d68edd23",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5562876154161878,
      "MetricsIntensity" : 0.05334249212343738,
      "Density" : 0.9946912050964432
    },
    "euclideanDistance" : 40.02879350327126,
    "generation" : 39,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.704972375690607,
      "LackOfCohesion" : 0.5562876154161878,
      "MetricsIntensity" : 0.05334249212343738,
      "Density" : 3.254777070063693
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "f6b8af1d-629f-474b-bda8-0fbc3ae7ee0a",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.553479173967116,
      "MetricsIntensity" : 0.05341237812256372,
      "Density" : 0.998407361528933
    },
    "euclideanDistance" : 41.028057131570684,
    "generation" : 20,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7007743362831855,
      "LackOfCohesion" : 0.553479173967116,
      "MetricsIntensity" : 0.053412378122563726,
      "Density" : 3.268829663962921
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "cbe2da6a-58c9-47df-9d23-2945bbf093d4",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5527340180629364,
      "MetricsIntensity" : 0.05336092413524856,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 41.02811163877187,
    "generation" : 46,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.703150912106136,
      "LackOfCohesion" : 0.5527340180629364,
      "MetricsIntensity" : 0.05336092413524856,
      "Density" : 3.2692530399536777
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "efa5169e-3a89-43f6-855f-4c7009a686f3",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5550599462563852,
      "MetricsIntensity" : 0.05339856775231212,
      "Density" : 0.9941603256060875
    },
    "euclideanDistance" : 42.027332816529714,
    "generation" : 40,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7024336283185841,
      "LackOfCohesion" : 0.5550599462563852,
      "MetricsIntensity" : 0.05339856775231213,
      "Density" : 3.2549246813441477
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "482272a4-67c3-4f27-872f-c6763d1a3916",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5571659711731407,
      "MetricsIntensity" : 0.05333444946380171,
      "Density" : 0.994337285436206
    },
    "euclideanDistance" : 42.02742655126109,
    "generation" : 46,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7049723756906074,
      "LackOfCohesion" : 0.5571659711731407,
      "MetricsIntensity" : 0.05333444946380171,
      "Density" : 3.253618992472495
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "701a9861-48c1-47c9-a46d-463f98e79e9b",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5520696991067326,
      "MetricsIntensity" : 0.053351574845794544,
      "Density" : 0.9996460803397629
    },
    "euclideanDistance" : 42.02745435580353,
    "generation" : 19,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037037037037042,
      "LackOfCohesion" : 0.5520696991067326,
      "MetricsIntensity" : 0.053351574845794544,
      "Density" : 3.270990156340475
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "e4b9c1d7-9854-4959-bd6b-48d984d24db7",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5563544450693485,
      "MetricsIntensity" : 0.05329309277988843,
      "Density" : 0.995576004247036
    },
    "euclideanDistance" : 42.02746827571194,
    "generation" : 45,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7066298342541433,
      "LackOfCohesion" : 0.5563544450693485,
      "MetricsIntensity" : 0.05329309277988844,
      "Density" : 3.2576722640416906
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "9835c259-a6ae-471d-a6bc-964b29aaf46e",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5560027069001263,
      "MetricsIntensity" : 0.05353938918375516,
      "Density" : 0.997168642718103
    },
    "euclideanDistance" : 43.02671935887078,
    "generation" : 17,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6989485334809071,
      "LackOfCohesion" : 0.5560027069001263,
      "MetricsIntensity" : 0.05353938918375516,
      "Density" : 3.2666666666666675
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "ad9ac805-e66c-4cae-b663-40aa1556b7d4",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5560027069001265,
      "MetricsIntensity" : 0.05353938918375515,
      "Density" : 0.997168642718103
    },
    "euclideanDistance" : 43.02671935887078,
    "generation" : 39,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.698948533480907,
      "LackOfCohesion" : 0.5560027069001265,
      "MetricsIntensity" : 0.05353938918375514,
      "Density" : 3.266666666666667
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "14a6d8c9-cf3b-4675-a139-d30756c7e236",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5535946548352981,
      "MetricsIntensity" : 0.053404324928992684,
      "Density" : 0.998407361528933
    },
    "euclideanDistance" : 43.02676198062923,
    "generation" : 36,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283188,
      "LackOfCohesion" : 0.5535946548352981,
      "MetricsIntensity" : 0.0534043249289927,
      "Density" : 3.268829663962921
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "b5211b65-84be-42a1-8bc8-d5b8fc95bed6",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.556531456895893,
      "MetricsIntensity" : 0.05326979522144545,
      "Density" : 0.9953990444169174
    },
    "euclideanDistance" : 43.026835607131325,
    "generation" : 43,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7062396466040863,
      "LackOfCohesion" : 0.556531456895893,
      "MetricsIntensity" : 0.053269795221445454,
      "Density" : 3.2552083333333326
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "20e17e21-0800-450d-9e9b-8a8dd8f37d7b",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5573144062702062,
      "MetricsIntensity" : 0.053376503161231756,
      "Density" : 0.9938064059458503
    },
    "euclideanDistance" : 44.0261484643566,
    "generation" : 39,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7042564953012709,
      "LackOfCohesion" : 0.5573144062702062,
      "MetricsIntensity" : 0.05337650316123175,
      "Density" : 3.2537659327925845
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "4ead901c-d612-4033-b525-167df95d8259",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5529789192920084,
      "MetricsIntensity" : 0.05339366729835189,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 44.02616911148484,
    "generation" : 39,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7024336283185841,
      "LackOfCohesion" : 0.5529789192920084,
      "MetricsIntensity" : 0.05339366729835189,
      "Density" : 3.269988412514483
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "4164d183-93cf-402b-b6bc-af9850658c48",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5548389246453834,
      "MetricsIntensity" : 0.05339986997084705,
      "Density" : 0.9975225623783401
    },
    "euclideanDistance" : 45.02556894982284,
    "generation" : 42,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283184,
      "LackOfCohesion" : 0.5548389246453834,
      "MetricsIntensity" : 0.05339986997084705,
      "Density" : 3.265932792584009
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "5dc6c2a5-2146-4758-84db-b776e5c55ef5",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5574539963558043,
      "MetricsIntensity" : 0.05332707148826952,
      "Density" : 0.9980534418686958
    },
    "euclideanDistance" : 46.02511984930326,
    "generation" : 22,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7053620784964068,
      "LackOfCohesion" : 0.5574539963558043,
      "MetricsIntensity" : 0.05332707148826951,
      "Density" : 3.267670915411355
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "6abb2eaa-ac90-4ae7-9f8c-3f9f1b596543",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.555778639973897,
      "MetricsIntensity" : 0.053442021655106656,
      "Density" : 0.9934524862856131
    },
    "euclideanDistance" : 47.02438582217632,
    "generation" : 41,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7006087437742117,
      "LackOfCohesion" : 0.555778639973897,
      "MetricsIntensity" : 0.053442021655106656,
      "Density" : 3.2544927536231882
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "226e343c-214a-495c-89d5-72a559a6bff2",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5538662216589278,
      "MetricsIntensity" : 0.053373105953064215,
      "Density" : 0.9976995222084587
    },
    "euclideanDistance" : 47.024494414892374,
    "generation" : 44,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7029867256637168,
      "LackOfCohesion" : 0.5538662216589278,
      "MetricsIntensity" : 0.053373105953064215,
      "Density" : 3.2665121668597923
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "59675025-a233-4632-b0b3-3bc79f7caf38",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5561453915329568,
      "MetricsIntensity" : 0.053294393295063594,
      "Density" : 0.9945142452663246
    },
    "euclideanDistance" : 47.024495152082324,
    "generation" : 39,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027622,
      "LackOfCohesion" : 0.5561453915329568,
      "MetricsIntensity" : 0.053294393295063594,
      "Density" : 3.2541980312680945
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "3224e083-a140-478b-a10f-2dc744bed1bf",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5543667362065937,
      "MetricsIntensity" : 0.053381159146635215,
      "Density" : 0.9946912050964432
    },
    "euclideanDistance" : 48.02393450335402,
    "generation" : 48,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7035398230088488,
      "LackOfCohesion" : 0.5543667362065937,
      "MetricsIntensity" : 0.053381159146635215,
      "Density" : 3.2566628041714933
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "388a587c-73ee-4f42-aced-5d0d13c79d1a",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5540048876595156,
      "MetricsIntensity" : 0.0534277564470575,
      "Density" : 0.9978764820385773
    },
    "euclideanDistance" : 48.023962727661655,
    "generation" : 40,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7017155506364132,
      "LackOfCohesion" : 0.5540048876595156,
      "MetricsIntensity" : 0.0534277564470575,
      "Density" : 3.268985507246377
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "38ed6ed0-a828-4058-bb65-7d3dfa50a650",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5555218423314544,
      "MetricsIntensity" : 0.05334892074347703,
      "Density" : 0.9950451247566803
    },
    "euclideanDistance" : 48.02396865550528,
    "generation" : 44,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037037037037042,
      "LackOfCohesion" : 0.5555218423314544,
      "MetricsIntensity" : 0.053348920743477024,
      "Density" : 3.2578215527230596
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "d7e6c350-1fe0-4fe4-b0bd-659889b40860",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5575445458087646,
      "MetricsIntensity" : 0.053488263819269265,
      "Density" : 0.9932755264554946
    },
    "euclideanDistance" : 49.023420686852354,
    "generation" : 13,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7007743362831855,
      "LackOfCohesion" : 0.5575445458087646,
      "MetricsIntensity" : 0.053488263819269265,
      "Density" : 3.2539130434782595
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "8a2373a9-243b-47e8-8ccc-6a2dd35aa4b1",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5544489108345351,
      "MetricsIntensity" : 0.053438421061728865,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 50.02297960683226,
    "generation" : 20,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7000553403431102,
      "LackOfCohesion" : 0.5544489108345351,
      "MetricsIntensity" : 0.05343842106172887,
      "Density" : 3.2672463768115945
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "6b646ee4-3da2-4b15-adf8-94e6d89e95b1",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5559991736592669,
      "MetricsIntensity" : 0.053395415012701355,
      "Density" : 0.9936294461157317
    },
    "euclideanDistance" : 51.022505265943586,
    "generation" : 41,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7018805309734515,
      "LackOfCohesion" : 0.5559991736592669,
      "MetricsIntensity" : 0.05339541501270136,
      "Density" : 3.255072463768116
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "72c7cde8-0dec-4691-a592-7773c491cc94",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5559878459776774,
      "MetricsIntensity" : 0.053343972126897884,
      "Density" : 0.9938064059458503
    },
    "euclideanDistance" : 51.022533947391786,
    "generation" : 30,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7031509121061361,
      "LackOfCohesion" : 0.5559878459776774,
      "MetricsIntensity" : 0.053343972126897884,
      "Density" : 3.2537659327925854
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "112a880b-3f99-4d58-9d9a-626afe34f645",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.554981011906789,
      "MetricsIntensity" : 0.0533658213821054,
      "Density" : 0.998407361528933
    },
    "euclideanDistance" : 51.022593770420904,
    "generation" : 35,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7014925373134329,
      "LackOfCohesion" : 0.554981011906789,
      "MetricsIntensity" : 0.0533658213821054,
      "Density" : 3.2688296639629204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "ab528a9b-8770-4a4b-8ddf-b86fa5a25a96",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5553889866230604,
      "MetricsIntensity" : 0.05348062566584101,
      "Density" : 0.9966377632277473
    },
    "euclideanDistance" : 52.02207402292099,
    "generation" : 48,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699335548172757,
      "LackOfCohesion" : 0.5553889866230604,
      "MetricsIntensity" : 0.05348062566584102,
      "Density" : 3.2668213457076574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "81106753-7904-411b-99eb-9488f072b6a7",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5565488041204889,
      "MetricsIntensity" : 0.05338295826434788,
      "Density" : 0.9941603256060875
    },
    "euclideanDistance" : 52.02210112273731,
    "generation" : 44,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7029867256637166,
      "LackOfCohesion" : 0.5565488041204889,
      "MetricsIntensity" : 0.053382958264347885,
      "Density" : 3.256811594202898
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "c5a9cd16-da2d-4e88-957a-2a7d15b6a391",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.5539362288103042,
      "MetricsIntensity" : 0.05333907488004103,
      "Density" : 0.9985843213590515
    },
    "euclideanDistance" : 53.02175837379746,
    "generation" : 44,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037037037037035,
      "LackOfCohesion" : 0.5539362288103042,
      "MetricsIntensity" : 0.053339074880041026,
      "Density" : 3.269409038238702
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "e45cbb38-c5a1-4783-80ef-d4e6f06ad764",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5558999348259906,
      "MetricsIntensity" : 0.053395415012701376,
      "Density" : 0.9968147230578659
    },
    "euclideanDistance" : 54.021301151061785,
    "generation" : 42,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.700774336283186,
      "LackOfCohesion" : 0.5558999348259906,
      "MetricsIntensity" : 0.053395415012701376,
      "Density" : 3.2655072463768104
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "371d015a-d98b-4761-8157-bdaebcf20202",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5544083679277313,
      "MetricsIntensity" : 0.05334712280319741,
      "Density" : 0.9953990444169174
    },
    "euclideanDistance" : 54.02130166713466,
    "generation" : 39,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037037037037037,
      "LackOfCohesion" : 0.5544083679277313,
      "MetricsIntensity" : 0.05334712280319741,
      "Density" : 3.258980301274623
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "8703741e-525d-4316-9595-46d6cba75d84",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5575799148239923,
      "MetricsIntensity" : 0.053534931306239805,
      "Density" : 0.9932755264554946
    },
    "euclideanDistance" : 55.02084361529147,
    "generation" : 27,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699501936912009,
      "LackOfCohesion" : 0.5575799148239923,
      "MetricsIntensity" : 0.053534931306239805,
      "Density" : 3.255800464037123
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "11204826-ba84-445f-bea1-d574c6ac823a",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5563768009708333,
      "MetricsIntensity" : 0.0533829582643479,
      "Density" : 0.9939833657759689
    },
    "euclideanDistance" : 55.020885250818175,
    "generation" : 43,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7024336283185841,
      "LackOfCohesion" : 0.5563768009708333,
      "MetricsIntensity" : 0.0533829582643479,
      "Density" : 3.2562318840579714
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "39fa8d36-a84f-4d28-9831-8d16839180e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5567066766997759,
      "MetricsIntensity" : 0.05338736181913036,
      "Density" : 0.993098566625376
    },
    "euclideanDistance" : 56.02048846191632,
    "generation" : 13,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283177,
      "LackOfCohesion" : 0.5567066766997759,
      "MetricsIntensity" : 0.053387361819130355,
      "Density" : 3.253333333333333
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "37d4b98d-437f-438b-a545-bb37707fab8f",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.554555094335767,
      "MetricsIntensity" : 0.05338921234020622,
      "Density" : 0.9948681649265617
    },
    "euclideanDistance" : 56.02051587218675,
    "generation" : 36,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7029867256637168,
      "LackOfCohesion" : 0.554555094335767,
      "MetricsIntensity" : 0.05338921234020622,
      "Density" : 3.259130434782609
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "3b4b17c7-7c4d-4a7f-b1ce-f1ab7aa2b34d",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5555988399829018,
      "MetricsIntensity" : 0.05338246136517012,
      "Density" : 0.9969916828879845
    },
    "euclideanDistance" : 56.02055239070317,
    "generation" : 43,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7018805309734515,
      "LackOfCohesion" : 0.5555988399829018,
      "MetricsIntensity" : 0.05338246136517012,
      "Density" : 3.2660869565217387
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "43f7708b-6ae2-481c-9e1c-b1481fdd9ad0",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5572563071609975,
      "MetricsIntensity" : 0.05337490507077687,
      "Density" : 0.9936294461157317
    },
    "euclideanDistance" : 57.020155111293064,
    "generation" : 31,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7024336283185844,
      "LackOfCohesion" : 0.5572563071609975,
      "MetricsIntensity" : 0.05337490507077688,
      "Density" : 3.255072463768116
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "07dbfab3-c704-488e-8a9a-38de0a6fe6e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5568550053589125,
      "MetricsIntensity" : 0.053429505306698134,
      "Density" : 0.9925676871350203
    },
    "euclideanDistance" : 58.01975785012064,
    "generation" : 12,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.700608743774212,
      "LackOfCohesion" : 0.5568550053589125,
      "MetricsIntensity" : 0.053429505306698134,
      "Density" : 3.2534802784222743
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "3414e02b-9c8e-4bed-9878-d67adc635d56",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.5562192005782847,
      "MetricsIntensity" : 0.05343266011232441,
      "Density" : 0.9932755264554946
    },
    "euclideanDistance" : 59.019434480714295,
    "generation" : 41,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7011621472053124,
      "LackOfCohesion" : 0.5562192005782847,
      "MetricsIntensity" : 0.05343266011232441,
      "Density" : 3.255800464037123
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "27ec7424-f045-4f33-a7c7-f9d8f3c0f0c1",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.5574049959973697,
      "MetricsIntensity" : 0.053417040395337866,
      "Density" : 0.993098566625376
    },
    "euclideanDistance" : 59.01944816013211,
    "generation" : 39,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7017155506364137,
      "LackOfCohesion" : 0.5574049959973697,
      "MetricsIntensity" : 0.05341704039533787,
      "Density" : 3.255220417633411
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "9e4945bc-ee3d-4ecc-9833-09890c996894",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.5551093376728778,
      "MetricsIntensity" : 0.053415240098649,
      "Density" : 0.997168642718103
    },
    "euclideanDistance" : 59.0195006339519,
    "generation" : 42,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7022689540675153,
      "LackOfCohesion" : 0.5551093376728778,
      "MetricsIntensity" : 0.053415240098648994,
      "Density" : 3.2685614849187936
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "f45645df-ff53-4fcc-aba6-e702cec9b110",
    "objectives" : {
      "NumberOfConcerns" : 0.9951330304996755,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5571914426369916,
      "MetricsIntensity" : 0.05357359624133553,
      "Density" : 0.9964608033976288
    },
    "euclideanDistance" : 60.0191349180831,
    "generation" : 24,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6982281284606866,
      "LackOfCohesion" : 0.5571914426369916,
      "MetricsIntensity" : 0.05357359624133553,
      "Density" : 3.2681369704004655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "66c8a6d2-14af-4095-bce2-5c2a4f5130eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.556354422862917,
      "MetricsIntensity" : 0.05341078222113365,
      "Density" : 0.9929216067952574
    },
    "euclideanDistance" : 61.018803548472825,
    "generation" : 21,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7022689540675153,
      "LackOfCohesion" : 0.556354422862917,
      "MetricsIntensity" : 0.05341078222113364,
      "Density" : 3.2546403712296987
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "d3dd877f-b1b4-40cf-99d3-bcd0959d961a",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.555262597376276,
      "MetricsIntensity" : 0.05338115914663523,
      "Density" : 0.994337285436206
    },
    "euclideanDistance" : 61.01882724786486,
    "generation" : 44,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7024336283185844,
      "LackOfCohesion" : 0.555262597376276,
      "MetricsIntensity" : 0.05338115914663523,
      "Density" : 3.2573913043478253
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "36eb8df3-beef-4da4-aa1b-6aa432dd70d3",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.556863456751702,
      "MetricsIntensity" : 0.05343396318421349,
      "Density" : 0.9964608033976288
    },
    "euclideanDistance" : 62.01853562240255,
    "generation" : 40,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6995019369120092,
      "LackOfCohesion" : 0.556863456751702,
      "MetricsIntensity" : 0.053433963184213486,
      "Density" : 3.266241299303945
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "3f2e9551-027e-4659-8473-92ed1460e31b",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.5568678774802381,
      "MetricsIntensity" : 0.0534134398019601,
      "Density" : 0.9968147230578659
    },
    "euclideanDistance" : 62.01855697873209,
    "generation" : 37,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7011621472053127,
      "LackOfCohesion" : 0.5568678774802381,
      "MetricsIntensity" : 0.05341343980196011,
      "Density" : 3.26740139211137
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "0736179f-54b0-4270-bf3c-8bbb78d6aae6",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.555409979718687,
      "MetricsIntensity" : 0.05342329856954214,
      "Density" : 0.9938064059458503
    },
    "euclideanDistance" : 63.01820727472832,
    "generation" : 39,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7017155506364134,
      "LackOfCohesion" : 0.555409979718687,
      "MetricsIntensity" : 0.05342329856954214,
      "Density" : 3.2575406032482603
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "ffb9e56c-6dd6-478e-a78e-43894927522e",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5550449770662499,
      "MetricsIntensity" : 0.05341969797616435,
      "Density" : 0.9976995222084587
    },
    "euclideanDistance" : 63.01826557103134,
    "generation" : 41,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7017155506364134,
      "LackOfCohesion" : 0.5550449770662499,
      "MetricsIntensity" : 0.05341969797616435,
      "Density" : 3.2703016241299303
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "6976516c-805b-4c8d-88f8-11a546512e9a",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.5569391257371338,
      "MetricsIntensity" : 0.053476164865127254,
      "Density" : 0.9925676871350203
    },
    "euclideanDistance" : 64.01788666626638,
    "generation" : 32,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6993355481727572,
      "LackOfCohesion" : 0.5569391257371338,
      "MetricsIntensity" : 0.053476164865127254,
      "Density" : 3.2553685432385366
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "f7cee768-fcb4-41a2-8b27-ce6ad8aa8056",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.5570119854821245,
      "MetricsIntensity" : 0.05347616486512729,
      "Density" : 0.9959299239072731
    },
    "euclideanDistance" : 64.01793447222528,
    "generation" : 39,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6987818383167226,
      "LackOfCohesion" : 0.5570119854821245,
      "MetricsIntensity" : 0.05347616486512728,
      "Density" : 3.2663958212420194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "b9e43610-f695-484b-b95f-7eaa03b336c7",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.5570119854821246,
      "MetricsIntensity" : 0.05347616486512728,
      "Density" : 0.9959299239072731
    },
    "euclideanDistance" : 64.01793447222528,
    "generation" : 43,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6987818383167217,
      "LackOfCohesion" : 0.5570119854821246,
      "MetricsIntensity" : 0.05347616486512728,
      "Density" : 3.266395821242019
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "43a2b9f8-05f4-40bb-8411-c51e5f1fbce4",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 66.0,
      "LackOfCohesion" : 0.5548728612015553,
      "MetricsIntensity" : 0.05341969797616435,
      "Density" : 0.9975225623783401
    },
    "euclideanDistance" : 66.01742651847539,
    "generation" : 47,
    "numberOfRefactorings" : 66,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7011621472053124,
      "LackOfCohesion" : 0.5548728612015553,
      "MetricsIntensity" : 0.05341969797616436,
      "Density" : 3.269721577726218
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "d09046b2-fdb6-4d95-95f1-943fa9d1b6e0",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5564382149903213,
      "MetricsIntensity" : 0.053457429502129616,
      "Density" : 0.9929216067952574
    },
    "euclideanDistance" : 67.01710151697233,
    "generation" : 37,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7009966777408638,
      "LackOfCohesion" : 0.5564382149903213,
      "MetricsIntensity" : 0.05345742950212962,
      "Density" : 3.2565293093441676
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "96f7cc7d-ae57-4949-8854-39a5aa8195d8",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5564016550111385,
      "MetricsIntensity" : 0.05347256191070466,
      "Density" : 0.9962838435675102
    },
    "euclideanDistance" : 67.01713183386877,
    "generation" : 43,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6987818383167215,
      "LackOfCohesion" : 0.5564016550111385,
      "MetricsIntensity" : 0.05347256191070465,
      "Density" : 3.26755658734765
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "3f40e81a-c507-4864-acbe-4e41662e5d6b",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.5550200846234207,
      "MetricsIntensity" : 0.053461890302843366,
      "Density" : 0.9969916828879845
    },
    "euclideanDistance" : 68.01689328689173,
    "generation" : 48,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.700442967884828,
      "LackOfCohesion" : 0.5550200846234207,
      "MetricsIntensity" : 0.05346189030284337,
      "Density" : 3.2698781195589084
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "5e2ec341-00a0-46e1-9f83-1d18668de0e6",
    "objectives" : {
      "NumberOfConcerns" : 0.9944841012329656,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5565499781818432,
      "MetricsIntensity" : 0.05351481661025846,
      "Density" : 0.9957529640771545
    },
    "euclideanDistance" : 69.01661491486585,
    "generation" : 6,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6980609418282548,
      "LackOfCohesion" : 0.5565499781818432,
      "MetricsIntensity" : 0.05351481661025847,
      "Density" : 3.267711962833914
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "c2062d5b-df6b-49c3-b171-a56b9fe0f41e",
    "objectives" : {
      "NumberOfConcerns" : 0.9944841012329656,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5565499781818429,
      "MetricsIntensity" : 0.053514816610258475,
      "Density" : 0.9957529640771545
    },
    "euclideanDistance" : 69.01661491486585,
    "generation" : 26,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6980609418282548,
      "LackOfCohesion" : 0.5565499781818429,
      "MetricsIntensity" : 0.05351481661025848,
      "Density" : 3.267711962833914
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.authentication.CachingUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.DelegatingReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "1d2c22d3-83c8-4875-a251-e1c4bbe56352",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.5559007442643261,
      "MetricsIntensity" : 0.05345382654770698,
      "Density" : 0.9966377632277473
    },
    "euclideanDistance" : 70.01641267800541,
    "generation" : 42,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7004429678848296,
      "LackOfCohesion" : 0.5559007442643261,
      "MetricsIntensity" : 0.05345382654770699,
      "Density" : 3.2687173534532787
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a885fb34-7949-49c6-85d3-712b40e60c1d",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5560487387534382,
      "MetricsIntensity" : 0.053496068953715545,
      "Density" : 0.9961068837373916
    },
    "euclideanDistance" : 72.01593724015336,
    "generation" : 36,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699722991689751,
      "LackOfCohesion" : 0.5560487387534382,
      "MetricsIntensity" : 0.05349606895371555,
      "Density" : 3.268873403019745
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "76cbc18c-5fec-462a-b48d-0436ff436ae1",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5560487387534383,
      "MetricsIntensity" : 0.05349606895371551,
      "Density" : 0.9961068837373916
    },
    "euclideanDistance" : 72.01593724015336,
    "generation" : 37,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6997229916897507,
      "LackOfCohesion" : 0.5560487387534383,
      "MetricsIntensity" : 0.05349606895371551,
      "Density" : 3.2688734030197444
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.web.DefaultSaml2AuthenticationRequestContextResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.RequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2LogoutRequestFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OAuth2LoginBeanConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.acls.domain.SidRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.ResolvingAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ClaimConversionService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.ProviderManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.cas.web.CasAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponseMapConverter'"
      } ]
    } ]
  } ]
}