{
  "executionId" : "04d2590a-3249-4f89-817f-a4cab17aeb0a",
  "computingTime" : 648818,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.187100522951772,
    "meanNumConcerns" : 1.642105263157895,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "dda662fd-482b-415d-b74a-5a7f5da5c695",
    "objectives" : {
      "NumberOfConcerns" : 1.0043859649122806,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5539048604942963,
      "MetricsIntensity" : 0.053273932728607684,
      "Density" : 0.9969006381039198
    },
    "euclideanDistance" : 9.127554478344807,
    "generation" : 45,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641124586549063,
      "LackOfCohesion" : 0.5539048604942963,
      "MetricsIntensity" : 0.053273932728607684,
      "Density" : 3.162521688837478
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "5fb7df31-4f1d-4fd8-b0de-1926e35bc5bc",
    "objectives" : {
      "NumberOfConcerns" : 1.0043859649122806,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5548339162178726,
      "MetricsIntensity" : 0.05326282185644007,
      "Density" : 0.9969006381039198
    },
    "euclideanDistance" : 9.12761084027702,
    "generation" : 4,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6411245865490633,
      "LackOfCohesion" : 0.5548339162178726,
      "MetricsIntensity" : 0.053262821856440073,
      "Density" : 3.1625216888374776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "4361457d-8ec3-4a9f-a824-f7a659a411c9",
    "objectives" : {
      "NumberOfConcerns" : 1.0050607287449393,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5542273943784741,
      "MetricsIntensity" : 0.05326865793841248,
      "Density" : 0.9972652689152234
    },
    "euclideanDistance" : 9.12768813225167,
    "generation" : 44,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6422271223814775,
      "LackOfCohesion" : 0.5542273943784741,
      "MetricsIntensity" : 0.05326865793841248,
      "Density" : 3.16184971098266
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "522bba94-1acb-4cad-94a6-4872d2ea0f47",
    "objectives" : {
      "NumberOfConcerns" : 1.0050607287449393,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5551564501020504,
      "MetricsIntensity" : 0.053257547066244845,
      "Density" : 0.9972652689152234
    },
    "euclideanDistance" : 9.127744526193714,
    "generation" : 16,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6422271223814775,
      "LackOfCohesion" : 0.5551564501020504,
      "MetricsIntensity" : 0.05325754706624485,
      "Density" : 3.1618497109826595
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "4530faf6-7d67-4e5c-b102-9d8bb8baf35d",
    "objectives" : {
      "NumberOfConcerns" : 1.0050607287449393,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5551564501020503,
      "MetricsIntensity" : 0.053257547066244866,
      "Density" : 0.9972652689152234
    },
    "euclideanDistance" : 9.127744526193714,
    "generation" : 41,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6422271223814775,
      "LackOfCohesion" : 0.5551564501020503,
      "MetricsIntensity" : 0.053257547066244866,
      "Density" : 3.161849710982659
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "0d9bbf60-2c3c-42c2-9904-94d918183126",
    "objectives" : {
      "NumberOfConcerns" : 1.0033738191632928,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5534990778250534,
      "MetricsIntensity" : 0.05329985097252876,
      "Density" : 0.9965360072926163
    },
    "euclideanDistance" : 10.114793380889196,
    "generation" : 33,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6403750689464978,
      "LackOfCohesion" : 0.5534990778250534,
      "MetricsIntensity" : 0.05329985097252876,
      "Density" : 3.1631944444444446
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "2ab90123-0245-47a4-90b3-be28cd70d8af",
    "objectives" : {
      "NumberOfConcerns" : 1.0040485829959513,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5538218222404873,
      "MetricsIntensity" : 0.053294572739259014,
      "Density" : 0.9969006381039198
    },
    "euclideanDistance" : 10.114913907767155,
    "generation" : 41,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6414782129067849,
      "LackOfCohesion" : 0.5538218222404873,
      "MetricsIntensity" : 0.053294572739259014,
      "Density" : 3.162521688837478
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "d3b5d6f6-e6a4-4773-8c05-95ba617c53b9",
    "objectives" : {
      "NumberOfConcerns" : 1.0040485829959513,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5547514843973033,
      "MetricsIntensity" : 0.05328345461456382,
      "Density" : 0.9969006381039198
    },
    "euclideanDistance" : 10.114964793574165,
    "generation" : 46,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6414782129067844,
      "LackOfCohesion" : 0.5547514843973033,
      "MetricsIntensity" : 0.053283454614563824,
      "Density" : 3.1625216888374776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "80e8a4d6-c5a1-4674-9e1d-ce3db924fd5f",
    "objectives" : {
      "NumberOfConcerns" : 1.003711201079622,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5532764258949671,
      "MetricsIntensity" : 0.05331404387755725,
      "Density" : 0.9965360072926163
    },
    "euclideanDistance" : 11.104480058954994,
    "generation" : 36,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6409266409266416,
      "LackOfCohesion" : 0.5532764258949671,
      "MetricsIntensity" : 0.05331404387755725,
      "Density" : 3.1631944444444446
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "0c3aaf0a-4aed-4329-b10b-7b9f7802515d",
    "objectives" : {
      "NumberOfConcerns" : 1.0026990553306343,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5538002370905013,
      "MetricsIntensity" : 0.053328879863058884,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 12.095755515010651,
    "generation" : 46,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640176600441501,
      "LackOfCohesion" : 0.5538002370905013,
      "MetricsIntensity" : 0.053328879863058884,
      "Density" : 3.163867979154604
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "0149a51b-c14f-44ec-aa03-e3b8da5725cc",
    "objectives" : {
      "NumberOfConcerns" : 1.003711201079622,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5549007915206382,
      "MetricsIntensity" : 0.05329360087408553,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 12.095889743330902,
    "generation" : 47,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640926640926641,
      "LackOfCohesion" : 0.5549007915206382,
      "MetricsIntensity" : 0.05329360087408552,
      "Density" : 3.1638679791546043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "788fc27b-9abb-4e56-8067-0889ad7f6b63",
    "objectives" : {
      "NumberOfConcerns" : 1.0043859649122806,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5552235359360717,
      "MetricsIntensity" : 0.05328832264081574,
      "Density" : 0.9965360072926163
    },
    "euclideanDistance" : 12.095990575415092,
    "generation" : 38,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6420297848869276,
      "LackOfCohesion" : 0.5552235359360717,
      "MetricsIntensity" : 0.05328832264081574,
      "Density" : 3.1631944444444455
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "57db823a-d034-4b3f-97aa-4016f8c2f22d",
    "objectives" : {
      "NumberOfConcerns" : 1.002361673414305,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5537952888491063,
      "MetricsIntensity" : 0.05332623096146437,
      "Density" : 1.0034639927073838
    },
    "euclideanDistance" : 12.096330097093507,
    "generation" : 39,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6396247240618098,
      "LackOfCohesion" : 0.5537952888491063,
      "MetricsIntensity" : 0.05332623096146437,
      "Density" : 3.1888760139049834
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "0860b1ee-b8a7-447e-88b4-a41f5dd754ca",
    "objectives" : {
      "NumberOfConcerns" : 1.0030364372469636,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5541182440708203,
      "MetricsIntensity" : 0.05332094928062226,
      "Density" : 1.0038286235186873
    },
    "euclideanDistance" : 12.096431050185208,
    "generation" : 39,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6407284768211923,
      "LackOfCohesion" : 0.5541182440708203,
      "MetricsIntensity" : 0.05332094928062227,
      "Density" : 3.1881876085697747
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "96fe3a5d-2c03-489c-8033-ca2bf3de30d1",
    "objectives" : {
      "NumberOfConcerns" : 1.0030364372469636,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.555048513453082,
      "MetricsIntensity" : 0.053309823893925336,
      "Density" : 1.0038286235186873
    },
    "euclideanDistance" : 12.096473651004684,
    "generation" : 31,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6407284768211923,
      "LackOfCohesion" : 0.555048513453082,
      "MetricsIntensity" : 0.053309823893925336,
      "Density" : 3.1881876085697747
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "71f732f2-88c5-440e-b05e-2b98ad07b0c4",
    "objectives" : {
      "NumberOfConcerns" : 1.0020242914979758,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.553410009767784,
      "MetricsIntensity" : 0.05337279713448474,
      "Density" : 0.9959890610756609
    },
    "euclideanDistance" : 13.08835964454368,
    "generation" : 47,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399779127553835,
      "LackOfCohesion" : 0.553410009767784,
      "MetricsIntensity" : 0.05337279713448474,
      "Density" : 3.1651216685979136
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "605de965-f67c-42a2-a7f5-9634b65149d0",
    "objectives" : {
      "NumberOfConcerns" : 1.002361673414305,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5526758049747557,
      "MetricsIntensity" : 0.053366555321520244,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 13.088368304348789,
    "generation" : 10,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6405300938707894,
      "LackOfCohesion" : 0.5526758049747557,
      "MetricsIntensity" : 0.053366555321520244,
      "Density" : 3.165701042873696
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "2af355e6-349e-41db-8d7c-14b2c00bfaf2",
    "objectives" : {
      "NumberOfConcerns" : 1.0020242914979758,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5543408871692496,
      "MetricsIntensity" : 0.05336166447629325,
      "Density" : 0.9959890610756609
    },
    "euclideanDistance" : 13.088398992121139,
    "generation" : 43,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399779127553835,
      "LackOfCohesion" : 0.5543408871692496,
      "MetricsIntensity" : 0.05336166447629325,
      "Density" : 3.1651216685979144
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "dc54f3fc-b5bb-444d-93ac-e4db0b147295",
    "objectives" : {
      "NumberOfConcerns" : 1.0033738191632928,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5548183495390515,
      "MetricsIntensity" : 0.05331426721272903,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 13.088536291135716,
    "generation" : 41,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412803532008826,
      "LackOfCohesion" : 0.5548183495390515,
      "MetricsIntensity" : 0.053314267212729034,
      "Density" : 3.1638679791546043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "5c691f5d-3994-4f22-94af-b6610d5b887a",
    "objectives" : {
      "NumberOfConcerns" : 1.0020242914979758,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5536017309006817,
      "MetricsIntensity" : 0.05335277203042602,
      "Density" : 1.0034639927073838
    },
    "euclideanDistance" : 13.088938614729301,
    "generation" : 40,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399779127553835,
      "LackOfCohesion" : 0.5536017309006817,
      "MetricsIntensity" : 0.05335277203042602,
      "Density" : 3.1907246376811593
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "6a191477-257e-4ce0-8fc6-d4fd535b264d",
    "objectives" : {
      "NumberOfConcerns" : 1.0020242914979758,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5545326083021472,
      "MetricsIntensity" : 0.053341639372234566,
      "Density" : 1.0034639927073838
    },
    "euclideanDistance" : 13.088977974218368,
    "generation" : 42,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399779127553833,
      "LackOfCohesion" : 0.5545326083021472,
      "MetricsIntensity" : 0.053341639372234566,
      "Density" : 3.1907246376811593
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "cd01eef2-bb8e-4631-9141-3f79f3397c72",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5548310433456803,
      "MetricsIntensity" : 0.05336153787991287,
      "Density" : 1.0029170464904285
    },
    "euclideanDistance" : 14.082585998994702,
    "generation" : 17,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638873550524572,
      "LackOfCohesion" : 0.5548310433456803,
      "MetricsIntensity" : 0.05336153787991287,
      "Density" : 3.1889855072463766
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "b7ee3355-f6fe-44de-9b3f-627d417c3009",
    "objectives" : {
      "NumberOfConcerns" : 1.0020242914979758,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5551542096492388,
      "MetricsIntensity" : 0.0533562527469918,
      "Density" : 1.003281677301732
    },
    "euclideanDistance" : 14.082672682802787,
    "generation" : 38,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399779127553835,
      "LackOfCohesion" : 0.5551542096492388,
      "MetricsIntensity" : 0.05335625274699181,
      "Density" : 3.1882966396292005
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "36c38444-e629-4117-a71d-d57b2e55c387",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5527800184944689,
      "MetricsIntensity" : 0.0534130516437042,
      "Density" : 0.9956244302643573
    },
    "euclideanDistance" : 15.076550918085589,
    "generation" : 45,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6397790055248622,
      "LackOfCohesion" : 0.5527800184944689,
      "MetricsIntensity" : 0.053413051643704204,
      "Density" : 3.1657971014492756
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "2e8972e0-caa3-4b5e-9507-ac10c3b3b306",
    "objectives" : {
      "NumberOfConcerns" : 1.0016869095816465,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5536698515962534,
      "MetricsIntensity" : 0.05337711676103799,
      "Density" : 0.9952597994530538
    },
    "euclideanDistance" : 15.07658177951471,
    "generation" : 48,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6394257316399778,
      "LackOfCohesion" : 0.5536698515962534,
      "MetricsIntensity" : 0.05337711676103799,
      "Density" : 3.164637681159421
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "41b61ceb-5bff-434d-9bfb-d0275321aeb7",
    "objectives" : {
      "NumberOfConcerns" : 1.002361673414305,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5552537947818121,
      "MetricsIntensity" : 0.053326691415691636,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 15.07674490227541,
    "generation" : 43,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63962472406181,
      "LackOfCohesion" : 0.5552537947818121,
      "MetricsIntensity" : 0.053326691415691636,
      "Density" : 3.1620370370370363
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "a35b10cb-8ed4-4a65-a040-391e0203d0eb",
    "objectives" : {
      "NumberOfConcerns" : 1.0016869095816465,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5527414000385842,
      "MetricsIntensity" : 0.05339746257364443,
      "Density" : 0.9954421148587056
    },
    "euclideanDistance" : 16.07179691301466,
    "generation" : 47,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640331491712707,
      "LackOfCohesion" : 0.5527414000385842,
      "MetricsIntensity" : 0.05339746257364442,
      "Density" : 3.1670533642691416
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "8b41e023-5267-435b-8400-b1c7acb0fc26",
    "objectives" : {
      "NumberOfConcerns" : 1.0040485829959513,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5542287938961274,
      "MetricsIntensity" : 0.053291447690037366,
      "Density" : 0.996718322698268
    },
    "euclideanDistance" : 16.07207424404825,
    "generation" : 39,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641478212906785,
      "LackOfCohesion" : 0.5542287938961274,
      "MetricsIntensity" : 0.05329144769003737,
      "Density" : 3.1619433198380555
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "aba41b38-cd59-4d56-9390-7f26b8e39a92",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5532704952439385,
      "MetricsIntensity" : 0.053412924964526994,
      "Density" : 1.0025524156791248
    },
    "euclideanDistance" : 16.072194078924518,
    "generation" : 24,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6386740331491707,
      "LackOfCohesion" : 0.5532704952439385,
      "MetricsIntensity" : 0.053412924964527,
      "Density" : 3.1896751740139213
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "ae2ede8b-8f40-4ec8-8620-b97a29277589",
    "objectives" : {
      "NumberOfConcerns" : 1.0030364372469636,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5538229577655734,
      "MetricsIntensity" : 0.053317394303132364,
      "Density" : 0.9963536918869644
    },
    "euclideanDistance" : 17.067758065629633,
    "generation" : 47,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6407284768211925,
      "LackOfCohesion" : 0.5538229577655734,
      "MetricsIntensity" : 0.05331739430313237,
      "Density" : 3.162615740740741
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "ad3a9e96-2bc5-46a6-b098-d13e1b50e9e5",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5532318767880537,
      "MetricsIntensity" : 0.05339733589446723,
      "Density" : 1.002370100273473
    },
    "euclideanDistance" : 17.067972577867423,
    "generation" : 33,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6392265193370172,
      "LackOfCohesion" : 0.5532318767880537,
      "MetricsIntensity" : 0.05339733589446723,
      "Density" : 3.1909460243760877
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "cb94be00-3422-4f01-8213-d93e647e2ef6",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5528457246895693,
      "MetricsIntensity" : 0.05344400955261785,
      "Density" : 0.9948951686417502
    },
    "euclideanDistance" : 18.063766524095215,
    "generation" : 46,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6395798783858484,
      "LackOfCohesion" : 0.5528457246895693,
      "MetricsIntensity" : 0.05344400955261785,
      "Density" : 3.1671503192106787
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "4887889d-8090-46a4-ad8d-7ca9e5f21fee",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5540669882286843,
      "MetricsIntensity" : 0.05337397020326958,
      "Density" : 0.995077484047402
    },
    "euclideanDistance" : 18.063832470528926,
    "generation" : 45,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6383213694091665,
      "LackOfCohesion" : 0.5540669882286843,
      "MetricsIntensity" : 0.053373970203269595,
      "Density" : 3.1640579710144925
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "f30c8a01-83a7-48e5-b2f0-38fc817fc38f",
    "objectives" : {
      "NumberOfConcerns" : 1.0026990553306343,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5532772051846873,
      "MetricsIntensity" : 0.053336878159352445,
      "Density" : 0.9959890610756609
    },
    "euclideanDistance" : 18.06395195115654,
    "generation" : 41,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6401766004415017,
      "LackOfCohesion" : 0.5532772051846873,
      "MetricsIntensity" : 0.053336878159352445,
      "Density" : 3.163288940359004
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "80243188-f097-42c6-a4e2-05615507fb91",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5537434729793167,
      "MetricsIntensity" : 0.053417802542171176,
      "Density" : 1.0021877848678213
    },
    "euclideanDistance" : 18.064215758442735,
    "generation" : 44,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6392265193370164,
      "LackOfCohesion" : 0.5537434729793167,
      "MetricsIntensity" : 0.05341780254217118,
      "Density" : 3.190365641323272
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "1a5943d0-f2ef-4da7-91df-3ae47f97362b",
    "objectives" : {
      "NumberOfConcerns" : 1.0003373819163293,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5541039463651594,
      "MetricsIntensity" : 0.053396110722343924,
      "Density" : 1.0027347310847767
    },
    "euclideanDistance" : 18.064219721499196,
    "generation" : 40,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6381215469613257,
      "LackOfCohesion" : 0.5541039463651594,
      "MetricsIntensity" : 0.053396110722343924,
      "Density" : 3.1902552204176335
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "893e69e4-8c3b-434c-972e-eac107fcc083",
    "objectives" : {
      "NumberOfConcerns" : 1.0033738191632928,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5542953176332375,
      "MetricsIntensity" : 0.05332226550902258,
      "Density" : 0.9959890610756609
    },
    "euclideanDistance" : 19.060662102715998,
    "generation" : 40,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412803532008826,
      "LackOfCohesion" : 0.5542953176332375,
      "MetricsIntensity" : 0.05332226550902258,
      "Density" : 3.163288940359004
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "9213f8a8-c306-44ca-b91a-c81a3a3367bc",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5539492773266594,
      "MetricsIntensity" : 0.05337891235106889,
      "Density" : 0.9990884229717412
    },
    "euclideanDistance" : 19.060707952843888,
    "generation" : 42,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638873550524572,
      "LackOfCohesion" : 0.5539492773266594,
      "MetricsIntensity" : 0.053378912351068876,
      "Density" : 3.1749710312862103
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "063adfbe-b57a-48a1-b81f-b10ecbbe6e15",
    "objectives" : {
      "NumberOfConcerns" : 0.9996626180836707,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.555334062807833,
      "MetricsIntensity" : 0.05340488230489132,
      "Density" : 1.0021877848678213
    },
    "euclideanDistance" : 19.060822482487495,
    "generation" : 48,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6370165745856355,
      "LackOfCohesion" : 0.555334062807833,
      "MetricsIntensity" : 0.05340488230489132,
      "Density" : 3.1885150812064964
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "ad90b8a4-85fa-46f6-89b9-a509bded3120",
    "objectives" : {
      "NumberOfConcerns" : 0.9996626180836707,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.555334062807833,
      "MetricsIntensity" : 0.05340488230489132,
      "Density" : 1.0021877848678213
    },
    "euclideanDistance" : 19.060822482487495,
    "generation" : 47,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637016574585635,
      "LackOfCohesion" : 0.555334062807833,
      "MetricsIntensity" : 0.05340488230489132,
      "Density" : 3.1885150812064964
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "b0dc1ad7-2a26-4de7-a4ec-ab5f2d87f0e6",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5526761924643837,
      "MetricsIntensity" : 0.053389453815223586,
      "Density" : 0.9956244302643573
    },
    "euclideanDistance" : 20.057474175234287,
    "generation" : 41,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6397790055248622,
      "LackOfCohesion" : 0.5526761924643837,
      "MetricsIntensity" : 0.053389453815223586,
      "Density" : 3.1657971014492756
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "305726fe-994b-48d1-9766-eae47bb1be87",
    "objectives" : {
      "NumberOfConcerns" : 1.0016869095816465,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5533817436630216,
      "MetricsIntensity" : 0.053383324694945326,
      "Density" : 0.9954421148587056
    },
    "euclideanDistance" : 20.05750140975781,
    "generation" : 25,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6394257316399776,
      "LackOfCohesion" : 0.5533817436630216,
      "MetricsIntensity" : 0.053383324694945326,
      "Density" : 3.163383545770566
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "168f3378-cb80-4db4-b42f-145ae910996d",
    "objectives" : {
      "NumberOfConcerns" : 1.002361673414305,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5538892597298771,
      "MetricsIntensity" : 0.0533482492230536,
      "Density" : 0.9956244302643573
    },
    "euclideanDistance" : 20.057558083630433,
    "generation" : 40,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6405300938707894,
      "LackOfCohesion" : 0.5538892597298771,
      "MetricsIntensity" : 0.053348249223053604,
      "Density" : 3.163962920046349
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "d14834ff-79bf-4f26-82b7-96cadb110789",
    "objectives" : {
      "NumberOfConcerns" : 0.9993252361673415,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5551412585623283,
      "MetricsIntensity" : 0.053431509586864316,
      "Density" : 1.0021877848678213
    },
    "euclideanDistance" : 20.0577682713445,
    "generation" : 15,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6373687119955778,
      "LackOfCohesion" : 0.5551412585623283,
      "MetricsIntensity" : 0.053431509586864316,
      "Density" : 3.1903656413232726
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "89668674-3014-4aef-b5ea-e3901b94f393",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5556188220134555,
      "MetricsIntensity" : 0.053384004645316,
      "Density" : 1.002370100273473
    },
    "euclideanDistance" : 20.057857760195166,
    "generation" : 43,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6386740331491711,
      "LackOfCohesion" : 0.5556188220134555,
      "MetricsIntensity" : 0.05338400464531601,
      "Density" : 3.1890951276102086
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "767dfd5b-aadd-42bf-91c0-346a2570376c",
    "objectives" : {
      "NumberOfConcerns" : 1.0016869095816465,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.554407807654284,
      "MetricsIntensity" : 0.05333997139282729,
      "Density" : 0.99179580674567
    },
    "euclideanDistance" : 21.054625353039214,
    "generation" : 35,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6385209713024287,
      "LackOfCohesion" : 0.554407807654284,
      "MetricsIntensity" : 0.053339971392827285,
      "Density" : 3.149971048060219
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "ef8fa0ca-108f-47b5-a519-17273379e4a6",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5541754769617298,
      "MetricsIntensity" : 0.05342971164658471,
      "Density" : 0.9947128532360985
    },
    "euclideanDistance" : 21.05467688789703,
    "generation" : 43,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6384742951907134,
      "LackOfCohesion" : 0.5541754769617298,
      "MetricsIntensity" : 0.05342971164658471,
      "Density" : 3.166569936157865
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "016fbae5-aefe-4505-87ca-0b1f7f701128",
    "objectives" : {
      "NumberOfConcerns" : 1.002361673414305,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5547307628759981,
      "MetricsIntensity" : 0.053334689711985184,
      "Density" : 0.9921604375569736
    },
    "euclideanDistance" : 21.054683138593912,
    "generation" : 41,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6396247240618098,
      "LackOfCohesion" : 0.5547307628759981,
      "MetricsIntensity" : 0.05333468971198519,
      "Density" : 3.1493055555555545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "edc82f9c-0765-4da6-8fa5-a8fc9baee2d1",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5529748226910716,
      "MetricsIntensity" : 0.053409365336968447,
      "Density" : 0.995077484047402
    },
    "euclideanDistance" : 21.05469455720186,
    "generation" : 40,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638674033149171,
      "LackOfCohesion" : 0.5529748226910716,
      "MetricsIntensity" : 0.053409365336968447,
      "Density" : 3.1640579710144925
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "3cc92a27-1132-4259-bbfe-e957a8e2f173",
    "objectives" : {
      "NumberOfConcerns" : 0.9993252361673415,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.553542206799664,
      "MetricsIntensity" : 0.05346078342916381,
      "Density" : 0.9941659070191431
    },
    "euclideanDistance" : 22.05212651442925,
    "generation" : 44,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6373687119955778,
      "LackOfCohesion" : 0.553542206799664,
      "MetricsIntensity" : 0.05346078342916381,
      "Density" : 3.164828786999419
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "2950cdc9-9547-4638-adcb-9e2d226a6388",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5543249895773716,
      "MetricsIntensity" : 0.05336068154641028,
      "Density" : 0.99179580674567
    },
    "euclideanDistance" : 22.05213103886422,
    "generation" : 42,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638873550524572,
      "LackOfCohesion" : 0.5543249895773716,
      "MetricsIntensity" : 0.05336068154641027,
      "Density" : 3.1499710480602197
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "7563f236-88c3-4465-992c-2fada3fbd0be",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.552936204235187,
      "MetricsIntensity" : 0.053393776266908666,
      "Density" : 0.9948951686417502
    },
    "euclideanDistance" : 22.052220547006637,
    "generation" : 47,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6392265193370172,
      "LackOfCohesion" : 0.552936204235187,
      "MetricsIntensity" : 0.05339377626690867,
      "Density" : 3.165313225058005
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "a442f7da-0322-4eaf-ab22-6d696b5fdb12",
    "objectives" : {
      "NumberOfConcerns" : 0.9986504723346828,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5535788696740855,
      "MetricsIntensity" : 0.0534830097990987,
      "Density" : 1.0018231540565177
    },
    "euclideanDistance" : 22.052443456342537,
    "generation" : 25,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63716814159292,
      "LackOfCohesion" : 0.5535788696740855,
      "MetricsIntensity" : 0.0534830097990987,
      "Density" : 3.1910569105691056
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "0be98b01-2bc1-48cc-b1df-f8ab0e390154",
    "objectives" : {
      "NumberOfConcerns" : 0.9986504723346828,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5545115759113104,
      "MetricsIntensity" : 0.05347185526928011,
      "Density" : 1.0018231540565177
    },
    "euclideanDistance" : 22.052466862576253,
    "generation" : 38,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6371681415929207,
      "LackOfCohesion" : 0.5545115759113104,
      "MetricsIntensity" : 0.05347185526928012,
      "Density" : 3.1910569105691056
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "ceac117e-2894-4fad-8c71-dca22afa4480",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5527418307105118,
      "MetricsIntensity" : 0.053420396280532204,
      "Density" : 0.9948951686417502
    },
    "euclideanDistance" : 23.049935870837345,
    "generation" : 46,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6395798783858484,
      "LackOfCohesion" : 0.5527418307105118,
      "MetricsIntensity" : 0.0534203962805322,
      "Density" : 3.167150319210679
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "9aaa846b-018b-41af-bb55-0a6da1031214",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5529095979850428,
      "MetricsIntensity" : 0.053419759886949914,
      "Density" : 0.9952597994530538
    },
    "euclideanDistance" : 23.049970283682246,
    "generation" : 45,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6392265193370168,
      "LackOfCohesion" : 0.5529095979850428,
      "MetricsIntensity" : 0.05341975988694991,
      "Density" : 3.164637681159421
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "7fd808f6-aaff-4720-926b-f57677b5de81",
    "objectives" : {
      "NumberOfConcerns" : 0.9989878542510121,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.554472906874606,
      "MetricsIntensity" : 0.05345624578131588,
      "Density" : 1.001640838650866
    },
    "euclideanDistance" : 23.05019650409222,
    "generation" : 40,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6377212389380533,
      "LackOfCohesion" : 0.554472906874606,
      "MetricsIntensity" : 0.053456245781315886,
      "Density" : 3.1923300406740274
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "36eaf3c8-0277-49bc-8e82-776d73033fd6",
    "objectives" : {
      "NumberOfConcerns" : 0.9996626180836707,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5555288498726074,
      "MetricsIntensity" : 0.05341959930655787,
      "Density" : 1.001640838650866
    },
    "euclideanDistance" : 23.05025109790082,
    "generation" : 46,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637016574585635,
      "LackOfCohesion" : 0.5555288498726074,
      "MetricsIntensity" : 0.05341959930655787,
      "Density" : 3.1886244921648297
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "273a6485-3158-420c-95c8-0c805f84ae2c",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5533722190596911,
      "MetricsIntensity" : 0.053406216721281305,
      "Density" : 0.9910665451230629
    },
    "euclideanDistance" : 24.047687746094713,
    "generation" : 42,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637569060773481,
      "LackOfCohesion" : 0.5533722190596911,
      "MetricsIntensity" : 0.053406216721281305,
      "Density" : 3.151304347826087
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "0875ab12-d961-4f1c-8f93-04905cc27085",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5533722190596909,
      "MetricsIntensity" : 0.05340621672128131,
      "Density" : 0.9910665451230629
    },
    "euclideanDistance" : 24.047687746094713,
    "generation" : 41,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637569060773481,
      "LackOfCohesion" : 0.5533722190596909,
      "MetricsIntensity" : 0.05340621672128131,
      "Density" : 3.1513043478260876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "93e0496a-def5-4fa1-9ae5-9b4eeae9f3b2",
    "objectives" : {
      "NumberOfConcerns" : 1.0016869095816465,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5547976581769752,
      "MetricsIntensity" : 0.053365555936095196,
      "Density" : 0.9914311759343665
    },
    "euclideanDistance" : 24.04780573702143,
    "generation" : 39,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6394257316399778,
      "LackOfCohesion" : 0.5547976581769752,
      "MetricsIntensity" : 0.053365555936095196,
      "Density" : 3.15063731170336
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "9b292c76-ccc3-400d-818c-ec9d91242765",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5530406563758297,
      "MetricsIntensity" : 0.05344032083337771,
      "Density" : 0.9943482224247949
    },
    "euclideanDistance" : 24.04781566427468,
    "generation" : 48,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6384742951907136,
      "LackOfCohesion" : 0.5530406563758297,
      "MetricsIntensity" : 0.05344032083337771,
      "Density" : 3.165409170052234
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "41e6b52b-0429-4bb7-b9da-3dd145daf560",
    "objectives" : {
      "NumberOfConcerns" : 1.0003373819163293,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5532082282117307,
      "MetricsIntensity" : 0.053439671408694774,
      "Density" : 0.9947128532360985
    },
    "euclideanDistance" : 24.047848628937555,
    "generation" : 46,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638121546961326,
      "LackOfCohesion" : 0.5532082282117307,
      "MetricsIntensity" : 0.05343967140869478,
      "Density" : 3.162898550724638
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "3211dffb-429d-4735-94e1-22eb5184b70f",
    "objectives" : {
      "NumberOfConcerns" : 0.9996626180836707,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5553832063102139,
      "MetricsIntensity" : 0.05341112820014029,
      "Density" : 0.998359161349134
    },
    "euclideanDistance" : 24.04802174024946,
    "generation" : 36,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6370165745856355,
      "LackOfCohesion" : 0.5553832063102139,
      "MetricsIntensity" : 0.053411128200140295,
      "Density" : 3.1744927536231886
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "829f4711-b705-4a2f-bbd9-56fda056c4df",
    "objectives" : {
      "NumberOfConcerns" : 0.9983130904183536,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5547719282345313,
      "MetricsIntensity" : 0.05347618338232956,
      "Density" : 1.0010938924339106
    },
    "euclideanDistance" : 24.048065402491638,
    "generation" : 45,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6366150442477878,
      "LackOfCohesion" : 0.5547719282345313,
      "MetricsIntensity" : 0.05347618338232956,
      "Density" : 3.190586868099942
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "f40799d8-3bb9-44e8-bbbb-155a96d9ac4d",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5536537980238272,
      "MetricsIntensity" : 0.053375355050064306,
      "Density" : 1.0030993618960802
    },
    "euclideanDistance" : 24.048249222406707,
    "generation" : 42,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638873550524572,
      "LackOfCohesion" : 0.5536537980238272,
      "MetricsIntensity" : 0.05337535505006431,
      "Density" : 3.185871453387376
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "a8b19607-9d70-422e-a7c2-4659fb768199",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5543916632446028,
      "MetricsIntensity" : 0.05339158495695494,
      "Density" : 0.9910665451230629
    },
    "euclideanDistance" : 25.045833259395724,
    "generation" : 37,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6386740331491707,
      "LackOfCohesion" : 0.5543916632446028,
      "MetricsIntensity" : 0.053391584956954945,
      "Density" : 3.1513043478260885
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "1cb77ae4-2309-4124-b50b-4897d9ee1cbf",
    "objectives" : {
      "NumberOfConcerns" : 0.9989878542510121,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.553775765072627,
      "MetricsIntensity" : 0.05349110933470668,
      "Density" : 0.9938012762078395
    },
    "euclideanDistance" : 25.045860867742057,
    "generation" : 42,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6368159203980097,
      "LackOfCohesion" : 0.553775765072627,
      "MetricsIntensity" : 0.05349110933470668,
      "Density" : 3.16366802089379
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "99e43fe1-0e39-401e-a8cf-b8c431b35cfc",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5545582425454028,
      "MetricsIntensity" : 0.053390967810246596,
      "Density" : 0.9914311759343665
    },
    "euclideanDistance" : 25.04586485894169,
    "generation" : 44,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6383213694091665,
      "LackOfCohesion" : 0.5545582425454028,
      "MetricsIntensity" : 0.0533909678102466,
      "Density" : 3.1488129704690215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "9bfdf2e0-e2a0-400f-b954-02962387832d",
    "objectives" : {
      "NumberOfConcerns" : 0.9989878542510121,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5547078609000108,
      "MetricsIntensity" : 0.05347996210497308,
      "Density" : 0.9938012762078395
    },
    "euclideanDistance" : 25.045881470350057,
    "generation" : 44,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63681592039801,
      "LackOfCohesion" : 0.5547078609000108,
      "MetricsIntensity" : 0.05347996210497308,
      "Density" : 3.1636680208937897
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "4fc836e8-c4d2-40cc-8bf8-58f32ca6836c",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5530140327132179,
      "MetricsIntensity" : 0.05346632145840585,
      "Density" : 0.9947128532360985
    },
    "euclideanDistance" : 25.045920562604625,
    "generation" : 44,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6384742951907136,
      "LackOfCohesion" : 0.5530140327132179,
      "MetricsIntensity" : 0.05346632145840585,
      "Density" : 3.1647331786542927
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "cb6c16b5-be49-49df-ac93-ef6f5e550db5",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.553169609755846,
      "MetricsIntensity" : 0.053424082338634986,
      "Density" : 0.9945305378304466
    },
    "euclideanDistance" : 25.045943618146634,
    "generation" : 46,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6386740331491705,
      "LackOfCohesion" : 0.553169609755846,
      "MetricsIntensity" : 0.053424082338634986,
      "Density" : 3.1641531322505805
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "d84c2afd-3817-4668-bd35-9e983ee7eb87",
    "objectives" : {
      "NumberOfConcerns" : 0.9979757085020243,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5545785029254193,
      "MetricsIntensity" : 0.053502892286610135,
      "Density" : 1.0010938924339106
    },
    "euclideanDistance" : 25.046128730237307,
    "generation" : 10,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6369673491975651,
      "LackOfCohesion" : 0.5545785029254193,
      "MetricsIntensity" : 0.05350289228661013,
      "Density" : 3.1924418604651157
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "5870e2bb-58db-449d-b720-e148c01dc5ba",
    "objectives" : {
      "NumberOfConcerns" : 1.0003373819163293,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5538451967950693,
      "MetricsIntensity" : 0.05341109429892545,
      "Density" : 0.9907019143117594
    },
    "euclideanDistance" : 26.04403506386227,
    "generation" : 46,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638121546961326,
      "LackOfCohesion" : 0.5538451967950693,
      "MetricsIntensity" : 0.05341109429892545,
      "Density" : 3.151972157772622
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "b286f261-ccda-4246-937c-1fe4dcdc7346",
    "objectives" : {
      "NumberOfConcerns" : 0.9986504723346828,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.555489259892005,
      "MetricsIntensity" : 0.053457684122586564,
      "Density" : 0.9978122151321787
    },
    "euclideanDistance" : 26.04427687658861,
    "generation" : 44,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6362631288004417,
      "LackOfCohesion" : 0.555489259892005,
      "MetricsIntensity" : 0.053457684122586564,
      "Density" : 3.1745939675174006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "9ebb390f-9d2c-4b01-bb61-ecb860dee506",
    "objectives" : {
      "NumberOfConcerns" : 0.9989878542510121,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5547540940979389,
      "MetricsIntensity" : 0.05345143413970981,
      "Density" : 0.9979945305378305
    },
    "euclideanDistance" : 26.044281118446225,
    "generation" : 43,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6368159203980097,
      "LackOfCohesion" : 0.5547540940979389,
      "MetricsIntensity" : 0.05345143413970981,
      "Density" : 3.1751740139211138
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "680d5899-81be-4c11-925a-1cceacf6a583",
    "objectives" : {
      "NumberOfConcerns" : 1.0003373819163293,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5539504976955237,
      "MetricsIntensity" : 0.05340181892654437,
      "Density" : 0.9985414767547858
    },
    "euclideanDistance" : 26.044336675496663,
    "generation" : 41,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638121546961326,
      "LackOfCohesion" : 0.5539504976955237,
      "MetricsIntensity" : 0.05340181892654437,
      "Density" : 3.175072463768116
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "91ea3ede-d392-4624-a2a6-64b8d541ba29",
    "objectives" : {
      "NumberOfConcerns" : 0.9993252361673415,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5534383128206063,
      "MetricsIntensity" : 0.05343717015707817,
      "Density" : 0.9903372835004558
    },
    "euclideanDistance" : 27.042347685805392,
    "generation" : 45,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6373687119955778,
      "LackOfCohesion" : 0.5534383128206063,
      "MetricsIntensity" : 0.05343717015707817,
      "Density" : 3.152640742890308
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "e3e566d5-db03-468f-9f15-4c9d4009f71a",
    "objectives" : {
      "NumberOfConcerns" : 0.9996626180836707,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.55360562458035,
      "MetricsIntensity" : 0.05343652279300761,
      "Density" : 0.9907019143117594
    },
    "euclideanDistance" : 27.042376934776833,
    "generation" : 48,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6370165745856349,
      "LackOfCohesion" : 0.55360562458035,
      "MetricsIntensity" : 0.053436522793007604,
      "Density" : 3.150144927536232
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "6c9fd497-2d11-4262-b585-0251c71aaf7f",
    "objectives" : {
      "NumberOfConcerns" : 0.9979757085020243,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5540729332226418,
      "MetricsIntensity" : 0.0535176836774851,
      "Density" : 1.0007292616226071
    },
    "euclideanDistance" : 27.042693570123966,
    "generation" : 44,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6360619469026545,
      "LackOfCohesion" : 0.5540729332226418,
      "MetricsIntensity" : 0.05351768367748509,
      "Density" : 3.189424753050553
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "e6740033-c7a5-4f0b-a1d1-3d210893b0d6",
    "objectives" : {
      "NumberOfConcerns" : 0.9979757085020243,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5550056394598668,
      "MetricsIntensity" : 0.05350652914766652,
      "Density" : 1.0007292616226071
    },
    "euclideanDistance" : 27.042712674181217,
    "generation" : 43,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6360619469026547,
      "LackOfCohesion" : 0.5550056394598668,
      "MetricsIntensity" : 0.05350652914766652,
      "Density" : 3.1894247530505515
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "53825c61-6a0f-4467-a66a-02c8cb6d76fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9983130904183536,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.554210554895653,
      "MetricsIntensity" : 0.05346563513903901,
      "Density" : 1.001640838650866
    },
    "euclideanDistance" : 27.04274248868728,
    "generation" : 43,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6366150442477878,
      "LackOfCohesion" : 0.554210554895653,
      "MetricsIntensity" : 0.05346563513903901,
      "Density" : 3.190476190476191
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "14facef3-102d-449d-9e39-ab5265748b44",
    "objectives" : {
      "NumberOfConcerns" : 0.9993252361673415,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.554532156082421,
      "MetricsIntensity" : 0.053422730487334515,
      "Density" : 1.0018231540565177
    },
    "euclideanDistance" : 27.04279313347471,
    "generation" : 48,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63646408839779,
      "LackOfCohesion" : 0.554532156082421,
      "MetricsIntensity" : 0.05342273048733451,
      "Density" : 3.187354988399072
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "767cdb5a-117b-4b4a-8daf-791be54c9105",
    "objectives" : {
      "NumberOfConcerns" : 0.9996626180836707,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5531284757699318,
      "MetricsIntensity" : 0.05346217008858522,
      "Density" : 1.0021877848678213
    },
    "euclideanDistance" : 28.04126450466295,
    "generation" : 35,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6379215035931458,
      "LackOfCohesion" : 0.5531284757699318,
      "MetricsIntensity" : 0.05346217008858522,
      "Density" : 3.186666666666666
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "80132512-211e-443d-8b2c-2f2c35e6d477",
    "objectives" : {
      "NumberOfConcerns" : 0.9983130904183536,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5535431621850382,
      "MetricsIntensity" : 0.05348377362233999,
      "Density" : 0.9897903372835004
    },
    "euclideanDistance" : 29.039379891532175,
    "generation" : 46,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636615044247788,
      "LackOfCohesion" : 0.5535431621850382,
      "MetricsIntensity" : 0.05348377362233999,
      "Density" : 3.152729384436701
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "4d110534-bbaf-4951-a879-9a3050db7dfa",
    "objectives" : {
      "NumberOfConcerns" : 0.9986504723346828,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5537105148233128,
      "MetricsIntensity" : 0.053483095334951825,
      "Density" : 0.990154968094804
    },
    "euclideanDistance" : 29.03940711175849,
    "generation" : 46,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6362631288004421,
      "LackOfCohesion" : 0.5537105148233128,
      "MetricsIntensity" : 0.053483095334951825,
      "Density" : 3.1502320185614847
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "be6c6f83-5d29-47a3-8760-0017e457c8b1",
    "objectives" : {
      "NumberOfConcerns" : 0.9979757085020243,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5546240771043618,
      "MetricsIntensity" : 0.05349984606386481,
      "Density" : 0.9970829535095715
    },
    "euclideanDistance" : 29.039638428041286,
    "generation" : 40,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636061946902655,
      "LackOfCohesion" : 0.5546240771043618,
      "MetricsIntensity" : 0.05349984606386481,
      "Density" : 3.1759581881533108
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "ac28a280-d1c1-4f24-a0f7-294252469f94",
    "objectives" : {
      "NumberOfConcerns" : 0.997638326585695,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.553579849711006,
      "MetricsIntensity" : 0.05350602962305019,
      "Density" : 1.0012762078395625
    },
    "euclideanDistance" : 29.03975120107385,
    "generation" : 36,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636413945766464,
      "LackOfCohesion" : 0.553579849711006,
      "MetricsIntensity" : 0.05350602962305019,
      "Density" : 3.1911679256246357
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "d132a65d-e05e-41b8-b511-c45e730e61bd",
    "objectives" : {
      "NumberOfConcerns" : 0.9989878542510121,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5536718710935693,
      "MetricsIntensity" : 0.053467496062621044,
      "Density" : 0.9899726526891522
    },
    "euclideanDistance" : 30.038099705207536,
    "generation" : 40,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63681592039801,
      "LackOfCohesion" : 0.5536718710935693,
      "MetricsIntensity" : 0.05346749606262105,
      "Density" : 3.1514799767846777
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "49721362-7fe3-4998-bf2f-f7296d84e1e6",
    "objectives" : {
      "NumberOfConcerns" : 0.997638326585695,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5542772846482839,
      "MetricsIntensity" : 0.05349666808026795,
      "Density" : 1.0009115770282588
    },
    "euclideanDistance" : 30.03842857769818,
    "generation" : 42,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636413945766464,
      "LackOfCohesion" : 0.5542772846482839,
      "MetricsIntensity" : 0.053496668080267956,
      "Density" : 3.19186046511628
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "d1bf7fd3-37ab-48b3-9e57-fd2fcbaf3406",
    "objectives" : {
      "NumberOfConcerns" : 0.9973009446693657,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5538403726451855,
      "MetricsIntensity" : 0.05351036057234672,
      "Density" : 1.0005469462169554
    },
    "euclideanDistance" : 31.037160080827032,
    "generation" : 44,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6358605423353625,
      "LackOfCohesion" : 0.5538403726451855,
      "MetricsIntensity" : 0.05351036057234672,
      "Density" : 3.1906976744186055
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "252869ee-c889-4101-869a-e19e9e50be87",
    "objectives" : {
      "NumberOfConcerns" : 0.9989878542510121,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5531944531919285,
      "MetricsIntensity" : 0.05349318043780914,
      "Density" : 1.0014585232452142
    },
    "euclideanDistance" : 31.037232182173028,
    "generation" : 43,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6377212389380533,
      "LackOfCohesion" : 0.5531944531919285,
      "MetricsIntensity" : 0.05349318043780913,
      "Density" : 3.188044109112014
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "d6e85434-0bd7-4d8c-b871-494bd046738a",
    "objectives" : {
      "NumberOfConcerns" : 0.9979757085020243,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5537768734103737,
      "MetricsIntensity" : 0.05351411938767696,
      "Density" : 0.9894257064721969
    },
    "euclideanDistance" : 32.035674666376025,
    "generation" : 24,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6360619469026552,
      "LackOfCohesion" : 0.5537768734103737,
      "MetricsIntensity" : 0.05351411938767696,
      "Density" : 3.1515679442508713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "f96ee535-bd6f-4a4f-bfca-e7b2293c4e0c",
    "objectives" : {
      "NumberOfConcerns" : 0.9969635627530364,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5536462096436815,
      "MetricsIntensity" : 0.05353710940193505,
      "Density" : 1.0005469462169554
    },
    "euclideanDistance" : 32.035986341684215,
    "generation" : 44,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6362126245847177,
      "LackOfCohesion" : 0.5536462096436815,
      "MetricsIntensity" : 0.05353710940193505,
      "Density" : 3.1925538103548567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "cd75c179-d64c-43ca-bbb1-18d6537f74b4",
    "objectives" : {
      "NumberOfConcerns" : 0.9979757085020243,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5539689712056152,
      "MetricsIntensity" : 0.05349405494156705,
      "Density" : 1.0007292616226071
    },
    "euclideanDistance" : 32.03602905799657,
    "generation" : 44,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6360619469026552,
      "LackOfCohesion" : 0.5539689712056152,
      "MetricsIntensity" : 0.05349405494156705,
      "Density" : 3.1894247530505515
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "ad1e3233-b58f-47d5-a06b-1116b25ba979",
    "objectives" : {
      "NumberOfConcerns" : 0.997638326585695,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5535827960338806,
      "MetricsIntensity" : 0.05354085315172514,
      "Density" : 0.9894257064721969
    },
    "euclideanDistance" : 33.03458136550729,
    "generation" : 46,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636413945766464,
      "LackOfCohesion" : 0.5535827960338806,
      "MetricsIntensity" : 0.05354085315172514,
      "Density" : 3.153399186519466
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "4832b856-ce64-45ac-9406-b134089ba6a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9983130904183536,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5546868283585268,
      "MetricsIntensity" : 0.05347554398577744,
      "Density" : 0.9974475843208751
    },
    "euclideanDistance" : 34.033837101057635,
    "generation" : 37,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6357103372028747,
      "LackOfCohesion" : 0.5546868283585268,
      "MetricsIntensity" : 0.053475543985777446,
      "Density" : 3.1734338747099757
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "f5e82d5e-d12c-4921-b4e9-f6e8fd667696",
    "objectives" : {
      "NumberOfConcerns" : 0.9969635627530364,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5540742370233557,
      "MetricsIntensity" : 0.05354072622350631,
      "Density" : 1.0001823154056517
    },
    "euclideanDistance" : 34.03386792415762,
    "generation" : 18,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042617,
      "LackOfCohesion" : 0.5540742370233557,
      "MetricsIntensity" : 0.053540726223506314,
      "Density" : 3.18953488372093
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "e397ea1d-56b0-467d-b463-e108891b834d",
    "objectives" : {
      "NumberOfConcerns" : 0.9969635627530364,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5539283071367899,
      "MetricsIntensity" : 0.05353223846353749,
      "Density" : 0.9969006381039198
    },
    "euclideanDistance" : 35.03280533296915,
    "generation" : 42,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.635307138904261,
      "LackOfCohesion" : 0.5539283071367899,
      "MetricsIntensity" : 0.05353223846353749,
      "Density" : 3.175377468060394
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "831fcf70-a318-4e28-9347-2984147740ea",
    "objectives" : {
      "NumberOfConcerns" : 0.9966261808367072,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5538802273755423,
      "MetricsIntensity" : 0.05356749496499703,
      "Density" : 1.0001823154056517
    },
    "euclideanDistance" : 35.03288856476402,
    "generation" : 41,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6356589147286822,
      "LackOfCohesion" : 0.5538802273755423,
      "MetricsIntensity" : 0.05356749496499703,
      "Density" : 3.191390343222804
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "f88f52d2-6bc7-4821-9686-2f08b6827245",
    "objectives" : {
      "NumberOfConcerns" : 0.9969635627530364,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5546257420740675,
      "MetricsIntensity" : 0.05352287692075523,
      "Density" : 0.9965360072926163
    },
    "euclideanDistance" : 36.03189552010015,
    "generation" : 42,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042624,
      "LackOfCohesion" : 0.5546257420740675,
      "MetricsIntensity" : 0.053522876920755226,
      "Density" : 3.1760604299825674
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "96a8f295-c074-4b93-a950-be26a544ffe7",
    "objectives" : {
      "NumberOfConcerns" : 0.9973009446693657,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5538896127599566,
      "MetricsIntensity" : 0.05351661874655099,
      "Density" : 0.996718322698268
    },
    "euclideanDistance" : 36.03189856669568,
    "generation" : 48,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6358605423353625,
      "LackOfCohesion" : 0.5538896127599566,
      "MetricsIntensity" : 0.05351661874655098,
      "Density" : 3.176641487507264
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "1dd0a757-fa00-4398-bb97-91d48575c9ce",
    "objectives" : {
      "NumberOfConcerns" : 0.997638326585695,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5540568481107807,
      "MetricsIntensity" : 0.05351591850538965,
      "Density" : 0.9970829535095715
    },
    "euclideanDistance" : 36.031920564845336,
    "generation" : 37,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.635508849557522,
      "LackOfCohesion" : 0.5540568481107807,
      "MetricsIntensity" : 0.05351591850538965,
      "Density" : 3.174114915844458
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "0e7b9442-f176-4bdd-a851-a38599fcd7d3",
    "objectives" : {
      "NumberOfConcerns" : 0.997638326585695,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5547538263126705,
      "MetricsIntensity" : 0.053506563093283735,
      "Density" : 0.996718322698268
    },
    "euclideanDistance" : 37.03105918557526,
    "generation" : 41,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575223,
      "LackOfCohesion" : 0.5547538263126705,
      "MetricsIntensity" : 0.053506563093283735,
      "Density" : 3.1747967479674792
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "b64dd406-3e43-4f87-b296-3725c6e34c80",
    "objectives" : {
      "NumberOfConcerns" : 0.9962887989203779,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5539948955661378,
      "MetricsIntensity" : 0.05356333542854723,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 38.0301818054738,
    "generation" : 14,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6351052048726473,
      "LackOfCohesion" : 0.5539948955661378,
      "MetricsIntensity" : 0.05356333542854723,
      "Density" : 3.176744186046511
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "1eb17f6a-5942-4d81-b94b-894b11afa84c",
    "objectives" : {
      "NumberOfConcerns" : 0.9966261808367072,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5541621715149598,
      "MetricsIntensity" : 0.05356260411469708,
      "Density" : 0.9965360072926163
    },
    "euclideanDistance" : 38.03020263452533,
    "generation" : 43,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731594,
      "LackOfCohesion" : 0.5541621715149598,
      "MetricsIntensity" : 0.05356260411469708,
      "Density" : 3.1742160278745644
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "d63aa567-977d-41ba-bdfd-0a99b454e977",
    "objectives" : {
      "NumberOfConcerns" : 0.9966261808367072,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5548596064522376,
      "MetricsIntensity" : 0.0535532425719148,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 39.029429387172854,
    "generation" : 43,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731592,
      "LackOfCohesion" : 0.5548596064522376,
      "MetricsIntensity" : 0.053553242571914794,
      "Density" : 3.1748983149331775
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "88c9a218-2d6b-4681-83c2-ee14dcfba06d",
    "objectives" : {
      "NumberOfConcerns" : 0.9966261808367072,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5548596064522375,
      "MetricsIntensity" : 0.05355324257191481,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 39.029429387172854,
    "generation" : 35,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731596,
      "LackOfCohesion" : 0.5548596064522375,
      "MetricsIntensity" : 0.05355324257191481,
      "Density" : 3.1748983149331784
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "158d0cee-8421-43b4-a5dd-ff010e2bf6bf",
    "objectives" : {
      "NumberOfConcerns" : 0.9959514170040485,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5542289132979986,
      "MetricsIntensity" : 0.053593720991609216,
      "Density" : 0.9958067456700092
    },
    "euclideanDistance" : 41.027961103069934,
    "generation" : 17,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6345514950166111,
      "LackOfCohesion" : 0.5542289132979986,
      "MetricsIntensity" : 0.05359372099160922,
      "Density" : 3.1755813953488374
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "1f93a3c2-3425-41fa-b1bc-f94ab9930b48",
    "objectives" : {
      "NumberOfConcerns" : 0.997638326585695,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5551674837995365,
      "MetricsIntensity" : 0.05348332812652544,
      "Density" : 0.9976298997265269
    },
    "euclideanDistance" : 44.02614699299675,
    "generation" : 10,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575216,
      "LackOfCohesion" : 0.5551674837995365,
      "MetricsIntensity" : 0.05348332812652544,
      "Density" : 3.1795467751307376
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "fedb68d1-1a54-486c-8876-ab384086594e",
    "objectives" : {
      "NumberOfConcerns" : 0.9973009446693657,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5549743177011491,
      "MetricsIntensity" : 0.053510041712814,
      "Density" : 0.9976298997265269
    },
    "euclideanDistance" : 45.025556458626234,
    "generation" : 27,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6358605423353627,
      "LackOfCohesion" : 0.5549743177011491,
      "MetricsIntensity" : 0.053510041712814,
      "Density" : 3.18139534883721
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "ae9f0587-0c48-477b-b739-a1974e3ac153",
    "objectives" : {
      "NumberOfConcerns" : 0.9966261808367072,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5552735350121619,
      "MetricsIntensity" : 0.05352999237909705,
      "Density" : 0.9970829535095715
    },
    "euclideanDistance" : 46.02497835218695,
    "generation" : 50,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731594,
      "LackOfCohesion" : 0.5552735350121619,
      "MetricsIntensity" : 0.05352999237909705,
      "Density" : 3.179651162790697
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "5abea940-cd08-486f-9a3e-366c07c766ed",
    "objectives" : {
      "NumberOfConcerns" : 0.9969635627530364,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5545374056980514,
      "MetricsIntensity" : 0.0535237342048928,
      "Density" : 0.9972652689152234
    },
    "euclideanDistance" : 46.024980726628044,
    "generation" : 19,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042613,
      "LackOfCohesion" : 0.5545374056980514,
      "MetricsIntensity" : 0.0535237342048928,
      "Density" : 3.1802325581395348
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "5d4f72a9-bf0d-434d-b8ee-96f735fc63fe",
    "objectives" : {
      "NumberOfConcerns" : 0.9962887989203779,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5550803117892589,
      "MetricsIntensity" : 0.053556754082001286,
      "Density" : 0.9970829535095715
    },
    "euclideanDistance" : 47.024437777239584,
    "generation" : 35,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.635105204872647,
      "LackOfCohesion" : 0.5550803117892589,
      "MetricsIntensity" : 0.05355675408200129,
      "Density" : 3.181500872600349
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "03ee17c9-17b5-43d6-af17-e0634a19e32d",
    "objectives" : {
      "NumberOfConcerns" : 0.9973009446693657,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5554011950248722,
      "MetricsIntensity" : 0.053513673891862394,
      "Density" : 0.9972652689152234
    },
    "euclideanDistance" : 47.024466837929715,
    "generation" : 23,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349557522123896,
      "LackOfCohesion" : 0.5554011950248722,
      "MetricsIntensity" : 0.053513673891862394,
      "Density" : 3.1783846600813472
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "c2e6eaf5-4cec-41d6-9dbe-e6cfd89ecabe",
    "objectives" : {
      "NumberOfConcerns" : 0.9959514170040485,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5546431132864867,
      "MetricsIntensity" : 0.0535704555527634,
      "Density" : 0.996718322698268
    },
    "euclideanDistance" : 48.02390931001619,
    "generation" : 38,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6345514950166113,
      "LackOfCohesion" : 0.5546431132864867,
      "MetricsIntensity" : 0.0535704555527634,
      "Density" : 3.180337405468295
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "2629159f-190a-4fd5-9404-d657fa5de6dd",
    "objectives" : {
      "NumberOfConcerns" : 0.9956140350877193,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5544493496141426,
      "MetricsIntensity" : 0.053597261366479014,
      "Density" : 0.996718322698268
    },
    "euclideanDistance" : 49.023412584900484,
    "generation" : 42,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349030470914125,
      "LackOfCohesion" : 0.5544493496141426,
      "MetricsIntensity" : 0.05359726136647901,
      "Density" : 3.182188591385331
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "1a9dc8ef-66aa-4b16-99cc-762324f5b553",
    "objectives" : {
      "NumberOfConcerns" : 0.9956140350877193,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5544493496141427,
      "MetricsIntensity" : 0.05359726136647901,
      "Density" : 0.996718322698268
    },
    "euclideanDistance" : 49.023412584900484,
    "generation" : 41,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349030470914125,
      "LackOfCohesion" : 0.5544493496141427,
      "MetricsIntensity" : 0.053597261366479,
      "Density" : 3.1821885913853305
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "1f67ee02-508b-4f90-9592-531789d0a2aa",
    "objectives" : {
      "NumberOfConcerns" : 0.9962887989203779,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5555073993903318,
      "MetricsIntensity" : 0.053560358030256626,
      "Density" : 0.996718322698268
    },
    "euclideanDistance" : 49.023438230793104,
    "generation" : 49,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6342003320420582,
      "LackOfCohesion" : 0.5555073993903318,
      "MetricsIntensity" : 0.053560358030256626,
      "Density" : 3.1784883720930233
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "496f2cc0-a71f-488a-b16b-180ce86e1427",
    "objectives" : {
      "NumberOfConcerns" : 0.9966261808367072,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.554771270076221,
      "MetricsIntensity" : 0.05355409985605238,
      "Density" : 0.9969006381039198
    },
    "euclideanDistance" : 49.02344045281088,
    "generation" : 24,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731598,
      "LackOfCohesion" : 0.554771270076221,
      "MetricsIntensity" : 0.05355409985605239,
      "Density" : 3.179069767441861
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "4765a8a1-efae-4212-836a-fd1af22e9970",
    "objectives" : {
      "NumberOfConcerns" : 0.9956140350877193,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5548771310183472,
      "MetricsIntensity" : 0.05360084111582536,
      "Density" : 0.9963536918869644
    },
    "euclideanDistance" : 51.02249238979703,
    "generation" : 20,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6339977851605751,
      "LackOfCohesion" : 0.5548771310183472,
      "MetricsIntensity" : 0.05360084111582536,
      "Density" : 3.1791739383362425
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "8c0881ed-90d4-4475-a3e0-6033655c3790",
    "objectives" : {
      "NumberOfConcerns" : 0.99527665317139,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5546835209009454,
      "MetricsIntensity" : 0.053627666867574475,
      "Density" : 0.9963536918869644
    },
    "euclideanDistance" : 52.02205153615818,
    "generation" : 12,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6343490304709134,
      "LackOfCohesion" : 0.5546835209009454,
      "MetricsIntensity" : 0.05362766686757448,
      "Density" : 3.181024447031431
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "e6e94941-9d1c-4550-9a07-bb69f4fe7e47",
    "objectives" : {
      "NumberOfConcerns" : 0.9956140350877193,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.5554289977117155,
      "MetricsIntensity" : 0.05358298010861346,
      "Density" : 1.0001823154056517
    },
    "euclideanDistance" : 53.02172181736623,
    "generation" : 10,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6339977851605756,
      "LackOfCohesion" : 0.5554289977117155,
      "MetricsIntensity" : 0.05358298010861346,
      "Density" : 3.1895348837209307
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "8b676445-9c66-4203-a063-cc2c29e9502c",
    "objectives" : {
      "NumberOfConcerns" : 0.9949392712550608,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5547982643331361,
      "MetricsIntensity" : 0.05362350460177003,
      "Density" : 0.9998176845943483
    },
    "euclideanDistance" : 55.02090708221981,
    "generation" : 11,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6337950138504156,
      "LackOfCohesion" : 0.5547982643331361,
      "MetricsIntensity" : 0.05362350460177004,
      "Density" : 3.19022687609075
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "251ede0c-fc80-4545-b243-8893baaebc4d",
    "objectives" : {
      "NumberOfConcerns" : 0.9949392712550608,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.554798264333136,
      "MetricsIntensity" : 0.053623504601770074,
      "Density" : 0.9998176845943483
    },
    "euclideanDistance" : 55.02090708221981,
    "generation" : 38,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6337950138504156,
      "LackOfCohesion" : 0.554798264333136,
      "MetricsIntensity" : 0.053623504601770074,
      "Density" : 3.1902268760907506
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "a7d20c35-0ff9-4a6b-ac8a-e521e9a88216",
    "objectives" : {
      "NumberOfConcerns" : 0.99527665317139,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5556630154435759,
      "MetricsIntensity" : 0.05361336567167544,
      "Density" : 0.9998176845943483
    },
    "euclideanDistance" : 56.020548433574675,
    "generation" : 16,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6334440753045403,
      "LackOfCohesion" : 0.5556630154435759,
      "MetricsIntensity" : 0.05361336567167544,
      "Density" : 3.1883720930232564
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    } ]
  }, {
    "solutionId" : "4ca28185-ecce-4df0-8922-7c13e7974280",
    "objectives" : {
      "NumberOfConcerns" : 0.9946018893387314,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.555032435619939,
      "MetricsIntensity" : 0.05365391010286553,
      "Density" : 0.9994530537830447
    },
    "euclideanDistance" : 58.019816261960464,
    "generation" : 17,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332409972299171,
      "LackOfCohesion" : 0.555032435619939,
      "MetricsIntensity" : 0.053653910102865535,
      "Density" : 3.189063408958698
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "445f7ea4-c28f-4aba-a596-601576642c2a",
    "objectives" : {
      "NumberOfConcerns" : 0.9946018893387314,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5550324356199389,
      "MetricsIntensity" : 0.05365391010286554,
      "Density" : 0.9994530537830447
    },
    "euclideanDistance" : 58.019816261960464,
    "generation" : 42,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633240997229917,
      "LackOfCohesion" : 0.5550324356199389,
      "MetricsIntensity" : 0.05365391010286555,
      "Density" : 3.1890634089586976
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.MvcMatchersIgnoreCsrfProtectionRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.session.SessionDestroyedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.oauth2.client.registration.ClientRegistration.ProviderDetails.UserInfoEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils.Argon2Hash'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.core.converter.ObjectToURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.access.channel.ChannelProcessingFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadInterceptorRSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlLogoutResponseValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.config.annotation.web.configurers.LogoutConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent'"
      } ]
    } ]
  } ]
}