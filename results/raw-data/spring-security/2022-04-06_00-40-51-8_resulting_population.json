{
  "executionId" : "b5130bbc-de25-4072-b838-3e8c83e78f50",
  "computingTime" : 741336,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2359813084112146,
    "meanNumConcerns" : 1.6459833795013852,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "03c394d7-445d-48c0-8d19-86c180384d75",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5532719074140401,
      "MetricsIntensity" : 0.05336137096832135,
      "Density" : 0.998014440433213
    },
    "euclideanDistance" : 10.114726124392758,
    "generation" : 9,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436464088397793,
      "LackOfCohesion" : 0.5532719074140401,
      "MetricsIntensity" : 0.05336137096832135,
      "Density" : 3.2239067055393584
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "a8d4b284-124b-4f81-ba87-a26918d12632",
    "objectives" : {
      "NumberOfConcerns" : 1.002019522046449,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5529511414614819,
      "MetricsIntensity" : 0.05332210691736453,
      "Density" : 0.998014440433213
    },
    "euclideanDistance" : 10.11477504237267,
    "generation" : 31,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6438431805632252,
      "LackOfCohesion" : 0.5529511414614819,
      "MetricsIntensity" : 0.053322106917364526,
      "Density" : 3.222027972027972
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "7189e6a0-91fa-4989-a0b3-b453a9ea2697",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5530369668586285,
      "MetricsIntensity" : 0.05336140486953622,
      "Density" : 0.9983754512635379
    },
    "euclideanDistance" : 10.11478223049193,
    "generation" : 22,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644198895027624,
      "LackOfCohesion" : 0.5530369668586285,
      "MetricsIntensity" : 0.05336140486953622,
      "Density" : 3.2250728862973763
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "d3d147b3-df86-405a-b0e9-28435c52b117",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.554146675230545,
      "MetricsIntensity" : 0.053250742715209375,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 10.11482456751148,
    "generation" : 22,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432909994478193,
      "LackOfCohesion" : 0.554146675230545,
      "MetricsIntensity" : 0.05325074271520938,
      "Density" : 3.2226107226107215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "fa1e612d-8d07-4008-b4a4-30b68c5f1bed",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5538255474217727,
      "MetricsIntensity" : 0.053211576569088634,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 10.114873460806788,
    "generation" : 37,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434878587196469,
      "LackOfCohesion" : 0.5538255474217727,
      "MetricsIntensity" : 0.053211576569088634,
      "Density" : 3.220733838089691
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "80652dba-7bff-4737-89e5-643141aa7a62",
    "objectives" : {
      "NumberOfConcerns" : 1.002019522046449,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5539118882310521,
      "MetricsIntensity" : 0.053250776594266566,
      "Density" : 0.9985559566787003
    },
    "euclideanDistance" : 10.114880678797565,
    "generation" : 29,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643843180563225,
      "LackOfCohesion" : 0.5539118882310521,
      "MetricsIntensity" : 0.053250776594266566,
      "Density" : 3.223776223776224
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "969882b3-c469-450f-bf10-a8c9d643c789",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5534207056995325,
      "MetricsIntensity" : 0.05329660986158368,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 10.114923029042554,
    "generation" : 22,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443953616786309,
      "LackOfCohesion" : 0.5534207056995325,
      "MetricsIntensity" : 0.053296609861583674,
      "Density" : 3.224941724941725
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "a88cfbb5-35ee-403c-8d8f-8a48612755cb",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5545294385997229,
      "MetricsIntensity" : 0.05318606231023674,
      "Density" : 0.9987364620938628
    },
    "euclideanDistance" : 10.114965345742506,
    "generation" : 12,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643487858719647,
      "LackOfCohesion" : 0.5545294385997229,
      "MetricsIntensity" : 0.05318606231023674,
      "Density" : 3.2224810716365755
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "e2a57c9b-f29a-41ba-a951-b33646413689",
    "objectives" : {
      "NumberOfConcerns" : 1.002692696061932,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5542948049555528,
      "MetricsIntensity" : 0.053186096167165235,
      "Density" : 0.9990974729241877
    },
    "euclideanDistance" : 10.115021497493995,
    "generation" : 20,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6440397350993379,
      "LackOfCohesion" : 0.5542948049555528,
      "MetricsIntensity" : 0.053186096167165235,
      "Density" : 3.223645894001164
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "25174d34-f21e-4292-a5c1-a8676a7bb41c",
    "objectives" : {
      "NumberOfConcerns" : 1.003365870077415,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5546779601568286,
      "MetricsIntensity" : 0.053122100243630024,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 10.115091090753047,
    "generation" : 28,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6433296582138917,
      "LackOfCohesion" : 0.5546779601568286,
      "MetricsIntensity" : 0.053122100243630024,
      "Density" : 3.221187427240978
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "ae341dab-1f77-4b57-8846-62cd1ed717e9",
    "objectives" : {
      "NumberOfConcerns" : 1.0037024570851565,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5532285768409171,
      "MetricsIntensity" : 0.053223547054569845,
      "Density" : 0.9994584837545126
    },
    "euclideanDistance" : 10.115099133834633,
    "generation" : 32,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6447876447876448,
      "LackOfCohesion" : 0.5532285768409171,
      "MetricsIntensity" : 0.053223547054569845,
      "Density" : 3.2229336437718277
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "01a1f1bc-4414-4dc3-97ba-a457c9d052d0",
    "objectives" : {
      "NumberOfConcerns" : 1.0037024570851565,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5543359885819802,
      "MetricsIntensity" : 0.05311319138705184,
      "Density" : 0.9992779783393502
    },
    "euclideanDistance" : 10.115141348477994,
    "generation" : 9,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6438809261300988,
      "LackOfCohesion" : 0.5543359885819802,
      "MetricsIntensity" : 0.053113191387051846,
      "Density" : 3.220477021524142
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "94f6b66d-6a85-4678-a5a6-ad14c1790088",
    "objectives" : {
      "NumberOfConcerns" : 1.004039044092898,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.553698905508498,
      "MetricsIntensity" : 0.05319863339276516,
      "Density" : 0.9996389891696751
    },
    "euclideanDistance" : 10.115175978859059,
    "generation" : 33,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6444321940463067,
      "LackOfCohesion" : 0.553698905508498,
      "MetricsIntensity" : 0.053198633392765156,
      "Density" : 3.223515715948777
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "1ef9b2d2-34bc-4d15-98b9-cc262c93efda",
    "objectives" : {
      "NumberOfConcerns" : 1.004039044092898,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5541016610482397,
      "MetricsIntensity" : 0.0531132251998095,
      "Density" : 0.9996389891696751
    },
    "euclideanDistance" : 10.115197584634652,
    "generation" : 31,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6444321940463067,
      "LackOfCohesion" : 0.5541016610482397,
      "MetricsIntensity" : 0.05311322519980951,
      "Density" : 3.221640488656196
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "85a08193-ce75-4d3f-97c6-47a19053c9f1",
    "objectives" : {
      "NumberOfConcerns" : 1.004039044092898,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.554805288735605,
      "MetricsIntensity" : 0.053088365906035495,
      "Density" : 0.9994584837545126
    },
    "euclideanDistance" : 10.115218185774117,
    "generation" : 27,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6435261707988973,
      "LackOfCohesion" : 0.554805288735605,
      "MetricsIntensity" : 0.053088365906035495,
      "Density" : 3.2210587550901684
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "5f501d03-be66-43c2-ae85-4652a517c548",
    "objectives" : {
      "NumberOfConcerns" : 1.004039044092898,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.554805288735605,
      "MetricsIntensity" : 0.053088365906035495,
      "Density" : 0.9994584837545126
    },
    "euclideanDistance" : 10.115218185774117,
    "generation" : 37,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6435261707988977,
      "LackOfCohesion" : 0.554805288735605,
      "MetricsIntensity" : 0.0530883659060355,
      "Density" : 3.2210587550901684
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "1c0cbd6a-60a8-4746-beea-3285b339de5e",
    "objectives" : {
      "NumberOfConcerns" : 1.0043756311006395,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5545711139577535,
      "MetricsIntensity" : 0.053088399696750936,
      "Density" : 0.9998194945848375
    },
    "euclideanDistance" : 10.115274436648736,
    "generation" : 37,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644077134986226,
      "LackOfCohesion" : 0.5545711139577535,
      "MetricsIntensity" : 0.05308839969675094,
      "Density" : 3.2222222222222228
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "a23dce43-215d-4345-aca0-d2d009b8e345",
    "objectives" : {
      "NumberOfConcerns" : 1.0043756311006395,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5545711139577534,
      "MetricsIntensity" : 0.05308839969675095,
      "Density" : 0.9998194945848375
    },
    "euclideanDistance" : 10.115274436648736,
    "generation" : 27,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644077134986226,
      "LackOfCohesion" : 0.5545711139577534,
      "MetricsIntensity" : 0.05308839969675095,
      "Density" : 3.2222222222222228
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "f1cd36b6-0d83-4525-ac20-f5806a7d0286",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5528426592780786,
      "MetricsIntensity" : 0.05338800369769027,
      "Density" : 0.9978339350180505
    },
    "euclideanDistance" : 11.104301177828539,
    "generation" : 4,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434494195688227,
      "LackOfCohesion" : 0.5528426592780786,
      "MetricsIntensity" : 0.05338800369769028,
      "Density" : 3.2252042007001163
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "5f3b62db-00d8-48d3-a651-5e355bf1793b",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5534217875099633,
      "MetricsIntensity" : 0.05335608237880583,
      "Density" : 0.997653429602888
    },
    "euclideanDistance" : 11.104343990244526,
    "generation" : 2,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6430939226519337,
      "LackOfCohesion" : 0.5534217875099633,
      "MetricsIntensity" : 0.053356082378805826,
      "Density" : 3.2227405247813414
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "9b579117-252b-40e4-ab05-d29f5ec72c9d",
    "objectives" : {
      "NumberOfConcerns" : 1.0030292830696734,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5552759162342367,
      "MetricsIntensity" : 0.053122100243630024,
      "Density" : 0.9990974729241877
    },
    "euclideanDistance" : 11.104747489420138,
    "generation" : 34,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642778390297684,
      "LackOfCohesion" : 0.5552759162342367,
      "MetricsIntensity" : 0.05312210024363003,
      "Density" : 3.2217694994179276
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "ad6cae97-dc4f-4d9a-96ae-d019810f4fa2",
    "objectives" : {
      "NumberOfConcerns" : 1.003365870077415,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5543784408749217,
      "MetricsIntensity" : 0.053114733685170105,
      "Density" : 0.9992779783393502
    },
    "euclideanDistance" : 11.104749262269344,
    "generation" : 22,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6433296582138919,
      "LackOfCohesion" : 0.5543784408749217,
      "MetricsIntensity" : 0.05311473368517011,
      "Density" : 3.222351571594878
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "38d4f5c2-bb03-4b31-8c90-4feb03af19d8",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5528486560445465,
      "MetricsIntensity" : 0.053395394361380744,
      "Density" : 0.9972924187725631
    },
    "euclideanDistance" : 12.095581212706172,
    "generation" : 6,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642343836373687,
      "LackOfCohesion" : 0.5528486560445465,
      "MetricsIntensity" : 0.05339539436138074,
      "Density" : 3.2234539089848315
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "5d2cf45d-60cf-40ed-92b8-ba1a9707431c",
    "objectives" : {
      "NumberOfConcerns" : 1.0003365870077414,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.553724272794463,
      "MetricsIntensity" : 0.053284671502875566,
      "Density" : 0.9974729241877256
    },
    "euclideanDistance" : 12.095663493512573,
    "generation" : 8,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641988950276243,
      "LackOfCohesion" : 0.553724272794463,
      "MetricsIntensity" : 0.053284671502875566,
      "Density" : 3.2221574344023316
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "978f9ee4-2c67-4435-96cd-64cdfef7bb76",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5539604126913413,
      "MetricsIntensity" : 0.05325970291919101,
      "Density" : 0.998014440433213
    },
    "euclideanDistance" : 12.095774555594247,
    "generation" : 23,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642186637217007,
      "LackOfCohesion" : 0.5539604126913413,
      "MetricsIntensity" : 0.053259702919191,
      "Density" : 3.2239067055393584
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "fc72397a-3b01-49f4-bc4f-2c4d39ee2339",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.552677241647245,
      "MetricsIntensity" : 0.05329132472866259,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 12.095786619769347,
    "generation" : 38,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643290999447819,
      "LackOfCohesion" : 0.552677241647245,
      "MetricsIntensity" : 0.05329132472866259,
      "Density" : 3.2226107226107215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "ac109b3e-f304-4e6a-9799-572bb1665b51",
    "objectives" : {
      "NumberOfConcerns" : 1.002692696061932,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5536800563883496,
      "MetricsIntensity" : 0.053146997783899703,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 12.095975114017433,
    "generation" : 33,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6431329288472145,
      "LackOfCohesion" : 0.5536800563883496,
      "MetricsIntensity" : 0.053146997783899703,
      "Density" : 3.221187427240978
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "ece63a12-e93c-43df-8622-c3c5b6e781aa",
    "objectives" : {
      "NumberOfConcerns" : 1.0030292830696734,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.554150090548724,
      "MetricsIntensity" : 0.0531221340563877,
      "Density" : 0.9990974729241877
    },
    "euclideanDistance" : 12.096039342986638,
    "generation" : 33,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6427783902976842,
      "LackOfCohesion" : 0.554150090548724,
      "MetricsIntensity" : 0.0531221340563877,
      "Density" : 3.221769499417928
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "dc8a90f1-0bc2-4cb0-a094-2ae95eefec17",
    "objectives" : {
      "NumberOfConcerns" : 1.0030292830696734,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.554150090548724,
      "MetricsIntensity" : 0.0531221340563877,
      "Density" : 0.9990974729241877
    },
    "euclideanDistance" : 12.096039342986638,
    "generation" : 32,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6427783902976842,
      "LackOfCohesion" : 0.554150090548724,
      "MetricsIntensity" : 0.053122134056387695,
      "Density" : 3.2217694994179276
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "464f667a-9bca-497d-8c2e-0ef5e06da83c",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5524188496246917,
      "MetricsIntensity" : 0.05342206681316115,
      "Density" : 0.9971119133574007
    },
    "euclideanDistance" : 13.08819723168683,
    "generation" : 12,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642146017699115,
      "LackOfCohesion" : 0.5524188496246917,
      "MetricsIntensity" : 0.05342206681316115,
      "Density" : 3.224751897256275
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "7595d236-ad55-49fe-9b1e-57036e2423cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5529986342295379,
      "MetricsIntensity" : 0.0533901023107464,
      "Density" : 0.9969314079422382
    },
    "euclideanDistance" : 13.08823353871337,
    "generation" : 7,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6417910447761193,
      "LackOfCohesion" : 0.5529986342295379,
      "MetricsIntensity" : 0.053390102310746396,
      "Density" : 3.222287047841307
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "20905193-cec9-48f2-bf6e-9dab8702a2b1",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5532953207091431,
      "MetricsIntensity" : 0.05331125403625923,
      "Density" : 0.9972924187725631
    },
    "euclideanDistance" : 13.088273259278402,
    "generation" : 21,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641791044776119,
      "LackOfCohesion" : 0.5532953207091431,
      "MetricsIntensity" : 0.05331125403625922,
      "Density" : 3.2234539089848315
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "e9f59ab0-bc6c-47cc-8aef-3b942b6d943f",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.554727615667593,
      "MetricsIntensity" : 0.05318970112393049,
      "Density" : 0.9978339350180505
    },
    "euclideanDistance" : 13.088477565226114,
    "generation" : 29,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412803532008826,
      "LackOfCohesion" : 0.554727615667593,
      "MetricsIntensity" : 0.05318970112393049,
      "Density" : 3.221445221445221
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "67677852-4a57-4af9-af67-b760f012465b",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5543851973630585,
      "MetricsIntensity" : 0.05318078062939465,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 13.088516294871463,
    "generation" : 30,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6418322295805738,
      "LackOfCohesion" : 0.5543851973630585,
      "MetricsIntensity" : 0.05318078062939466,
      "Density" : 3.220733838089691
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b75abbff-e002-462f-bc0e-d0c9bae2fb4e",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.554855078059455,
      "MetricsIntensity" : 0.05315587862082977,
      "Density" : 0.9983754512635379
    },
    "euclideanDistance" : 13.088575627206872,
    "generation" : 33,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6414782129067846,
      "LackOfCohesion" : 0.554855078059455,
      "MetricsIntensity" : 0.05315587862082977,
      "Density" : 3.221316249271986
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "77614034-7084-46fd-b054-9c26643b8b23",
    "objectives" : {
      "NumberOfConcerns" : 0.9989902389767755,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5525689260272237,
      "MetricsIntensity" : 0.05341677129687479,
      "Density" : 0.9967509025270758
    },
    "euclideanDistance" : 14.081891905164095,
    "generation" : 11,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641592920353982,
      "LackOfCohesion" : 0.5525689260272237,
      "MetricsIntensity" : 0.05341677129687479,
      "Density" : 3.2235843549328655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "9bdb30f4-d74d-4517-be52-f1a894429f71",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5544277051129469,
      "MetricsIntensity" : 0.05318232494227208,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 14.082209774444637,
    "generation" : 23,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412803532008826,
      "LackOfCohesion" : 0.5544277051129469,
      "MetricsIntensity" : 0.05318232494227208,
      "Density" : 3.2226107226107223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "96ed8282-f7dc-468d-b17b-82b36ad04cab",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5537771036459704,
      "MetricsIntensity" : 0.053388099654709954,
      "Density" : 0.9971119133574007
    },
    "euclideanDistance" : 16.071810056018638,
    "generation" : 10,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6408839779005524,
      "LackOfCohesion" : 0.5537771036459704,
      "MetricsIntensity" : 0.053388099654709954,
      "Density" : 3.2228704784130677
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "78e9ce80-4f6e-45c9-985f-41292d356c5f",
    "objectives" : {
      "NumberOfConcerns" : 1.002692696061932,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5541260964231625,
      "MetricsIntensity" : 0.05242488921064863,
      "Density" : 0.9985559566787003
    },
    "euclideanDistance" : 16.072097272636835,
    "generation" : 30,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6431329288472145,
      "LackOfCohesion" : 0.5541260964231625,
      "MetricsIntensity" : 0.052424889210648626,
      "Density" : 3.220023282887079
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "aa25a9ae-a8d3-4e08-bd01-dfb9dbcd71c1",
    "objectives" : {
      "NumberOfConcerns" : 1.002692696061932,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5548301671583504,
      "MetricsIntensity" : 0.05239969097021247,
      "Density" : 0.9983754512635379
    },
    "euclideanDistance" : 16.072110266745447,
    "generation" : 14,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6422271223814775,
      "LackOfCohesion" : 0.5548301671583504,
      "MetricsIntensity" : 0.05239969097021248,
      "Density" : 3.2194412107101273
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "f9659090-7c7c-465e-9423-64fb688ace1c",
    "objectives" : {
      "NumberOfConcerns" : 1.0030292830696734,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5545958396246101,
      "MetricsIntensity" : 0.05239972478297017,
      "Density" : 0.9987364620938628
    },
    "euclideanDistance" : 16.07214561095989,
    "generation" : 33,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6427783902976842,
      "LackOfCohesion" : 0.5545958396246101,
      "MetricsIntensity" : 0.05239972478297017,
      "Density" : 3.220605355064028
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "e4046de0-58c6-4c1f-a977-d728424541e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5522644073631767,
      "MetricsIntensity" : 0.05342568121316612,
      "Density" : 0.9969314079422382
    },
    "euclideanDistance" : 17.067543743915536,
    "generation" : 9,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6426991150442487,
      "LackOfCohesion" : 0.5522644073631767,
      "MetricsIntensity" : 0.05342568121316612,
      "Density" : 3.224168126094571
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "a95dc86a-862c-49da-b133-34149f27feae",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5538047325296379,
      "MetricsIntensity" : 0.052484208005810405,
      "Density" : 0.9974729241877256
    },
    "euclideanDistance" : 17.067701281953983,
    "generation" : 21,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642186637217007,
      "LackOfCohesion" : 0.5538047325296379,
      "MetricsIntensity" : 0.052484208005810405,
      "Density" : 3.220279720279721
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "11e61113-d332-419e-9440-8c1eae4005e1",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5551739470414229,
      "MetricsIntensity" : 0.05246634814146865,
      "Density" : 0.9974729241877256
    },
    "euclideanDistance" : 17.06774570953388,
    "generation" : 34,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412803532008826,
      "LackOfCohesion" : 0.5551739470414229,
      "MetricsIntensity" : 0.052466348141468645,
      "Density" : 3.2202797202797204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "e1818706-8f83-4455-b3a5-382528584028",
    "objectives" : {
      "NumberOfConcerns" : 1.002019522046449,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5544030569155276,
      "MetricsIntensity" : 0.05242562643397068,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 17.067821989589174,
    "generation" : 19,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6420297848869279,
      "LackOfCohesion" : 0.5544030569155276,
      "MetricsIntensity" : 0.05242562643397068,
      "Density" : 3.2207338380896906
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "d29ff52b-7509-4011-8326-18c3622f62e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9983170649612925,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5533541829022831,
      "MetricsIntensity" : 0.053422140540365086,
      "Density" : 0.9963898916967509
    },
    "euclideanDistance" : 18.063733959381263,
    "generation" : 36,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6395798783858484,
      "LackOfCohesion" : 0.5533541829022831,
      "MetricsIntensity" : 0.053422140540365086,
      "Density" : 3.2224168126094574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "7c3cab0c-d930-4ed1-aba7-92517c122a07",
    "objectives" : {
      "NumberOfConcerns" : 0.998653651969034,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5527355286436682,
      "MetricsIntensity" : 0.05345979134084605,
      "Density" : 0.9965703971119133
    },
    "euclideanDistance" : 18.06374369246049,
    "generation" : 15,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6419479800774763,
      "LackOfCohesion" : 0.5527355286436682,
      "MetricsIntensity" : 0.05345979134084605,
      "Density" : 3.2248831775700935
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "e9f5a768-0975-479c-98b5-a42e990cea7d",
    "objectives" : {
      "NumberOfConcerns" : 0.998653651969034,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.552735528643668,
      "MetricsIntensity" : 0.05345979134084607,
      "Density" : 0.9965703971119133
    },
    "euclideanDistance" : 18.06374369246049,
    "generation" : 36,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6419479800774772,
      "LackOfCohesion" : 0.552735528643668,
      "MetricsIntensity" : 0.05345979134084607,
      "Density" : 3.2248831775700944
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b13f4e85-8efc-4a37-bbf0-b5954cac5dbc",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5537042323450588,
      "MetricsIntensity" : 0.05245823425495756,
      "Density" : 0.9978339350180505
    },
    "euclideanDistance" : 18.063989241411946,
    "generation" : 33,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6418322295805743,
      "LackOfCohesion" : 0.5537042323450588,
      "MetricsIntensity" : 0.05245823425495756,
      "Density" : 3.219569015725102
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "f76f6ce1-3230-4bb9-b582-836f6c480605",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5541745575355922,
      "MetricsIntensity" : 0.052433031635717796,
      "Density" : 0.998014440433213
    },
    "euclideanDistance" : 18.064032223971683,
    "generation" : 28,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6414782129067842,
      "LackOfCohesion" : 0.5541745575355922,
      "MetricsIntensity" : 0.052433031635717796,
      "Density" : 3.2201514269073965
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "a833ad26-cfca-48d3-a8b0-c643802df568",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5529247075412741,
      "MetricsIntensity" : 0.0534488305076524,
      "Density" : 0.9962093862815884
    },
    "euclideanDistance" : 19.06033339121195,
    "generation" : 9,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6393805309734506,
      "LackOfCohesion" : 0.5529247075412741,
      "MetricsIntensity" : 0.053448830507652395,
      "Density" : 3.2237149532710285
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "e750017f-ad4a-4fae-9a6d-0cd77363b6fd",
    "objectives" : {
      "NumberOfConcerns" : 0.997980477953551,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5535041610872745,
      "MetricsIntensity" : 0.05341684848973073,
      "Density" : 0.996028880866426
    },
    "euclideanDistance" : 19.060358306756456,
    "generation" : 4,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6390270867882801,
      "LackOfCohesion" : 0.5535041610872745,
      "MetricsIntensity" : 0.05341684848973073,
      "Density" : 3.2212492702860462
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "c2070c6a-e331-416a-9d95-80a1512f6a89",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5528639954919831,
      "MetricsIntensity" : 0.053321077573874685,
      "Density" : 0.9983754512635379
    },
    "euclideanDistance" : 19.060638755960557,
    "generation" : 34,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6427388183324139,
      "LackOfCohesion" : 0.5528639954919831,
      "MetricsIntensity" : 0.05332107757387469,
      "Density" : 3.223193473193474
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "7a2dd335-ebd1-4dc8-9394-1b886dffe015",
    "objectives" : {
      "NumberOfConcerns" : 0.997307303938068,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5530747839438065,
      "MetricsIntensity" : 0.05344353499136601,
      "Density" : 0.9958483754512636
    },
    "euclideanDistance" : 20.057295026335034,
    "generation" : 4,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6388274336283188,
      "LackOfCohesion" : 0.5530747839438065,
      "MetricsIntensity" : 0.05344353499136602,
      "Density" : 3.2225467289719623
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "05d12821-21f9-4cf4-a2d3-78623659a4f0",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5527613960096427,
      "MetricsIntensity" : 0.05339436367058264,
      "Density" : 0.997653429602888
    },
    "euclideanDistance" : 21.05474679471879,
    "generation" : 33,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412382531785512,
      "LackOfCohesion" : 0.5527613960096427,
      "MetricsIntensity" : 0.05339436367058263,
      "Density" : 3.224620770128355
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "71e7f432-086d-4366-9c45-b4eb3d0490fc",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5523350908454312,
      "MetricsIntensity" : 0.053321111452931856,
      "Density" : 0.9985559566787003
    },
    "euclideanDistance" : 21.054858150407664,
    "generation" : 33,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642186637217007,
      "LackOfCohesion" : 0.5523350908454312,
      "MetricsIntensity" : 0.053321111452931856,
      "Density" : 3.2237762237762237
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "5da61003-aab2-4dbd-afd7-6eeea0d2db83",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5553418167235848,
      "MetricsIntensity" : 0.05250786126696951,
      "Density" : 0.9972924187725631
    },
    "euclideanDistance" : 21.054859310350004,
    "generation" : 29,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6416344561016012,
      "LackOfCohesion" : 0.5553418167235848,
      "MetricsIntensity" : 0.05250786126696951,
      "Density" : 3.221574344023323
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "c3ef05e4-13a6-4467-9ed5-5a233e9e3a15",
    "objectives" : {
      "NumberOfConcerns" : 0.998653651969034,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5523315324450366,
      "MetricsIntensity" : 0.05342103544738548,
      "Density" : 0.9974729241877256
    },
    "euclideanDistance" : 22.052214974460956,
    "generation" : 32,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6410398230088494,
      "LackOfCohesion" : 0.5523315324450366,
      "MetricsIntensity" : 0.05342103544738548,
      "Density" : 3.2259194395796857
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b3b95333-a509-40eb-a8db-098342b5a8a3",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5520109620703995,
      "MetricsIntensity" : 0.053381680956257845,
      "Density" : 0.9974729241877256
    },
    "euclideanDistance" : 22.052237347845853,
    "generation" : 32,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412382531785517,
      "LackOfCohesion" : 0.5520109620703995,
      "MetricsIntensity" : 0.05338168095625784,
      "Density" : 3.224037339556593
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "73e3339e-821b-4128-9edb-b901b6c90a91",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5521404513038396,
      "MetricsIntensity" : 0.05334766653207038,
      "Density" : 0.998014440433213
    },
    "euclideanDistance" : 22.052295523931374,
    "generation" : 38,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6414364640883978,
      "LackOfCohesion" : 0.5521404513038396,
      "MetricsIntensity" : 0.053347666532070376,
      "Density" : 3.223906705539359
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "ac547f14-dead-4d99-bfa0-8d0c0b14bae6",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5525247761026226,
      "MetricsIntensity" : 0.05328288050342334,
      "Density" : 0.9985559566787003
    },
    "euclideanDistance" : 22.05236004361834,
    "generation" : 32,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6416344561016014,
      "LackOfCohesion" : 0.5525247761026226,
      "MetricsIntensity" : 0.05328288050342334,
      "Density" : 3.223776223776223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "47b3bb80-73df-4bce-9d96-0e177dfc6b3a",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5546303033674324,
      "MetricsIntensity" : 0.05244924881619879,
      "Density" : 0.997653429602888
    },
    "euclideanDistance" : 22.052385326861515,
    "generation" : 35,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640375068946498,
      "LackOfCohesion" : 0.5546303033674324,
      "MetricsIntensity" : 0.05244924881619879,
      "Density" : 3.218986604542808
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "7ad3ec2d-d501-4b59-95fd-a167fcb537d8",
    "objectives" : {
      "NumberOfConcerns" : 0.997980477953551,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5527702652797593,
      "MetricsIntensity" : 0.05345244490765735,
      "Density" : 0.996028880866426
    },
    "euclideanDistance" : 23.04986877828029,
    "generation" : 27,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399336283185844,
      "LackOfCohesion" : 0.5527702652797593,
      "MetricsIntensity" : 0.053452444907657354,
      "Density" : 3.223130841121495
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "33975e1a-e32b-4494-9c96-b8becf52be98",
    "objectives" : {
      "NumberOfConcerns" : 0.9989902389767755,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5544494353159962,
      "MetricsIntensity" : 0.05256662715347523,
      "Density" : 0.9963898916967509
    },
    "euclideanDistance" : 23.04996641516987,
    "generation" : 31,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6406854615809838,
      "LackOfCohesion" : 0.5544494353159962,
      "MetricsIntensity" : 0.05256662715347524,
      "Density" : 3.2205367561260214
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "bb48c996-bee4-4d79-b50e-fb8aa6450a98",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5532417180529874,
      "MetricsIntensity" : 0.05348657257380029,
      "Density" : 0.9956678700361011
    },
    "euclideanDistance" : 24.04774921546461,
    "generation" : 10,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6391809629219705,
      "LackOfCohesion" : 0.5532417180529874,
      "MetricsIntensity" : 0.05348657257380029,
      "Density" : 3.223845704266511
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "3c08bdd7-84c9-4734-b9e2-829152f88c7a",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5532417180529877,
      "MetricsIntensity" : 0.053486572573800274,
      "Density" : 0.9956678700361011
    },
    "euclideanDistance" : 24.04774921546461,
    "generation" : 26,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6391809629219707,
      "LackOfCohesion" : 0.5532417180529877,
      "MetricsIntensity" : 0.053486572573800274,
      "Density" : 3.2238457042665116
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "a614264d-f252-4da4-922e-744711854991",
    "objectives" : {
      "NumberOfConcerns" : 0.9989902389767755,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.554175169118442,
      "MetricsIntensity" : 0.05334359326173445,
      "Density" : 0.9971119133574007
    },
    "euclideanDistance" : 24.047914032662785,
    "generation" : 23,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6406854615809836,
      "LackOfCohesion" : 0.554175169118442,
      "MetricsIntensity" : 0.05334359326173445,
      "Density" : 3.220991253644316
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "fc3a3eb9-b77c-4078-bc9f-b98f8c4439f5",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5542087686211014,
      "MetricsIntensity" : 0.05248260977141926,
      "Density" : 0.9969314079422382
    },
    "euclideanDistance" : 24.047933402996648,
    "generation" : 30,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6390728476821195,
      "LackOfCohesion" : 0.5542087686211014,
      "MetricsIntensity" : 0.05248260977141926,
      "Density" : 3.2185314685314688
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "79f6481a-657b-4ba0-b206-32f653b1c1d5",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5533330184297974,
      "MetricsIntensity" : 0.0526907691424647,
      "Density" : 0.9956678700361011
    },
    "euclideanDistance" : 25.04584314540591,
    "generation" : 16,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638274336283186,
      "LackOfCohesion" : 0.5533330184297974,
      "MetricsIntensity" : 0.0526907691424647,
      "Density" : 3.221962616822429
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "85207f15-6345-434e-9fe0-0f81aa98ecbf",
    "objectives" : {
      "NumberOfConcerns" : 0.997307303938068,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5539122047566298,
      "MetricsIntensity" : 0.05265928323800192,
      "Density" : 0.9954873646209387
    },
    "euclideanDistance" : 25.045862106988803,
    "generation" : 14,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637921503593146,
      "LackOfCohesion" : 0.5539122047566298,
      "MetricsIntensity" : 0.05265928323800192,
      "Density" : 3.219497956800933
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "51f999a4-ae7c-498a-99ed-b1818f330805",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5530117926323957,
      "MetricsIntensity" : 0.05265189257431148,
      "Density" : 0.9956678700361011
    },
    "euclideanDistance" : 25.04586277422173,
    "generation" : 30,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6384742951907132,
      "LackOfCohesion" : 0.5530117926323957,
      "MetricsIntensity" : 0.05265189257431148,
      "Density" : 3.2200817279626386
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "5a0d6cfa-94d4-4653-bdb0-db5f8aa16e3d",
    "objectives" : {
      "NumberOfConcerns" : 0.998653651969034,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5540154809208937,
      "MetricsIntensity" : 0.05250859945398221,
      "Density" : 0.9963898916967509
    },
    "euclideanDistance" : 25.04595361009405,
    "generation" : 32,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6383213694091665,
      "LackOfCohesion" : 0.5540154809208937,
      "MetricsIntensity" : 0.05250859945398221,
      "Density" : 3.2186588921282797
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "74a6d534-9e1f-46d4-9551-7137d11d4a3a",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5531653688571425,
      "MetricsIntensity" : 0.05252916834741781,
      "Density" : 0.9987364620938628
    },
    "euclideanDistance" : 25.04614929409097,
    "generation" : 29,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6423841059602653,
      "LackOfCohesion" : 0.5531653688571425,
      "MetricsIntensity" : 0.05252916834741781,
      "Density" : 3.222481071636575
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "c9ec5149-7ceb-4764-a67d-3fac283abd49",
    "objectives" : {
      "NumberOfConcerns" : 1.002019522046449,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5536360457862449,
      "MetricsIntensity" : 0.05250391942655108,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 25.04618030285833,
    "generation" : 36,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6420297848869279,
      "LackOfCohesion" : 0.5536360457862449,
      "MetricsIntensity" : 0.05250391942655108,
      "Density" : 3.2230634828188696
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "bf8a78cb-5787-44d9-a597-4cfd1b97c8f8",
    "objectives" : {
      "NumberOfConcerns" : 0.996634129922585,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5534830948323296,
      "MetricsIntensity" : 0.05268547362617831,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 26.044059488265358,
    "generation" : 14,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6377212389380533,
      "LackOfCohesion" : 0.5534830948323296,
      "MetricsIntensity" : 0.05268547362617831,
      "Density" : 3.2207943925233637
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "75de6d4c-ed79-45e6-b5cd-f7d513c868f6",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5529713991963046,
      "MetricsIntensity" : 0.05255518846042257,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 26.04431376264836,
    "generation" : 34,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6416344561016016,
      "LackOfCohesion" : 0.5529713991963046,
      "MetricsIntensity" : 0.05255518846042257,
      "Density" : 3.2226107226107223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "f0c5714d-3fa7-4136-acd3-d0e0b0d2251c",
    "objectives" : {
      "NumberOfConcerns" : 0.997980477953551,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5526481542443671,
      "MetricsIntensity" : 0.05345875929920812,
      "Density" : 0.9969314079422382
    },
    "euclideanDistance" : 27.042524199635167,
    "generation" : 34,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6408411732152737,
      "LackOfCohesion" : 0.5526481542443671,
      "MetricsIntensity" : 0.05345875929920811,
      "Density" : 3.226051401869159
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "4d2fbd6c-e459-4b76-a5d0-42cb208ab28b",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5537303373505346,
      "MetricsIntensity" : 0.05262647994778941,
      "Density" : 0.9967509025270758
    },
    "euclideanDistance" : 27.04258777002887,
    "generation" : 28,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6403314917127068,
      "LackOfCohesion" : 0.5537303373505346,
      "MetricsIntensity" : 0.05262647994778941,
      "Density" : 3.221703617269545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "406fedce-ef92-4bf6-b69e-fe8b0e2c2205",
    "objectives" : {
      "NumberOfConcerns" : 1.0003365870077414,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5527426011243692,
      "MetricsIntensity" : 0.05256260334217193,
      "Density" : 0.998014440433213
    },
    "euclideanDistance" : 27.0426513737279,
    "generation" : 32,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6410822749861949,
      "LackOfCohesion" : 0.5527426011243692,
      "MetricsIntensity" : 0.05256260334217193,
      "Density" : 3.2220279720279716
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "35ea0cd0-d263-482b-92cc-e2798d2b9525",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5532138616228134,
      "MetricsIntensity" : 0.05253731609085736,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 27.042680076083162,
    "generation" : 17,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640728476821192,
      "LackOfCohesion" : 0.5532138616228134,
      "MetricsIntensity" : 0.052537316090857364,
      "Density" : 3.222610722610721
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "da4f9352-a671-408a-bcd4-7422e4ecbc43",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5525164889281365,
      "MetricsIntensity" : 0.053408427135242194,
      "Density" : 0.9965703971119133
    },
    "euclideanDistance" : 28.040980240001737,
    "generation" : 28,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6384742951907132,
      "LackOfCohesion" : 0.5525164889281365,
      "MetricsIntensity" : 0.05340842713524219,
      "Density" : 3.2230005837711624
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "33ef750e-4f10-4e94-aef3-06b39c094e56",
    "objectives" : {
      "NumberOfConcerns" : 0.9989902389767755,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5528910943064672,
      "MetricsIntensity" : 0.05259682074118959,
      "Density" : 0.9971119133574007
    },
    "euclideanDistance" : 28.041053272889833,
    "generation" : 33,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6397790055248622,
      "LackOfCohesion" : 0.5528910943064672,
      "MetricsIntensity" : 0.052596820741189584,
      "Density" : 3.2228704784130677
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "82a4d2d2-991a-4206-bf13-2ea60bb88c28",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5525482281035617,
      "MetricsIntensity" : 0.05258866234013926,
      "Density" : 0.9974729241877256
    },
    "euclideanDistance" : 28.041071332090848,
    "generation" : 38,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640331491712707,
      "LackOfCohesion" : 0.5525482281035617,
      "MetricsIntensity" : 0.05258866234013926,
      "Density" : 3.222157434402332
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "8154a0c6-4572-4b1c-a0d5-6dd82a1dfdf8",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5530199236565936,
      "MetricsIntensity" : 0.052563341529184626,
      "Density" : 0.997653429602888
    },
    "euclideanDistance" : 28.04109900210239,
    "generation" : 34,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399779127553835,
      "LackOfCohesion" : 0.5530199236565936,
      "MetricsIntensity" : 0.052563341529184626,
      "Density" : 3.2227405247813414
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "f53c09a9-e2a1-4b29-97b5-086d6b717c09",
    "objectives" : {
      "NumberOfConcerns" : 0.996634129922585,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5529874667641513,
      "MetricsIntensity" : 0.05344250362559033,
      "Density" : 0.9962093862815884
    },
    "euclideanDistance" : 29.039531056300376,
    "generation" : 3,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6377212389380535,
      "LackOfCohesion" : 0.5529874667641513,
      "MetricsIntensity" : 0.05344250362559033,
      "Density" : 3.2237149532710285
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "baf12e1e-87a3-410e-95a2-be809ceaa6ed",
    "objectives" : {
      "NumberOfConcerns" : 0.9962975429148435,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5536502965109004,
      "MetricsIntensity" : 0.052727239161893265,
      "Density" : 0.9951263537906138
    },
    "euclideanDistance" : 30.03817894058498,
    "generation" : 7,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638074156059768,
      "LackOfCohesion" : 0.5536502965109004,
      "MetricsIntensity" : 0.05272723916189327,
      "Density" : 3.2220923436586797
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "3590702b-df94-4c13-8595-efe803ac7074",
    "objectives" : {
      "NumberOfConcerns" : 0.996634129922585,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5545265351292077,
      "MetricsIntensity" : 0.05261719623164396,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 30.038212056985188,
    "generation" : 32,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6377212389380533,
      "LackOfCohesion" : 0.5545265351292077,
      "MetricsIntensity" : 0.052617196231643966,
      "Density" : 3.2207943925233633
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "8ff0e011-4d57-4d5b-b6a0-0ec513e32021",
    "objectives" : {
      "NumberOfConcerns" : 0.9983170649612925,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5551129295891265,
      "MetricsIntensity" : 0.052557725057739806,
      "Density" : 0.9965703971119133
    },
    "euclideanDistance" : 31.03708591665224,
    "generation" : 38,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638674033149171,
      "LackOfCohesion" : 0.5551129295891265,
      "MetricsIntensity" : 0.05255772505773981,
      "Density" : 3.219241982507288
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "0c312853-6bea-441e-ac96-ad2b52fae127",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5535415848097427,
      "MetricsIntensity" : 0.05258699479034371,
      "Density" : 0.9972924187725631
    },
    "euclideanDistance" : 31.037113589246797,
    "generation" : 32,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6394257316399776,
      "LackOfCohesion" : 0.5535415848097427,
      "MetricsIntensity" : 0.052586994790343705,
      "Density" : 3.221574344023323
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "3a41bc1e-823e-4214-b000-f4fe3d367a29",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5529065579534815,
      "MetricsIntensity" : 0.052702786666166276,
      "Density" : 0.9967509025270758
    },
    "euclideanDistance" : 32.03587503004063,
    "generation" : 35,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6402877697841722,
      "LackOfCohesion" : 0.5529065579534815,
      "MetricsIntensity" : 0.052702786666166276,
      "Density" : 3.225467289719627
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "f35420fe-039a-4673-b8f0-c0b4a4619289",
    "objectives" : {
      "NumberOfConcerns" : 0.9983170649612925,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5525854010720449,
      "MetricsIntensity" : 0.052663876768548876,
      "Density" : 0.9967509025270758
    },
    "euclideanDistance" : 32.035890395512276,
    "generation" : 34,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6404867256637168,
      "LackOfCohesion" : 0.5525854010720449,
      "MetricsIntensity" : 0.052663876768548876,
      "Density" : 3.223584354932865
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "458dbdaa-73ee-4be4-a2bb-b36eff9bfd6a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989902389767755,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5534762652346191,
      "MetricsIntensity" : 0.052579579908594354,
      "Density" : 0.9972924187725631
    },
    "euclideanDistance" : 32.03594347376886,
    "generation" : 4,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638873550524572,
      "LackOfCohesion" : 0.5534762652346191,
      "MetricsIntensity" : 0.05257957990859436,
      "Density" : 3.221574344023323
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "7756cadc-b168-41c4-8c05-7da93300ba54",
    "objectives" : {
      "NumberOfConcerns" : 0.9962975429148435,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5531543436536865,
      "MetricsIntensity" : 0.0534855405321623,
      "Density" : 0.996028880866426
    },
    "euclideanDistance" : 33.03473206727258,
    "generation" : 21,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6380741560597676,
      "LackOfCohesion" : 0.5531543436536865,
      "MetricsIntensity" : 0.0534855405321623,
      "Density" : 3.225014611338399
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "44b7862a-3c26-40aa-a0de-0ce7c6d97ac1",
    "objectives" : {
      "NumberOfConcerns" : 0.998653651969034,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5532474671626838,
      "MetricsIntensity" : 0.05258699479034371,
      "Density" : 0.9971119133574007
    },
    "euclideanDistance" : 33.034835998325974,
    "generation" : 29,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6383213694091665,
      "LackOfCohesion" : 0.5532474671626838,
      "MetricsIntensity" : 0.052586994790343705,
      "Density" : 3.2209912536443155
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "b7348988-6eeb-4404-9f5d-e7d0e5011437",
    "objectives" : {
      "NumberOfConcerns" : 0.995960955907102,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5548956311056781,
      "MetricsIntensity" : 0.05272496922258989,
      "Density" : 0.9951263537906138
    },
    "euclideanDistance" : 34.03370246930974,
    "generation" : 22,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6375207526286657,
      "LackOfCohesion" : 0.5548956311056781,
      "MetricsIntensity" : 0.05272496922258989,
      "Density" : 3.2220923436586784
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "f235576c-f773-41d4-84c3-435a84a1acd1",
    "objectives" : {
      "NumberOfConcerns" : 0.9962975429148435,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5532457012501424,
      "MetricsIntensity" : 0.05268547651237576,
      "Density" : 0.996028880866426
    },
    "euclideanDistance" : 34.033711800080304,
    "generation" : 24,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637168141592921,
      "LackOfCohesion" : 0.5532457012501424,
      "MetricsIntensity" : 0.05268547651237576,
      "Density" : 3.2231308411214954
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "ddeef39f-58e8-44f9-8ee4-94e800fa04fc",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5530534243354921,
      "MetricsIntensity" : 0.05261306974086052,
      "Density" : 0.9965703971119133
    },
    "euclideanDistance" : 34.03376385466083,
    "generation" : 31,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6375690607734805,
      "LackOfCohesion" : 0.5530534243354921,
      "MetricsIntensity" : 0.05261306974086052,
      "Density" : 3.2211201866977834
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "ea6d07e3-2abd-40a8-8ea1-7bfd46f3d2f4",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5552968796536933,
      "MetricsIntensity" : 0.05250708921393098,
      "Density" : 0.9969314079422382
    },
    "euclideanDistance" : 34.03386016831245,
    "generation" : 34,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6385209713024287,
      "LackOfCohesion" : 0.5552968796536933,
      "MetricsIntensity" : 0.052507089213930984,
      "Density" : 3.216656959813629
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "a67d1ae1-8f46-4c72-bd7a-f1c9815b64b8",
    "objectives" : {
      "NumberOfConcerns" : 0.995960955907102,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5533957776526746,
      "MetricsIntensity" : 0.052680180996089405,
      "Density" : 0.9956678700361011
    },
    "euclideanDistance" : 35.032732049061025,
    "generation" : 28,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636615044247788,
      "LackOfCohesion" : 0.5533957776526746,
      "MetricsIntensity" : 0.05268018099608941,
      "Density" : 3.221962616822429
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "a6546602-e294-4b60-838a-180037903cc0",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5555508832750701,
      "MetricsIntensity" : 0.05257397405741079,
      "Density" : 0.9962093862815884
    },
    "euclideanDistance" : 35.032829278850905,
    "generation" : 30,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6375690607734807,
      "LackOfCohesion" : 0.5555508832750701,
      "MetricsIntensity" : 0.05257397405741078,
      "Density" : 3.2180758017492708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "f391f87d-b7bf-405e-a3e6-08c16ca5923f",
    "objectives" : {
      "NumberOfConcerns" : 0.997980477953551,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5548755050652315,
      "MetricsIntensity" : 0.05254050977787888,
      "Density" : 0.9962093862815884
    },
    "euclideanDistance" : 36.03191703902224,
    "generation" : 34,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6372170071783547,
      "LackOfCohesion" : 0.5548755050652315,
      "MetricsIntensity" : 0.05254050977787887,
      "Density" : 3.216200466200466
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "7f48de74-6e30-4564-8ffd-efeb53613933",
    "objectives" : {
      "NumberOfConcerns" : 0.995960955907102,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5542538532160546,
      "MetricsIntensity" : 0.05271744664226342,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 37.03096745202127,
    "generation" : 32,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6366150442477883,
      "LackOfCohesion" : 0.5542538532160546,
      "MetricsIntensity" : 0.052717446642263424,
      "Density" : 3.2189141856392296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "84185704-e7fe-4710-b2eb-b7d8d974cba4",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5552565732685298,
      "MetricsIntensity" : 0.05257397405741077,
      "Density" : 0.996028880866426
    },
    "euclideanDistance" : 37.03102885455443,
    "generation" : 35,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6364640883977897,
      "LackOfCohesion" : 0.5552565732685298,
      "MetricsIntensity" : 0.05257397405741078,
      "Density" : 3.2174927113702623
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "a64c9ac0-52c8-4e00-b155-a68d5bb75456",
    "objectives" : {
      "NumberOfConcerns" : 0.9956243688993605,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5550638686779877,
      "MetricsIntensity" : 0.05276678804429309,
      "Density" : 0.9949458483754513
    },
    "euclideanDistance" : 38.030146796421626,
    "generation" : 22,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6378737541528237,
      "LackOfCohesion" : 0.5550638686779877,
      "MetricsIntensity" : 0.0527667880442931,
      "Density" : 3.223391812865497
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "10af74c6-fe41-4ec9-8a31-9e3e96ec2b10",
    "objectives" : {
      "NumberOfConcerns" : 0.996634129922585,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5530912589886277,
      "MetricsIntensity" : 0.052688316137051064,
      "Density" : 0.9958483754512636
    },
    "euclideanDistance" : 38.030168019287565,
    "generation" : 33,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6377212389380535,
      "LackOfCohesion" : 0.5530912589886277,
      "MetricsIntensity" : 0.05268831613705106,
      "Density" : 3.2225467289719623
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "7c1709f4-a480-4b98-b714-9114a68fb86c",
    "objectives" : {
      "NumberOfConcerns" : 0.995960955907102,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5559397551773251,
      "MetricsIntensity" : 0.052656647085333005,
      "Density" : 0.9951263537906138
    },
    "euclideanDistance" : 38.030172973831824,
    "generation" : 24,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6375207526286657,
      "LackOfCohesion" : 0.5559397551773251,
      "MetricsIntensity" : 0.05265664708533301,
      "Density" : 3.2220923436586784
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "f520da2d-1402-42fb-990e-fe7353587eb2",
    "objectives" : {
      "NumberOfConcerns" : 0.9956243688993605,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5535629221115994,
      "MetricsIntensity" : 0.05272194306350151,
      "Density" : 0.9954873646209387
    },
    "euclideanDistance" : 39.029366821524064,
    "generation" : 15,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6369673491975651,
      "LackOfCohesion" : 0.5535629221115994,
      "MetricsIntensity" : 0.0527219430635015,
      "Density" : 3.2232612507305674
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "cfee3538-3795-4ebc-b528-f561c364832d",
    "objectives" : {
      "NumberOfConcerns" : 0.9956243688993605,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5544215599787563,
      "MetricsIntensity" : 0.05275923313015142,
      "Density" : 0.9951263537906138
    },
    "euclideanDistance" : 41.027938178109856,
    "generation" : 25,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6369673491975647,
      "LackOfCohesion" : 0.5544215599787563,
      "MetricsIntensity" : 0.05275923313015142,
      "Density" : 3.220210280373832
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "218d5f6e-fc2d-484a-b7f4-7b7c1617201f",
    "objectives" : {
      "NumberOfConcerns" : 0.995960955907102,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5552972935129331,
      "MetricsIntensity" : 0.05264916924772904,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 41.02796242794515,
    "generation" : 29,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636615044247788,
      "LackOfCohesion" : 0.5552972935129331,
      "MetricsIntensity" : 0.05264916924772904,
      "Density" : 3.2189141856392296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "577c9eb4-4c49-4519-b624-4dca7fe13d4e",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5548082567063771,
      "MetricsIntensity" : 0.052719673124198105,
      "Density" : 0.9954873646209387
    },
    "euclideanDistance" : 43.026645051962234,
    "generation" : 25,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636413945766464,
      "LackOfCohesion" : 0.5548082567063771,
      "MetricsIntensity" : 0.052719673124198105,
      "Density" : 3.2232612507305674
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "04c006dd-5c03-43b7-a5f0-c73a3f2eae5e",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5556668945735338,
      "MetricsIntensity" : 0.052756963190848036,
      "Density" : 0.9951263537906138
    },
    "euclideanDistance" : 45.02546416444456,
    "generation" : 20,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636413945766464,
      "LackOfCohesion" : 0.5556668945735338,
      "MetricsIntensity" : 0.052756963190848036,
      "Density" : 3.2202102803738315
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "88b32412-1fa6-4991-a861-1fa1c3bc67e0",
    "objectives" : {
      "NumberOfConcerns" : 0.9962975429148435,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5537856824278824,
      "MetricsIntensity" : 0.05267855549932202,
      "Density" : 0.9958483754512636
    },
    "euclideanDistance" : 45.02547919115552,
    "generation" : 31,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6362631288004423,
      "LackOfCohesion" : 0.5537856824278824,
      "MetricsIntensity" : 0.05267855549932202,
      "Density" : 3.218786464410736
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "f05e74e7-678c-4f66-b065-ff52e6406854",
    "objectives" : {
      "NumberOfConcerns" : 0.9956243688993605,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5565418125644266,
      "MetricsIntensity" : 0.052646900794960885,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 45.025486272923516,
    "generation" : 26,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636061946902655,
      "LackOfCohesion" : 0.5565418125644266,
      "MetricsIntensity" : 0.0526469007949609,
      "Density" : 3.218914185639229
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "2c8b6a71-1bfd-42be-a4c2-b1ca947d5ca8",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5539140109547445,
      "MetricsIntensity" : 0.052645000934818616,
      "Density" : 0.9963898916967509
    },
    "euclideanDistance" : 45.02550761129015,
    "generation" : 34,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63646408839779,
      "LackOfCohesion" : 0.5539140109547445,
      "MetricsIntensity" : 0.05264500093481861,
      "Density" : 3.2186588921282797
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "a601cc56-cc69-4a5e-8ddd-6d3fa652a424",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5541665360363996,
      "MetricsIntensity" : 0.05271215401217444,
      "Density" : 0.9956678700361011
    },
    "euclideanDistance" : 46.02490446917895,
    "generation" : 30,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575223,
      "LackOfCohesion" : 0.5541665360363996,
      "MetricsIntensity" : 0.05271215401217443,
      "Density" : 3.220081727962639
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "590a886e-aeab-4b81-b2ee-8b01ea1b9ef9",
    "objectives" : {
      "NumberOfConcerns" : 0.995960955907102,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5542946992981559,
      "MetricsIntensity" : 0.05267855549932202,
      "Density" : 0.9962093862815884
    },
    "euclideanDistance" : 46.02493225427808,
    "generation" : 37,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6357103372028745,
      "LackOfCohesion" : 0.5542946992981559,
      "MetricsIntensity" : 0.052678555499322016,
      "Density" : 3.2199533255542594
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "0cecb606-d105-44b1-9cdb-b55ba052c590",
    "objectives" : {
      "NumberOfConcerns" : 0.9949511948838775,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5549764369839986,
      "MetricsIntensity" : 0.052761488473049956,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 47.02436970597753,
    "generation" : 35,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6367663344407526,
      "LackOfCohesion" : 0.5549764369839986,
      "MetricsIntensity" : 0.052761488473049956,
      "Density" : 3.2245614035087717
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "4ad4381c-424a-4756-ad5f-6f7fce1df3a2",
    "objectives" : {
      "NumberOfConcerns" : 0.9949511948838775,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5549764369839987,
      "MetricsIntensity" : 0.052761488473049935,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 47.02436970597753,
    "generation" : 31,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6367663344407524,
      "LackOfCohesion" : 0.5549764369839987,
      "MetricsIntensity" : 0.052761488473049935,
      "Density" : 3.2245614035087713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "eef23476-5843-4bfe-89d3-5a4c8b03be58",
    "objectives" : {
      "NumberOfConcerns" : 0.9949511948838775,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5558356378923798,
      "MetricsIntensity" : 0.05279880299220258,
      "Density" : 0.9949458483754513
    },
    "euclideanDistance" : 49.02337795472023,
    "generation" : 15,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6367663344407528,
      "LackOfCohesion" : 0.5558356378923798,
      "MetricsIntensity" : 0.05279880299220258,
      "Density" : 3.2215078901227345
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "1aab25ab-b28f-41cc-a78a-0dda05145b11",
    "objectives" : {
      "NumberOfConcerns" : 0.9949511948838775,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5558356378923799,
      "MetricsIntensity" : 0.05279880299220257,
      "Density" : 0.9949458483754513
    },
    "euclideanDistance" : 49.02337795472023,
    "generation" : 21,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6367663344407537,
      "LackOfCohesion" : 0.5558356378923799,
      "MetricsIntensity" : 0.05279880299220257,
      "Density" : 3.221507890122734
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "5179839a-3710-4b01-8a9c-50f35eea43ac",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5567110186451809,
      "MetricsIntensity" : 0.052688641053591154,
      "Density" : 0.9951263537906138
    },
    "euclideanDistance" : 49.023398265317844,
    "generation" : 21,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636413945766464,
      "LackOfCohesion" : 0.5567110186451809,
      "MetricsIntensity" : 0.05268864105359115,
      "Density" : 3.2202102803738315
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "7100da4a-04b9-4843-8c77-76cfcd072369",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5567110186451807,
      "MetricsIntensity" : 0.05268864105359118,
      "Density" : 0.9951263537906138
    },
    "euclideanDistance" : 49.023398265317844,
    "generation" : 16,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636413945766464,
      "LackOfCohesion" : 0.5567110186451807,
      "MetricsIntensity" : 0.05268864105359118,
      "Density" : 3.220210280373832
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "305959dd-cd3c-4b6e-b399-a056d673fe2e",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5567110186451809,
      "MetricsIntensity" : 0.052688641053591154,
      "Density" : 0.9951263537906138
    },
    "euclideanDistance" : 49.023398265317844,
    "generation" : 15,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636413945766464,
      "LackOfCohesion" : 0.5567110186451809,
      "MetricsIntensity" : 0.052688641053591154,
      "Density" : 3.220210280373832
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "ece8f26c-5f8d-48e6-9fef-432848f9b735",
    "objectives" : {
      "NumberOfConcerns" : 0.9949511948838775,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5543341855794552,
      "MetricsIntensity" : 0.052753937031759665,
      "Density" : 0.9954873646209387
    },
    "euclideanDistance" : 50.02290467716259,
    "generation" : 30,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6358605423353625,
      "LackOfCohesion" : 0.5543341855794552,
      "MetricsIntensity" : 0.052753937031759665,
      "Density" : 3.221378504672897
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "12c802f3-bab4-47e9-a460-2fa6565e8f56",
    "objectives" : {
      "NumberOfConcerns" : 0.994614607876136,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5555795201742326,
      "MetricsIntensity" : 0.05275166709245628,
      "Density" : 0.9954873646209387
    },
    "euclideanDistance" : 54.02121532002903,
    "generation" : 8,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042613,
      "LackOfCohesion" : 0.5555795201742326,
      "MetricsIntensity" : 0.05275166709245628,
      "Density" : 3.2213785046728964
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "13c2b40b-fe2b-4700-b4a4-1f1d5c843fe1",
    "objectives" : {
      "NumberOfConcerns" : 0.994614607876136,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.555579520174233,
      "MetricsIntensity" : 0.052751667092456274,
      "Density" : 0.9954873646209387
    },
    "euclideanDistance" : 54.02121532002903,
    "generation" : 22,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042613,
      "LackOfCohesion" : 0.555579520174233,
      "MetricsIntensity" : 0.05275166709245629,
      "Density" : 3.2213785046728964
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "14dbe054-e339-4afe-a77b-dfa48c805f41",
    "objectives" : {
      "NumberOfConcerns" : 0.9942780208683945,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5557482061983906,
      "MetricsIntensity" : 0.05279350342095941,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 58.01974549883393,
    "generation" : 3,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6356589147286822,
      "LackOfCohesion" : 0.5557482061983906,
      "MetricsIntensity" : 0.05279350342095942,
      "Density" : 3.222676797194623
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  }, {
    "solutionId" : "9ad81078-df83-4279-8050-45692128ceb5",
    "objectives" : {
      "NumberOfConcerns" : 0.9942780208683945,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5557482061983907,
      "MetricsIntensity" : 0.05279350342095939,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 58.01974549883393,
    "generation" : 12,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.635658914728682,
      "LackOfCohesion" : 0.5557482061983907,
      "MetricsIntensity" : 0.0527935034209594,
      "Density" : 3.222676797194623
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.CredentialsExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.cas.SamlServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.vote.AffirmativeBased'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.web.util.matcher.ELRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.core.context.SecurityContextChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.crypto.argon2.Argon2PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector.AutoProxyRegistrarSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.NestedLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.web.server.DefaultServerOAuth2AuthorizationRequestResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.authorization.AuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager.PostAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.access.expression.WebExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.oidc.OidcIdToken.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      } ]
    } ]
  } ]
}