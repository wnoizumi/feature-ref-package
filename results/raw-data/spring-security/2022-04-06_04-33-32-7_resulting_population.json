{
  "executionId" : "a7c9c68e-58bf-4f5a-a831-4aa725081d6b",
  "computingTime" : 10321,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.187100522951772,
    "meanNumConcerns" : 1.642105263157895,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "bf4f93fd-931a-4558-bc36-9f087132a568",
    "objectives" : {
      "NumberOfConcerns" : 1.0033738191632928,
      "NumberOfRefactorings" : 6.0,
      "LackOfCohesion" : 0.555320855839879,
      "MetricsIntensity" : 0.05336916453967212,
      "Density" : 1.0054694621695532
    },
    "euclideanDistance" : 6.191038473551288,
    "generation" : 0,
    "numberOfRefactorings" : 6,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6421866372170066,
      "LackOfCohesion" : 0.555320855839879,
      "MetricsIntensity" : 0.05336916453967213,
      "Density" : 3.1933989577301682,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "41aa5c19-9b40-4377-b0c6-5525bdc89359",
    "objectives" : {
      "NumberOfConcerns" : 1.00472334682861,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5541206563314229,
      "MetricsIntensity" : 0.05327393272860769,
      "Density" : 0.9974475843208751
    },
    "euclideanDistance" : 9.127664460354115,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6416758544652703,
      "LackOfCohesion" : 0.5541206563314229,
      "MetricsIntensity" : 0.05327393272860769,
      "Density" : 3.164256795835743,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3e8e8994-edad-48f3-b01d-0beb780eb143",
    "objectives" : {
      "NumberOfConcerns" : 1.0053981106612686,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5549884293860845,
      "MetricsIntensity" : 0.05328420633249038,
      "Density" : 0.9978122151321787
    },
    "euclideanDistance" : 9.127831393106751,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6427783902976842,
      "LackOfCohesion" : 0.5549884293860845,
      "MetricsIntensity" : 0.05328420633249039,
      "Density" : 3.163583815028902,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3e5f6733-bbfc-4f32-85b5-1682699bb5d3",
    "objectives" : {
      "NumberOfConcerns" : 1.0020242914979758,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5530086903385757,
      "MetricsIntensity" : 0.053392568529695913,
      "Density" : 1.0
    },
    "euclideanDistance" : 15.076893647522894,
    "generation" : 0,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6408839779005522,
      "LackOfCohesion" : 0.5530086903385757,
      "MetricsIntensity" : 0.05339256852969591,
      "Density" : 3.1778679026651218,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.LazyCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "c1823b9a-3146-4d52-bbb0-8d15339ce1e4",
    "objectives" : {
      "NumberOfConcerns" : 1.0030364372469636,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5539549345425852,
      "MetricsIntensity" : 0.05340511150997773,
      "Density" : 1.0010938924339106
    },
    "euclideanDistance" : 16.072273929079017,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6416344561016016,
      "LackOfCohesion" : 0.5539549345425852,
      "MetricsIntensity" : 0.053405111509977725,
      "Density" : 3.179502026635784,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.LazyCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "f54d5274-fd88-438a-bfda-dec89ed70261",
    "objectives" : {
      "NumberOfConcerns" : 1.0030364372469636,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5555092930381198,
      "MetricsIntensity" : 0.053364743275947306,
      "Density" : 1.0047402005469461
    },
    "euclideanDistance" : 17.068304641513663,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641634456101601,
      "LackOfCohesion" : 0.5555092930381198,
      "MetricsIntensity" : 0.0533647432759473,
      "Density" : 3.1929316338354585,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "91116197-b936-4967-ba16-488cb577773a",
    "objectives" : {
      "NumberOfConcerns" : 1.0030364372469636,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5545470562915695,
      "MetricsIntensity" : 0.053389659225233,
      "Density" : 0.9974475843208751
    },
    "euclideanDistance" : 18.064090253075754,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641634456101601,
      "LackOfCohesion" : 0.5545470562915695,
      "MetricsIntensity" : 0.053389659225233005,
      "Density" : 3.1697566628041725,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "025d0dd6-1c4b-40c5-aa8d-75c10c7c0c81",
    "objectives" : {
      "NumberOfConcerns" : 1.0020242914979758,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5545591569360232,
      "MetricsIntensity" : 0.05339757003184801,
      "Density" : 1.0038286235186873
    },
    "euclideanDistance" : 20.057968784131017,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399779127553835,
      "LackOfCohesion" : 0.5545591569360232,
      "MetricsIntensity" : 0.053397570031848,
      "Density" : 3.190034762456546,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "4266444d-1a9e-42c2-9a1e-2fe3ea430712",
    "objectives" : {
      "NumberOfConcerns" : 1.0030364372469636,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5540161725057839,
      "MetricsIntensity" : 0.0533819398481506,
      "Density" : 1.0043755697356427
    },
    "euclideanDistance" : 21.055275726772777,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6416344561016012,
      "LackOfCohesion" : 0.5540161725057839,
      "MetricsIntensity" : 0.0533819398481506,
      "Density" : 3.193623188405797,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "13c5e1d0-7908-4c02-91b8-a01e654ce887",
    "objectives" : {
      "NumberOfConcerns" : 1.0053981106612686,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5550398360245453,
      "MetricsIntensity" : 0.05337441450290529,
      "Density" : 1.006563354603464
    },
    "euclideanDistance" : 22.05300236238707,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454997239094424,
      "LackOfCohesion" : 0.5550398360245453,
      "MetricsIntensity" : 0.05337441450290528,
      "Density" : 3.1968731905037635,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "55f67838-ea9c-49c6-85ef-e49d23360576",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.553722311613021,
      "MetricsIntensity" : 0.053407636375011454,
      "Density" : 0.9914311759343665
    },
    "euclideanDistance" : 24.04776699461244,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.639779005524862,
      "LackOfCohesion" : 0.553722311613021,
      "MetricsIntensity" : 0.053407636375011454,
      "Density" : 3.1524637681159415,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "f7b65bba-0459-47a6-bbbf-b546f432c8a4",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5516746572060842,
      "MetricsIntensity" : 0.05353839166475217,
      "Density" : 1.0007292616226071
    },
    "euclideanDistance" : 24.048077268771923,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432132963988924,
      "LackOfCohesion" : 0.5516746572060842,
      "MetricsIntensity" : 0.05353839166475217,
      "Density" : 3.1894247530505515,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "f5ee1d6d-2d5a-4faf-ac14-81232ccb129b",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5530119342798628,
      "MetricsIntensity" : 0.053474241327159736,
      "Density" : 1.0003646308113034
    },
    "euclideanDistance" : 24.048120757453695,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6406854615809836,
      "LackOfCohesion" : 0.5530119342798628,
      "MetricsIntensity" : 0.05347424132715974,
      "Density" : 3.182714617169373,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.web.csrf.CsrfAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.AnnotationAwareOrderComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      } ]
    } ]
  }, {
    "solutionId" : "e2c1927f-3ece-4e2e-b04e-c9b1f77c8947",
    "objectives" : {
      "NumberOfConcerns" : 1.0016869095816465,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5540722109879109,
      "MetricsIntensity" : 0.05343784074309322,
      "Density" : 1.003281677301732
    },
    "euclideanDistance" : 24.0482806538565,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640331491712707,
      "LackOfCohesion" : 0.5540722109879109,
      "MetricsIntensity" : 0.05343784074309322,
      "Density" : 3.1901449275362324,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.LazyCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "b08aef77-a13b-4fff-85f2-c362096c9e2b",
    "objectives" : {
      "NumberOfConcerns" : 1.001349527665317,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5543735299095935,
      "MetricsIntensity" : 0.053450191688691626,
      "Density" : 1.0034639927073838
    },
    "euclideanDistance" : 26.0445738647203,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640685461580984,
      "LackOfCohesion" : 0.5543735299095935,
      "MetricsIntensity" : 0.05345019168869162,
      "Density" : 3.192575406032483,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.LazyCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "a4e5a938-974a-4cae-9b20-74700c34318d",
    "objectives" : {
      "NumberOfConcerns" : 1.0003373819163293,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5525913515730958,
      "MetricsIntensity" : 0.05350540724073982,
      "Density" : 1.0
    },
    "euclideanDistance" : 27.04272351129036,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6390270867882801,
      "LackOfCohesion" : 0.5525913515730958,
      "MetricsIntensity" : 0.05350540724073982,
      "Density" : 3.1815545243619483,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.LazyCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.web.csrf.CsrfAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.AnnotationAwareOrderComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      } ]
    } ]
  }, {
    "solutionId" : "059628f6-4377-4d09-b989-d7a23e63efb6",
    "objectives" : {
      "NumberOfConcerns" : 1.002361673414305,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.555672019963264,
      "MetricsIntensity" : 0.053368903911667424,
      "Density" : 1.0047402005469461
    },
    "euclideanDistance" : 27.043037023023132,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6396247240618098,
      "LackOfCohesion" : 0.555672019963264,
      "MetricsIntensity" : 0.05336890391166742,
      "Density" : 3.191082802547771,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc80f668-0947-4fdb-8103-321d98df5574",
    "objectives" : {
      "NumberOfConcerns" : 1.0030364372469636,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5571213937814885,
      "MetricsIntensity" : 0.05335641199484788,
      "Density" : 1.0010938924339106
    },
    "euclideanDistance" : 28.041424753924748,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6407284768211923,
      "LackOfCohesion" : 0.5571213937814885,
      "MetricsIntensity" : 0.053356411994847884,
      "Density" : 3.1795020266357845,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "526bec3c-7673-44e2-91f9-02d34e21a70a",
    "objectives" : {
      "NumberOfConcerns" : 1.0033738191632928,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5548470316907892,
      "MetricsIntensity" : 0.05344192922960334,
      "Density" : 1.0052871467639015
    },
    "euclideanDistance" : 28.041541907263355,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6430939226519337,
      "LackOfCohesion" : 0.5548470316907892,
      "MetricsIntensity" : 0.053441929229603335,
      "Density" : 3.1946697566628037,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "dc5093df-3d65-4c0d-895c-9901a36f712f",
    "objectives" : {
      "NumberOfConcerns" : 1.0016869095816465,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5542547624958584,
      "MetricsIntensity" : 0.05343537221679855,
      "Density" : 1.0047402005469461
    },
    "euclideanDistance" : 30.038690604222012,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412382531785514,
      "LackOfCohesion" : 0.5542547624958584,
      "MetricsIntensity" : 0.05343537221679856,
      "Density" : 3.196635730858469,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "662bd750-c6b5-4364-b67b-428a35891d1f",
    "objectives" : {
      "NumberOfConcerns" : 1.0040485829959513,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5544750201686686,
      "MetricsIntensity" : 0.05340705630674149,
      "Density" : 1.005834092980857
    },
    "euclideanDistance" : 31.037559676000193,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645107794361526,
      "LackOfCohesion" : 0.5544750201686686,
      "MetricsIntensity" : 0.05340705630674149,
      "Density" : 3.1982608695652175,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "32dcb089-4537-48ad-a34a-b2ca17c2ea35",
    "objectives" : {
      "NumberOfConcerns" : 1.002361673414305,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5551695009880787,
      "MetricsIntensity" : 0.05346628095652831,
      "Density" : 1.0051048313582498
    },
    "euclideanDistance" : 33.03522417760134,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6414364640883978,
      "LackOfCohesion" : 0.5551695009880787,
      "MetricsIntensity" : 0.053466280956528306,
      "Density" : 3.1940903823870217,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.LazyCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "202d7478-d21f-4fe3-ad35-eb4e1d9b0d0c",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5570958935766687,
      "MetricsIntensity" : 0.05346547669056473,
      "Density" : 1.0001823154056517
    },
    "euclideanDistance" : 34.03403596947951,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.639226519337017,
      "LackOfCohesion" : 0.5570958935766687,
      "MetricsIntensity" : 0.05346547669056473,
      "Density" : 3.1802898550724636,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "1062627f-b36b-4aa3-9986-b131de7680c8",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5563353451722354,
      "MetricsIntensity" : 0.053493506214997134,
      "Density" : 0.996718322698268
    },
    "euclideanDistance" : 35.03295367653482,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6392265193370175,
      "LackOfCohesion" : 0.5563353451722354,
      "MetricsIntensity" : 0.053493506214997134,
      "Density" : 3.1674391657010426,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter, org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.LazyCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "6e05f5db-4e1b-40c4-b440-f798ba6543af",
    "objectives" : {
      "NumberOfConcerns" : 0.9989878542510121,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5522934894982081,
      "MetricsIntensity" : 0.053521641736452984,
      "Density" : 1.0021877848678213
    },
    "euclideanDistance" : 35.03298802205937,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6377212389380527,
      "LackOfCohesion" : 0.5522934894982081,
      "MetricsIntensity" : 0.053521641736452984,
      "Density" : 3.1922183507549353,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.LazyCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.web.csrf.CsrfAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.AnnotationAwareOrderComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      } ]
    } ]
  }, {
    "solutionId" : "29738178-65f9-484b-bec9-9127e573e55e",
    "objectives" : {
      "NumberOfConcerns" : 1.0006747638326585,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5543923909341794,
      "MetricsIntensity" : 0.05348014106463108,
      "Density" : 1.0005469462169554
    },
    "euclideanDistance" : 37.0312389101846,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638674033149171,
      "LackOfCohesion" : 0.5543923909341794,
      "MetricsIntensity" : 0.05348014106463108,
      "Density" : 3.1832946635730854,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.web.csrf.CsrfAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.AnnotationAwareOrderComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      } ]
    } ]
  }, {
    "solutionId" : "3124b93a-71a4-4366-bc9d-8aecde3850da",
    "objectives" : {
      "NumberOfConcerns" : 1.0040485829959513,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5570635321903983,
      "MetricsIntensity" : 0.05339043768366606,
      "Density" : 1.0018231540565177
    },
    "euclideanDistance" : 38.03057892678933,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432909994478189,
      "LackOfCohesion" : 0.5570635321903983,
      "MetricsIntensity" : 0.05339043768366606,
      "Density" : 3.181818181818183,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "51ac3a08-3dfd-4aec-ad3b-dfe6fe6d60ed",
    "objectives" : {
      "NumberOfConcerns" : 1.0010121457489878,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5563808795375866,
      "MetricsIntensity" : 0.05344636943478344,
      "Density" : 0.9998176845943483
    },
    "euclideanDistance" : 39.02965637711771,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6392265193370168,
      "LackOfCohesion" : 0.5563808795375866,
      "MetricsIntensity" : 0.05344636943478344,
      "Density" : 3.1809744779582365,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "a0aeaeb2-e094-4163-8970-5f1fa63361d4",
    "objectives" : {
      "NumberOfConcerns" : 0.9996626180836707,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5558621981276466,
      "MetricsIntensity" : 0.053515167487972026,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 42.02741402248981,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6379215035931456,
      "LackOfCohesion" : 0.5558621981276466,
      "MetricsIntensity" : 0.053515167487972026,
      "Density" : 3.1712130005803836,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.web.csrf.CsrfAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.AnnotationAwareOrderComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      } ]
    } ]
  }, {
    "solutionId" : "a5fc6691-6948-4781-8961-69eaa6043d4c",
    "objectives" : {
      "NumberOfConcerns" : 1.002361673414305,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5558178793882557,
      "MetricsIntensity" : 0.05346047997436555,
      "Density" : 1.0051048313582498
    },
    "euclideanDistance" : 44.02643247169042,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6414364640883978,
      "LackOfCohesion" : 0.5558178793882557,
      "MetricsIntensity" : 0.05346047997436556,
      "Density" : 3.1977958236658934,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.principal(Object)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationProvider(AuthenticationProvider)', targetType='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.ldap.userdetails.Person.Essence.createTarget(), org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String), org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[]), org.springframework.security.ldap.userdetails.Person.Essence.addCn(String), org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "9c03f249-3397-4947-ba50-fa0b524d7284",
    "objectives" : {
      "NumberOfConcerns" : 1.0003373819163293,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5544628902360847,
      "MetricsIntensity" : 0.053540211206016874,
      "Density" : 1.004193254329991
    },
    "euclideanDistance" : 46.025203689071986,
    "generation" : 0,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6408411732152737,
      "LackOfCohesion" : 0.5544628902360847,
      "MetricsIntensity" : 0.05354021120601687,
      "Density" : 3.196749854904235,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createUserDetails()', targetType='org.springframework.security.ldap.userdetails.Person'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.csrf.LazyCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "de367d2c-896f-4b6d-b99a-6342332915d0",
    "objectives" : {
      "NumberOfConcerns" : 0.9993252361673415,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.556699132607191,
      "MetricsIntensity" : 0.05355292828032428,
      "Density" : 0.9961713764813127
    },
    "euclideanDistance" : 47.02450201947209,
    "generation" : 0,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638274336283186,
      "LackOfCohesion" : 0.556699132607191,
      "MetricsIntensity" : 0.053552928280324284,
      "Density" : 3.171213000580384,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcher.MatchResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2RedirectAuthenticationRequest.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.context, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.ANY_REQUEST, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequestConfigured, org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME], extractedMethods=[org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest(), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.chainRequestMatchers(List<RequestMatcher>), org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.crypto.password.Digester'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='org.springframework.security.web.csrf.CsrfAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.AnnotationAwareOrderComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry'"
      } ]
    } ]
  }, {
    "solutionId" : "3176cf78-afc1-429a-88f9-4826b0be5f2d",
    "objectives" : {
      "NumberOfConcerns" : 1.0003373819163293,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5570432714536805,
      "MetricsIntensity" : 0.05347725630985326,
      "Density" : 1.0
    },
    "euclideanDistance" : 47.02460879051386,
    "generation" : 0,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6390270867882808,
      "LackOfCohesion" : 0.5570432714536805,
      "MetricsIntensity" : 0.053477256309853255,
      "Density" : 3.1815545243619487,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.saml2.credentials.Saml2X509Credential'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.authorization.AuthenticatedAuthorizationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationCodeGrantWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.jackson2.UnmodifiableSetDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.server.jackson2.DefaultCsrfServerTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequestContext.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.saml2.provider.service.metadata.OpenSamlMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.requestMatchers(RequestMatcher...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.regexMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.RequestMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcherToExpression, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d0ac6851-5908-42b4-a148-ad20c141f548",
    "objectives" : {
      "NumberOfConcerns" : 0.9932523616734144,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5578625730932851,
      "MetricsIntensity" : 0.05369137140351211,
      "Density" : 0.9958067456700092
    },
    "euclideanDistance" : 58.01975762395524,
    "generation" : 0,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6310249307479232,
      "LackOfCohesion" : 0.5578625730932851,
      "MetricsIntensity" : 0.053691371403512114,
      "Density" : 3.1792782305005813,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.authentication.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.core.token.SecureRandomFactoryBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.core.token.SecureRandomFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.access.vote.RoleHierarchyVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.oauth2.core.AbstractOAuth2Token'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy', targetTypeName='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authorities(List<GrantedAuthority>)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.key(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.getKey()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.init(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.authenticationFilter(AnonymousAuthenticationFilter)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer.configure(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setGivenName(String)', targetType='org.springframework.security.messaging.util.matcher.OrMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setCn(String[])', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.addCn(String)', targetType='org.springframework.security.oauth2.client.endpoint.JwtBearerGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.createTarget()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.Essence.setDescription(String)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.rcp.RemoteAuthenticationManagerImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.authorization.AuthorityAuthorizationDecision'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.authorization.AuthorityAuthorizationDecision'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.oauth2.server.resource.BearerTokenError'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml4LogoutResponseResolver.LogoutResponseParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.HttpSessionLogoutRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.HttpSessionLogoutRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.HttpSessionLogoutRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator', targetTypeName='org.springframework.security.saml2.provider.service.web.authentication.logout.HttpSessionLogoutRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.createMvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.PortResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.setApplicationContext(ApplicationContext)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(String...)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.antMatchers(HttpMethod)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(String...)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.mvcMatchers(HttpMethod, String...)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.PathMatcherMessageMatcherBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.expressionHandler(SecurityExpressionHandler<Message<Object>>)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.containsMapping()', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.acls.domain.ObjectIdentityRetrievalStrategyImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      } ]
    } ]
  } ]
}