{
  "executionId" : "1d2aaf70-82ea-4bb7-89e2-f4e829450572",
  "computingTime" : 3322392,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 26,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.058064516129032,
    "meanNumConcerns" : 1.5551246537396124,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "e8f1d974-b805-4ac6-b6bd-de17ebe13ef8",
    "objectives" : {
      "NumberOfConcerns" : 1.0010687566797292,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5530079176351168,
      "MetricsIntensity" : 0.05337427564239341,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 10.114539666042097,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5524861878453038,
      "LackOfCohesion" : 0.5530079176351168,
      "MetricsIntensity" : 0.053374275642393415,
      "Density" : 3.040374488004682
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "87fc746b-d372-4f61-92b8-0792da9e4999",
    "objectives" : {
      "NumberOfConcerns" : 1.0010687566797292,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5529789982845119,
      "MetricsIntensity" : 0.053382318302029094,
      "Density" : 0.9967395473724587
    },
    "euclideanDistance" : 11.10424530642887,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5524861878453038,
      "LackOfCohesion" : 0.5529789982845119,
      "MetricsIntensity" : 0.053382318302029094,
      "Density" : 3.0409596255119955
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "27026131-30a1-4e2b-a075-9d5a1c19a572",
    "objectives" : {
      "NumberOfConcerns" : 1.0003562522265763,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5528610654199193,
      "MetricsIntensity" : 0.05337427564239341,
      "Density" : 0.9963559647103951
    },
    "euclideanDistance" : 13.088236780053316,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5513812154696127,
      "LackOfCohesion" : 0.5528610654199193,
      "MetricsIntensity" : 0.05337427564239341,
      "Density" : 3.0397893504973674
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.messaging.util.matcher.AndMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "14a8e344-49ca-40e7-ae40-d3e97a4d1a23",
    "objectives" : {
      "NumberOfConcerns" : 1.0003562522265763,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.552824471318577,
      "MetricsIntensity" : 0.053389126957444466,
      "Density" : 0.9961641733793632
    },
    "euclideanDistance" : 15.076522178097287,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551381215469613,
      "LackOfCohesion" : 0.552824471318577,
      "MetricsIntensity" : 0.05338912695744447,
      "Density" : 3.039204212990053
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.messaging.util.matcher.AndMessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "bfd5487e-1178-496d-a781-5200d48bffee",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5528361502870904,
      "MetricsIntensity" : 0.053389126957444466,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 16.071727946731322,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508287292817677,
      "LackOfCohesion" : 0.5528361502870904,
      "MetricsIntensity" : 0.053389126957444466,
      "Density" : 3.0386190754827385
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.messaging.util.matcher.AndMessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "5684beba-32fb-444e-a514-5a18b75a8e35",
    "objectives" : {
      "NumberOfConcerns" : 1.0003562522265763,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5527362302231417,
      "MetricsIntensity" : 0.053389864712453196,
      "Density" : 0.9963559647103951
    },
    "euclideanDistance" : 16.071770458093223,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551381215469613,
      "LackOfCohesion" : 0.5527362302231417,
      "MetricsIntensity" : 0.0533898647124532,
      "Density" : 3.0397893504973674
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.messaging.util.matcher.AndMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "d3180df0-7fcd-4c13-a572-18d1c3d3df18",
    "objectives" : {
      "NumberOfConcerns" : 1.0003562522265763,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5527556951706641,
      "MetricsIntensity" : 0.053372478878006724,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 16.07178296087541,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5513812154696134,
      "LackOfCohesion" : 0.5527556951706641,
      "MetricsIntensity" : 0.05337247887800673,
      "Density" : 3.0403744880046815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.messaging.util.matcher.AndMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "290bcc09-a1e8-49af-8c01-1e447413926e",
    "objectives" : {
      "NumberOfConcerns" : 1.0007125044531529,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.55270897929661,
      "MetricsIntensity" : 0.05337752467025027,
      "Density" : 0.9963559647103951
    },
    "euclideanDistance" : 16.07179165808585,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5519337016574586,
      "LackOfCohesion" : 0.55270897929661,
      "MetricsIntensity" : 0.05337752467025027,
      "Density" : 3.0397893504973674
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "0f267617-7068-4efd-88d7-28c6f491f95b",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5526895143490878,
      "MetricsIntensity" : 0.05338736409427263,
      "Density" : 0.9953970080552359
    },
    "euclideanDistance" : 17.067445813955818,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497237569060773,
      "LackOfCohesion" : 0.5526895143490878,
      "MetricsIntensity" : 0.053387364094272624,
      "Density" : 3.0368636629607946
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.messaging.util.matcher.AndMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "e17e2ee4-33a0-49b2-b326-477dd04306e0",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.552677835380574,
      "MetricsIntensity" : 0.05339716961708015,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 17.067456653047746,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497237569060776,
      "LackOfCohesion" : 0.552677835380574,
      "MetricsIntensity" : 0.05339716961708015,
      "Density" : 3.0374488004681104
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.messaging.util.matcher.AndMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "21f738ab-6668-466e-a50d-15f9305b1e61",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5525727246639526,
      "MetricsIntensity" : 0.05339540675390828,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 17.067485294934833,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550276243093923,
      "LackOfCohesion" : 0.5525727246639526,
      "MetricsIntensity" : 0.05339540675390829,
      "Density" : 3.0380339379754244
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "90bfed23-05fd-4383-931a-03df40f54f17",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.552677835380574,
      "MetricsIntensity" : 0.05338736409427262,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 17.06748867313752,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5502762430939225,
      "LackOfCohesion" : 0.552677835380574,
      "MetricsIntensity" : 0.05338736409427261,
      "Density" : 3.038033937975423
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.messaging.util.matcher.AndMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "b5fd8d30-e41a-43d6-8c82-655778fcfefa",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5527948413429038,
      "MetricsIntensity" : 0.05336818149543946,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 17.067492402421724,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5502762430939225,
      "LackOfCohesion" : 0.5527948413429038,
      "MetricsIntensity" : 0.053368181495439454,
      "Density" : 3.0380339379754244
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.web.method.annotation.OAuth2AuthorizedClientArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "0ea54c2b-30c7-4b7c-94c6-e5aefcd2a931",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.552649503068069,
      "MetricsIntensity" : 0.053365084215877635,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 17.067498876921604,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5502762430939225,
      "LackOfCohesion" : 0.552649503068069,
      "MetricsIntensity" : 0.05336508421587763,
      "Density" : 3.0403981264637006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "68ed0973-e15f-4203-9e54-12b9a452d569",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5527387822940392,
      "MetricsIntensity" : 0.053369482010614575,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 17.067511460312872,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508287292817675,
      "LackOfCohesion" : 0.5527387822940392,
      "MetricsIntensity" : 0.05336948201061458,
      "Density" : 3.0380339379754244
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.web.method.annotation.OAuth2AuthorizedClientArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "9cdb2cce-392e-46de-b38f-e59ef6505186",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.552696218942123,
      "MetricsIntensity" : 0.05336013883580378,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 18.063723120416487,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497237569060776,
      "LackOfCohesion" : 0.552696218942123,
      "MetricsIntensity" : 0.05336013883580378,
      "Density" : 3.0374488004681104
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "df7c7674-c1e4-4bb3-a62a-93e76bd55d48",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5526209544783693,
      "MetricsIntensity" : 0.05336818149543946,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 18.063731413130853,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.549723756906078,
      "LackOfCohesion" : 0.5526209544783693,
      "MetricsIntensity" : 0.05336818149543946,
      "Density" : 3.0380339379754244
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "a207c867-5bbd-42e3-9fb6-12836505e5d5",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5524753999263401,
      "MetricsIntensity" : 0.0533954067539083,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 18.06374675266175,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550276243093923,
      "LackOfCohesion" : 0.5524753999263401,
      "MetricsIntensity" : 0.05339540675390831,
      "Density" : 3.0380339379754244
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "9a583572-d36c-48c1-9542-8da4f9f0ba70",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5525482853409521,
      "MetricsIntensity" : 0.05336818149543946,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 18.063759475222614,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550276243093923,
      "LackOfCohesion" : 0.5525482853409521,
      "MetricsIntensity" : 0.053368181495439454,
      "Density" : 3.038619075482739
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "aeee0896-7024-4f1e-9379-deadbd862799",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5525482853409521,
      "MetricsIntensity" : 0.05336818149543946,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 18.063759475222614,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550276243093923,
      "LackOfCohesion" : 0.5525482853409521,
      "MetricsIntensity" : 0.05336818149543945,
      "Density" : 3.03861907548274
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "36988535-8dbd-4cda-b6bf-686261c29e88",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5525599643094657,
      "MetricsIntensity" : 0.05336818149543946,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 19.06038628046555,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497237569060773,
      "LackOfCohesion" : 0.5525599643094657,
      "MetricsIntensity" : 0.05336818149543946,
      "Density" : 3.0380339379754235
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "03da4a5b-c5b9-4b86-8047-1d72eaf018fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5525807269201564,
      "MetricsIntensity" : 0.05336818149543945,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 19.060415583895992,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550276243093923,
      "LackOfCohesion" : 0.5525807269201564,
      "MetricsIntensity" : 0.053368181495439454,
      "Density" : 3.038619075482738
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.web.method.annotation.OAuth2AuthorizedClientArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "de097dae-50a0-4f5c-aa2c-5c27b5af5ff9",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5526012732536523,
      "MetricsIntensity" : 0.05339540675390829,
      "Density" : 0.995205216724204
    },
    "euclideanDistance" : 20.057330736888705,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5491712707182312,
      "LackOfCohesion" : 0.5526012732536523,
      "MetricsIntensity" : 0.05339540675390829,
      "Density" : 3.036278525453481
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.messaging.util.matcher.AndMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.web.method.annotation.OAuth2AuthorizedClientArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "eca6a877-ca6a-4cf3-8e62-4973bc5f03f4",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5525962988781743,
      "MetricsIntensity" : 0.05336818149543944,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 20.057367309508734,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.549723756906078,
      "LackOfCohesion" : 0.5525962988781743,
      "MetricsIntensity" : 0.05336818149543945,
      "Density" : 3.0374488004681104
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.web.method.annotation.OAuth2AuthorizedClientArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "fe43abf2-b57b-4db4-98ef-3b7ec75b5bc3",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5524509606033396,
      "MetricsIntensity" : 0.05337752467025025,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 20.05740012644403,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5502762430939232,
      "LackOfCohesion" : 0.5524509606033396,
      "MetricsIntensity" : 0.05337752467025025,
      "Density" : 3.038619075482738
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "855d7a1a-167b-4e9f-a3b8-ef05ba446c4b",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5525340110461022,
      "MetricsIntensity" : 0.05338736409427262,
      "Density" : 0.9957805907172996
    },
    "euclideanDistance" : 20.057410676078227,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508287292817675,
      "LackOfCohesion" : 0.5525340110461022,
      "MetricsIntensity" : 0.05338736409427261,
      "Density" : 3.0380339379754235
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.authorization.AuthorityReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.web.method.annotation.OAuth2AuthorizedClientArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.acls.afterinvocation.AbstractAclProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.taglibs.csrf.CsrfInputTag'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>), org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  } ]
}