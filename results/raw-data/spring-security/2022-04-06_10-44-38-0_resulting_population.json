{
  "executionId" : "ef4fea07-c9ba-4673-aceb-49917abb6627",
  "computingTime" : 3339485,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 25,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1561403508771924,
    "meanNumConcerns" : 1.6132963988919662,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "b95a6b3e-e129-4623-bf58-a114c9effde1",
    "objectives" : {
      "NumberOfConcerns" : 1.0030906593406594,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5526848378394816,
      "MetricsIntensity" : 0.053331660746024315,
      "Density" : 0.9975912544005929
    },
    "euclideanDistance" : 9.127413871285153,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6129210381004975,
      "LackOfCohesion" : 0.5526848378394816,
      "MetricsIntensity" : 0.05333166074602432,
      "Density" : 3.137529137529137
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.permissionCacheOptimizer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "0edbe265-cda7-4608-91e2-e8db5f230e3c",
    "objectives" : {
      "NumberOfConcerns" : 1.0027472527472527,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5527356729883561,
      "MetricsIntensity" : 0.053336073089900786,
      "Density" : 0.9972206781545303
    },
    "euclideanDistance" : 10.114757169340136,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6123688569850911,
      "LackOfCohesion" : 0.5527356729883561,
      "MetricsIntensity" : 0.05333607308990079,
      "Density" : 3.1363636363636362
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.permissionCacheOptimizer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "b8cb391d-19b4-491a-8ce2-eba5c1d00c52",
    "objectives" : {
      "NumberOfConcerns" : 1.0027472527472527,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5526975466267003,
      "MetricsIntensity" : 0.053316081864899244,
      "Density" : 0.9974059662775616
    },
    "euclideanDistance" : 10.114773249909799,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6123688569850905,
      "LackOfCohesion" : 0.5526975466267003,
      "MetricsIntensity" : 0.053316081864899244,
      "Density" : 3.136946386946387
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.permissionCacheOptimizer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "6cf19a32-f8df-4cd2-8cdc-b00fc49c31ab",
    "objectives" : {
      "NumberOfConcerns" : 1.0027472527472527,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5526975466267003,
      "MetricsIntensity" : 0.053316081864899244,
      "Density" : 0.9974059662775616
    },
    "euclideanDistance" : 10.114773249909799,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6123688569850911,
      "LackOfCohesion" : 0.5526975466267003,
      "MetricsIntensity" : 0.05331608186489925,
      "Density" : 3.136946386946387
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.permissionCacheOptimizer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "a686b80c-0266-4fc4-b94c-d1ef41d0d0e6",
    "objectives" : {
      "NumberOfConcerns" : 1.0020604395604396,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5514756010583497,
      "MetricsIntensity" : 0.05331515874125536,
      "Density" : 0.9966648137854364
    },
    "euclideanDistance" : 12.095636970423852,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6112644947542794,
      "LackOfCohesion" : 0.5514756010583497,
      "MetricsIntensity" : 0.05331515874125535,
      "Density" : 3.1346153846153846
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.permissionCacheOptimizer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "b8d49c49-6e04-4c90-bce7-4d29b49d4763",
    "objectives" : {
      "NumberOfConcerns" : 1.0024038461538463,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.552691494823263,
      "MetricsIntensity" : 0.05329557825948999,
      "Density" : 0.9968501019084677
    },
    "euclideanDistance" : 12.095736104246443,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6118166758696848,
      "LackOfCohesion" : 0.552691494823263,
      "MetricsIntensity" : 0.05329557825948998,
      "Density" : 3.1351981351981357
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.permissionCacheOptimizer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5afabb8b-90cf-4fab-b915-feee55e8f5de",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5511518591719018,
      "MetricsIntensity" : 0.05342313317173773,
      "Density" : 0.9968501019084677
    },
    "euclideanDistance" : 14.081768919244192,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557524,
      "LackOfCohesion" : 0.5511518591719018,
      "MetricsIntensity" : 0.05342313317173773,
      "Density" : 3.142523364485981
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "b0497172-0431-46a2-aa18-b3a1d906c737",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.551170480221957,
      "MetricsIntensity" : 0.05340126960791515,
      "Density" : 0.997035390031499
    },
    "euclideanDistance" : 14.081782682925107,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557526,
      "LackOfCohesion" : 0.551170480221957,
      "MetricsIntensity" : 0.05340126960791516,
      "Density" : 3.143107476635514
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "2c0963a7-89ed-472b-acb2-5962353a55d5",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5510809139634322,
      "MetricsIntensity" : 0.05341818260758064,
      "Density" : 0.9975912544005929
    },
    "euclideanDistance" : 14.081842950022294,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.607853982300885,
      "LackOfCohesion" : 0.5510809139634322,
      "MetricsIntensity" : 0.05341818260758065,
      "Density" : 3.1448598130841128
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5db3586e-f636-40c4-b232-76c4abeb1b0f",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5510692716728114,
      "MetricsIntensity" : 0.05340935674710339,
      "Density" : 0.997035390031499
    },
    "euclideanDistance" : 15.076355422874446,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557524,
      "LackOfCohesion" : 0.5510692716728114,
      "MetricsIntensity" : 0.053409356747103384,
      "Density" : 3.143107476635514
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "ac8f184e-808e-4b54-9cb6-33b513642a49",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.551001633933268,
      "MetricsIntensity" : 0.0534329515374042,
      "Density" : 0.9974059662775616
    },
    "euclideanDistance" : 15.07637754597448,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557526,
      "LackOfCohesion" : 0.551001633933268,
      "MetricsIntensity" : 0.0534329515374042,
      "Density" : 3.146113383985973
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "f6b9d7a0-40b0-4927-b68e-2725a3d29770",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5510248689024755,
      "MetricsIntensity" : 0.053426697461545866,
      "Density" : 0.9974059662775616
    },
    "euclideanDistance" : 15.076378373004806,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557522,
      "LackOfCohesion" : 0.5510248689024755,
      "MetricsIntensity" : 0.05342669746154586,
      "Density" : 3.146113383985973
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "b5de7e2b-5263-4925-b0fc-95e078d4fcab",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5510248689024754,
      "MetricsIntensity" : 0.05341967201194764,
      "Density" : 0.9974059662775616
    },
    "euclideanDistance" : 15.076401082862617,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6078539823008853,
      "LackOfCohesion" : 0.5510248689024754,
      "MetricsIntensity" : 0.05341967201194764,
      "Density" : 3.146113383985974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "d9736306-6a8c-43cb-84c3-628ba9edd615",
    "objectives" : {
      "NumberOfConcerns" : 0.9989697802197802,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5508420485575725,
      "MetricsIntensity" : 0.05344283779430513,
      "Density" : 0.9983324068927182
    },
    "euclideanDistance" : 15.076501295586294,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6089601769911506,
      "LackOfCohesion" : 0.5508420485575725,
      "MetricsIntensity" : 0.05344283779430512,
      "Density" : 3.149035651665693
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "b96b92d7-37d2-4129-a86a-d352cb7399a7",
    "objectives" : {
      "NumberOfConcerns" : 0.9975961538461539,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5511531160100938,
      "MetricsIntensity" : 0.05344054177741466,
      "Density" : 0.9975912544005929
    },
    "euclideanDistance" : 16.07162132598383,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106193,
      "LackOfCohesion" : 0.5511531160100938,
      "MetricsIntensity" : 0.05344054177741467,
      "Density" : 3.1466978375219177
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "e0c3b730-315e-4f72-aa34-1412f4a91f4c",
    "objectives" : {
      "NumberOfConcerns" : 0.9975961538461539,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5511549351180034,
      "MetricsIntensity" : 0.053434287701556324,
      "Density" : 0.9975912544005929
    },
    "euclideanDistance" : 16.0716213675731,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106195,
      "LackOfCohesion" : 0.5511549351180034,
      "MetricsIntensity" : 0.05343428770155632,
      "Density" : 3.1466978375219172
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "4a65140d-1b74-4cbc-b0ac-84343cc3142c",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5507978938474061,
      "MetricsIntensity" : 0.053449367637891924,
      "Density" : 0.9977765425236242
    },
    "euclideanDistance" : 16.071641999181924,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557526,
      "LackOfCohesion" : 0.5507978938474061,
      "MetricsIntensity" : 0.053449367637891924,
      "Density" : 3.14728229105786
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "d2d46bc3-e9b8-4035-8e77-f90a71d00593",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5509943575016301,
      "MetricsIntensity" : 0.05342493228945042,
      "Density" : 0.9977765425236242
    },
    "euclideanDistance" : 16.071669979080188,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6078539823008853,
      "LackOfCohesion" : 0.5509943575016301,
      "MetricsIntensity" : 0.053424932289450416,
      "Density" : 3.1472822910578606
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "8f51c016-b4de-4487-bd71-af1b88a69785",
    "objectives" : {
      "NumberOfConcerns" : 0.9975961538461539,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5512459850125895,
      "MetricsIntensity" : 0.053393216414344136,
      "Density" : 0.9968501019084677
    },
    "euclideanDistance" : 17.067385013041545,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106198,
      "LackOfCohesion" : 0.5512459850125895,
      "MetricsIntensity" : 0.05339321641434413,
      "Density" : 3.142523364485981
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5b8b4fd5-49ab-4f5c-8f3d-0d41e924b476",
    "objectives" : {
      "NumberOfConcerns" : 0.9975961538461539,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5514479059905418,
      "MetricsIntensity" : 0.05342309922612053,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 19.060205378445826,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106195,
      "LackOfCohesion" : 0.5514479059905418,
      "MetricsIntensity" : 0.05342309922612053,
      "Density" : 3.1355140186915893
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "cf6b277b-b90c-4f0b-be32-e8c6389af40b",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.551136578665462,
      "MetricsIntensity" : 0.0534548151012268,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 19.06024345431387,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557524,
      "LackOfCohesion" : 0.551136578665462,
      "MetricsIntensity" : 0.0534548151012268,
      "Density" : 3.137266355140187
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "48b8fdfe-cfad-4f63-9610-001ffa837bd0",
    "objectives" : {
      "NumberOfConcerns" : 0.9975961538461539,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5511276484993611,
      "MetricsIntensity" : 0.05344679585327301,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 20.05719518010707,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106198,
      "LackOfCohesion" : 0.5511276484993611,
      "MetricsIntensity" : 0.05344679585327301,
      "Density" : 3.1373465809468146
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "99090f03-1651-4d0d-944e-225346b63528",
    "objectives" : {
      "NumberOfConcerns" : 0.9975961538461539,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5511813771508306,
      "MetricsIntensity" : 0.05344679585327299,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 20.057196656524255,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106198,
      "LackOfCohesion" : 0.5511813771508306,
      "MetricsIntensity" : 0.05344679585327299,
      "Density" : 3.137346580946815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "8cdb7f5c-19f1-4199-a378-5f24ace18dc4",
    "objectives" : {
      "NumberOfConcerns" : 0.9975961538461539,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5511749453050077,
      "MetricsIntensity" : 0.053446795853273006,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 21.054480060744833,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106198,
      "LackOfCohesion" : 0.5511749453050077,
      "MetricsIntensity" : 0.053446795853273006,
      "Density" : 3.1373465809468155
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "4fa8efda-939b-4e84-9435-4f4bc2e02b1f",
    "objectives" : {
      "NumberOfConcerns" : 0.9965659340659341,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5512497886018549,
      "MetricsIntensity" : 0.05344316367223043,
      "Density" : 0.994070780062998
    },
    "euclideanDistance" : 23.049686611272886,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6050884955752216,
      "LackOfCohesion" : 0.5512497886018549,
      "MetricsIntensity" : 0.05344316367223043,
      "Density" : 3.1355932203389836
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.DefaultRedirectStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.header.writers.StaticHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.DelegatingReactiveOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.acls.afterinvocation.ArrayFilterer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterStream(Stream<?>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeAuthorizationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  } ]
}