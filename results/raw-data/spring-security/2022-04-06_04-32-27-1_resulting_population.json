{
  "executionId" : "0ee8fd02-8600-4b69-8ddb-167e9ab39afb",
  "computingTime" : 4542206,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 30,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1561403508771924,
    "meanNumConcerns" : 1.6132963988919662,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "d45105bd-0033-4af9-b1cf-d45de82a0e90",
    "objectives" : {
      "NumberOfConcerns" : 1.0030906593406594,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5521107006224092,
      "MetricsIntensity" : 0.053377502239352795,
      "Density" : 0.9974059662775616
    },
    "euclideanDistance" : 9.12735914248528,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6147042564953016,
      "LackOfCohesion" : 0.5521107006224092,
      "MetricsIntensity" : 0.05337750223935279,
      "Density" : 3.1406067677946323
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer'"
      } ]
    } ]
  }, {
    "solutionId" : "c6ef16e1-ea75-418e-a6af-6901c5837b7d",
    "objectives" : {
      "NumberOfConcerns" : 1.0030906593406594,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5520016255787793,
      "MetricsIntensity" : 0.05339575561400108,
      "Density" : 1.0007411524921253
    },
    "euclideanDistance" : 9.12771771181093,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6147042564953014,
      "LackOfCohesion" : 0.5520016255787793,
      "MetricsIntensity" : 0.05339575561400108,
      "Density" : 3.1492711370262385
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.AssertionToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "67912312-9eca-471f-bbbe-f41e214a30e6",
    "objectives" : {
      "NumberOfConcerns" : 1.0024038461538463,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5520301775754942,
      "MetricsIntensity" : 0.05335255367756804,
      "Density" : 0.9962942375393737
    },
    "euclideanDistance" : 10.114593392246478,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6135986733001655,
      "LackOfCohesion" : 0.5520301775754942,
      "MetricsIntensity" : 0.05335255367756804,
      "Density" : 3.1371061843640624
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer'"
      } ]
    } ]
  }, {
    "solutionId" : "ef1bd5cd-7a04-45b7-b8b4-9cb2e3798551",
    "objectives" : {
      "NumberOfConcerns" : 1.003434065934066,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5517589336067026,
      "MetricsIntensity" : 0.05338195428194994,
      "Density" : 0.9977765425236242
    },
    "euclideanDistance" : 10.114827013219015,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6152570480928692,
      "LackOfCohesion" : 0.5517589336067026,
      "MetricsIntensity" : 0.05338195428194994,
      "Density" : 3.1399416909621
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "4ad9faa7-d388-4fd5-9164-556b82017b1d",
    "objectives" : {
      "NumberOfConcerns" : 1.0030906593406594,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5518785266009684,
      "MetricsIntensity" : 0.053395755614001075,
      "Density" : 1.0007411524921253
    },
    "euclideanDistance" : 10.115092423699775,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6147042564953016,
      "LackOfCohesion" : 0.5518785266009684,
      "MetricsIntensity" : 0.053395755614001075,
      "Density" : 3.1492711370262385
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.AssertionToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "1cee10de-9888-4dd0-a159-882c8f85d8e4",
    "objectives" : {
      "NumberOfConcerns" : 1.0024038461538463,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5506359806479922,
      "MetricsIntensity" : 0.053448637760267835,
      "Density" : 0.9977765425236242
    },
    "euclideanDistance" : 11.104342764867132,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6144911504424777,
      "LackOfCohesion" : 0.5506359806479922,
      "MetricsIntensity" : 0.05344863776026784,
      "Density" : 3.1417736289381564
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "37b88600-2b6a-4571-a515-beed8967d21e",
    "objectives" : {
      "NumberOfConcerns" : 1.0024038461538463,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5506605386047704,
      "MetricsIntensity" : 0.053432531373125806,
      "Density" : 0.9977765425236242
    },
    "euclideanDistance" : 11.104343905147203,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.614491150442478,
      "LackOfCohesion" : 0.5506605386047704,
      "MetricsIntensity" : 0.05343253137312581,
      "Density" : 3.1417736289381564
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "56abe9f3-b4e2-43a2-aa9f-b2ca1a7bad2b",
    "objectives" : {
      "NumberOfConcerns" : 1.0024038461538463,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5506738608950486,
      "MetricsIntensity" : 0.05342807641498014,
      "Density" : 0.9979618306466556
    },
    "euclideanDistance" : 11.104361194892487,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6144911504424777,
      "LackOfCohesion" : 0.5506738608950486,
      "MetricsIntensity" : 0.05342807641498013,
      "Density" : 3.142357059509918
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "9c99b4d0-041a-47ff-9f02-6ee82033256e",
    "objectives" : {
      "NumberOfConcerns" : 1.003434065934066,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.55175526067156,
      "MetricsIntensity" : 0.05339755355428074,
      "Density" : 0.9979618306466556
    },
    "euclideanDistance" : 11.10450777416581,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6152570480928694,
      "LackOfCohesion" : 0.55175526067156,
      "MetricsIntensity" : 0.05339755355428074,
      "Density" : 3.1405247813411084
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "b86d3410-bb04-4a66-a963-e3e969798663",
    "objectives" : {
      "NumberOfConcerns" : 1.0024038461538463,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5518517619684138,
      "MetricsIntensity" : 0.05337080705221632,
      "Density" : 0.9996294237539374
    },
    "euclideanDistance" : 11.104569386781808,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.613598673300166,
      "LackOfCohesion" : 0.5518517619684138,
      "MetricsIntensity" : 0.05337080705221632,
      "Density" : 3.1457725947521857
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.AssertionToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "6fbe1e62-5a28-454f-b46f-75733419b6d0",
    "objectives" : {
      "NumberOfConcerns" : 1.0030906593406594,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5518504787326065,
      "MetricsIntensity" : 0.0533957556140011,
      "Density" : 1.0007411524921253
    },
    "euclideanDistance" : 11.10473159435845,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6147042564953016,
      "LackOfCohesion" : 0.5518504787326065,
      "MetricsIntensity" : 0.0533957556140011,
      "Density" : 3.1492711370262385
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.AssertionToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "95ad9e9d-7adb-4ef0-9a2b-4dcd1d643db8",
    "objectives" : {
      "NumberOfConcerns" : 1.0020604395604396,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5518202081165064,
      "MetricsIntensity" : 0.053379711137410635,
      "Density" : 0.9961089494163424
    },
    "euclideanDistance" : 12.095607181918824,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.613045881702598,
      "LackOfCohesion" : 0.5518202081165064,
      "MetricsIntensity" : 0.05337971113741063,
      "Density" : 3.1346938775510207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.AssertionToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.access.vote.AuthenticatedVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "7c2c893d-31a2-4620-ad4f-1ccdbcf4daea",
    "objectives" : {
      "NumberOfConcerns" : 1.0013736263736264,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5508057462184859,
      "MetricsIntensity" : 0.05346560087013019,
      "Density" : 0.9974059662775616
    },
    "euclideanDistance" : 12.095611325671243,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6128318584070793,
      "LackOfCohesion" : 0.5508057462184859,
      "MetricsIntensity" : 0.0534656008701302,
      "Density" : 3.140606767794632
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.ldap.search.FilterBasedLdapUserSearch'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.ResponseToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "269d1494-a46e-4834-8cd6-fc13b2e553e0",
    "objectives" : {
      "NumberOfConcerns" : 1.0027472527472527,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5517017837834224,
      "MetricsIntensity" : 0.05336590980535947,
      "Density" : 0.9966648137854364
    },
    "euclideanDistance" : 12.095704426881852,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6141514648977335,
      "LackOfCohesion" : 0.5517017837834224,
      "MetricsIntensity" : 0.05336590980535947,
      "Density" : 3.1364431486880475
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.access.vote.AuthenticatedVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "0076b325-da3b-47ac-9183-4989b5b4fa45",
    "objectives" : {
      "NumberOfConcerns" : 1.0024038461538463,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5506359806479922,
      "MetricsIntensity" : 0.05343253137312582,
      "Density" : 0.9977765425236242
    },
    "euclideanDistance" : 12.095719346867616,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.614491150442478,
      "LackOfCohesion" : 0.5506359806479922,
      "MetricsIntensity" : 0.05343253137312582,
      "Density" : 3.141773628938156
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "9f87d830-b94c-45ed-ac0d-220d3f60932e",
    "objectives" : {
      "NumberOfConcerns" : 1.0024038461538463,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5506650252280596,
      "MetricsIntensity" : 0.05342362145683447,
      "Density" : 0.9979618306466556
    },
    "euclideanDistance" : 12.09573591558408,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.614491150442478,
      "LackOfCohesion" : 0.5506650252280596,
      "MetricsIntensity" : 0.05342362145683447,
      "Density" : 3.1423570595099175
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "c5298251-a52a-4edd-80a8-d457184a0d33",
    "objectives" : {
      "NumberOfConcerns" : 1.0024038461538463,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.551777969362366,
      "MetricsIntensity" : 0.05337080705221633,
      "Density" : 0.9994441356309061
    },
    "euclideanDistance" : 12.095908788575999,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6135986733001653,
      "LackOfCohesion" : 0.551777969362366,
      "MetricsIntensity" : 0.05337080705221633,
      "Density" : 3.1451895043731777
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.AssertionToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer'"
      } ]
    } ]
  }, {
    "solutionId" : "11fabb3d-8a4d-4557-9787-69f6c2cc511a",
    "objectives" : {
      "NumberOfConcerns" : 1.0013736263736264,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5508375806069019,
      "MetricsIntensity" : 0.05345079670152305,
      "Density" : 0.9975912544005929
    },
    "euclideanDistance" : 13.088323669528123,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6128318584070793,
      "LackOfCohesion" : 0.5508375806069019,
      "MetricsIntensity" : 0.05345079670152305,
      "Density" : 3.141190198366394
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.ResponseToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "3512ef05-45a2-462d-abb6-9fbd8b0ca594",
    "objectives" : {
      "NumberOfConcerns" : 1.0027472527472527,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5516466897562828,
      "MetricsIntensity" : 0.05337260499249593,
      "Density" : 0.9966648137854364
    },
    "euclideanDistance" : 13.088392013888217,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.614151464897733,
      "LackOfCohesion" : 0.5516466897562828,
      "MetricsIntensity" : 0.05337260499249593,
      "Density" : 3.136443148688047
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "69afd4cc-5f06-4d54-8e42-2d23a3b54eca",
    "objectives" : {
      "NumberOfConcerns" : 1.0027472527472527,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5516466897562828,
      "MetricsIntensity" : 0.05337260499249593,
      "Density" : 0.9966648137854364
    },
    "euclideanDistance" : 13.088392013888217,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6141514648977333,
      "LackOfCohesion" : 0.5516466897562828,
      "MetricsIntensity" : 0.05337260499249594,
      "Density" : 3.136443148688048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "ae78ca01-430d-4930-b093-0571472411c9",
    "objectives" : {
      "NumberOfConcerns" : 1.0027472527472527,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5516466897562826,
      "MetricsIntensity" : 0.053372604992495964,
      "Density" : 0.9966648137854364
    },
    "euclideanDistance" : 13.088392013888217,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.614151464897734,
      "LackOfCohesion" : 0.5516466897562826,
      "MetricsIntensity" : 0.053372604992495964,
      "Density" : 3.1364431486880475
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "09efe5b1-d5c1-41fd-90a7-67f4b2fbb8e3",
    "objectives" : {
      "NumberOfConcerns" : 1.0027472527472527,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5517017837834225,
      "MetricsIntensity" : 0.053365909805359456,
      "Density" : 0.9966648137854364
    },
    "euclideanDistance" : 13.08839430879469,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6141514648977333,
      "LackOfCohesion" : 0.5517017837834225,
      "MetricsIntensity" : 0.05336590980535946,
      "Density" : 3.136443148688047
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.access.vote.AuthenticatedVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "f035c6ac-7bdd-4e57-9663-f98adce2a4da",
    "objectives" : {
      "NumberOfConcerns" : 1.0027472527472527,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5517017837834225,
      "MetricsIntensity" : 0.053365909805359456,
      "Density" : 0.9966648137854364
    },
    "euclideanDistance" : 13.08839430879469,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6141514648977344,
      "LackOfCohesion" : 0.5517017837834225,
      "MetricsIntensity" : 0.053365909805359456,
      "Density" : 3.136443148688048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.access.vote.AuthenticatedVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "c24d54eb-fece-415e-929c-7a6018211351",
    "objectives" : {
      "NumberOfConcerns" : 1.0024038461538463,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5506404672712818,
      "MetricsIntensity" : 0.05342362145683447,
      "Density" : 0.9979618306466556
    },
    "euclideanDistance" : 13.088422376044331,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6144911504424777,
      "LackOfCohesion" : 0.5506404672712818,
      "MetricsIntensity" : 0.05342362145683448,
      "Density" : 3.1423570595099175
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "1e02f34b-3127-4d07-9baf-71ddd5a5168f",
    "objectives" : {
      "NumberOfConcerns" : 1.0006868131868132,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5536955630432358,
      "MetricsIntensity" : 0.053380627923774404,
      "Density" : 0.9953677969242172
    },
    "euclideanDistance" : 14.081958649889973,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.610834715312327,
      "LackOfCohesion" : 0.5536955630432358,
      "MetricsIntensity" : 0.0533806279237744,
      "Density" : 3.136018680677174
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.ResponseToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "9169550a-9943-4593-89c3-a29adaa36f21",
    "objectives" : {
      "NumberOfConcerns" : 1.0010302197802199,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5536441419512388,
      "MetricsIntensity" : 0.05337662108543698,
      "Density" : 0.9957383731702798
    },
    "euclideanDistance" : 14.082007218728176,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6113875069098946,
      "LackOfCohesion" : 0.5536441419512388,
      "MetricsIntensity" : 0.053376621085436976,
      "Density" : 3.137186223000584
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.ResponseToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "05d4471d-9e6e-430a-bfa9-a04b0ef26dda",
    "objectives" : {
      "NumberOfConcerns" : 1.0010302197802199,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5536441419512388,
      "MetricsIntensity" : 0.05337662108543698,
      "Density" : 0.9957383731702798
    },
    "euclideanDistance" : 14.082007218728176,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6113875069098944,
      "LackOfCohesion" : 0.5536441419512388,
      "MetricsIntensity" : 0.05337662108543697,
      "Density" : 3.137186223000584
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.targetUrlParameter, org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy], extractedMethods=[org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter(), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String), org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.ResponseToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.server.header.HttpHeaderWriterWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "3644703d-9145-49d5-ae78-20371cfd8545",
    "objectives" : {
      "NumberOfConcerns" : 1.0013736263736264,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5508084748803501,
      "MetricsIntensity" : 0.053436986331271474,
      "Density" : 0.997035390031499
    },
    "euclideanDistance" : 14.082012434168636,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61283185840708,
      "LackOfCohesion" : 0.5508084748803501,
      "MetricsIntensity" : 0.053436986331271474,
      "Density" : 3.1394399066511083
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.ResponseToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "29fe3db7-c719-41bf-b858-99d521bc571c",
    "objectives" : {
      "NumberOfConcerns" : 1.0013736263736264,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5508084748803501,
      "MetricsIntensity" : 0.053436986331271474,
      "Density" : 0.997035390031499
    },
    "euclideanDistance" : 14.082012434168636,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.612831858407079,
      "LackOfCohesion" : 0.5508084748803501,
      "MetricsIntensity" : 0.053436986331271474,
      "Density" : 3.1394399066511087
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.ResponseToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "13aeeef0-b7af-49b8-a80d-8c636eba03af",
    "objectives" : {
      "NumberOfConcerns" : 1.0013736263736264,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5507839169235722,
      "MetricsIntensity" : 0.05343698633127146,
      "Density" : 0.997035390031499
    },
    "euclideanDistance" : 15.076572791693135,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6128318584070795,
      "LackOfCohesion" : 0.5507839169235722,
      "MetricsIntensity" : 0.05343698633127147,
      "Density" : 3.1394399066511087
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSaml4AuthenticationProvider.ResponseToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.util.matcher.MediaTypeRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.converter.RsaKeyConverters.X509PemDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.crypto.codec.Base64'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    } ]
  } ]
}