{
  "executionId" : "2332f244-dbb8-48e2-8ffd-392a3835a0ca",
  "computingTime" : 3751683,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 25,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.058064516129032,
    "meanNumConcerns" : 1.5551246537396124,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "c396591d-4137-4f80-a482-097853fa8cfd",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.551970302635432,
      "MetricsIntensity" : 0.05353542853103959,
      "Density" : 0.997698504027618
    },
    "euclideanDistance" : 13.08822046959764,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.552296624239071,
      "LackOfCohesion" : 0.551970302635432,
      "MetricsIntensity" : 0.05353542853103959,
      "Density" : 3.047451669595783
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "7ce0fc7b-9c66-4581-b05b-5133571cf6e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5519229748358105,
      "MetricsIntensity" : 0.05353935521589309,
      "Density" : 0.9969313387034906
    },
    "euclideanDistance" : 14.081825101080582,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550636413945766,
      "LackOfCohesion" : 0.5519229748358105,
      "MetricsIntensity" : 0.053539355215893085,
      "Density" : 3.0451083772700644
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "ff68027d-d005-4132-b847-d94b2aeef70d",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5545899204724578,
      "MetricsIntensity" : 0.053450254640130035,
      "Density" : 0.9961641733793632
    },
    "euclideanDistance" : 14.082001632223147,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5516860143725815,
      "LackOfCohesion" : 0.5545899204724578,
      "MetricsIntensity" : 0.053450254640130035,
      "Density" : 3.0409836065573774
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.Md4PasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "c1f6129a-9ab0-49f3-8b67-c14e9e1cc2af",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5519086924820789,
      "MetricsIntensity" : 0.05355187156430161,
      "Density" : 1.0
    },
    "euclideanDistance" : 14.08206742707274,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5511898173768677,
      "LackOfCohesion" : 0.5519086924820789,
      "MetricsIntensity" : 0.05355187156430161,
      "Density" : 3.0544815465729354
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "f17f2823-e303-44dd-90eb-11fbe0e5bd0e",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5518213180827778,
      "MetricsIntensity" : 0.05355367186099052,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 15.076346100271646,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550083010514665,
      "LackOfCohesion" : 0.5518213180827778,
      "MetricsIntensity" : 0.05355367186099051,
      "Density" : 3.0439367311072054
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "8d5bcfb9-d8e4-4288-a992-51ca442ab8cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5518213180827778,
      "MetricsIntensity" : 0.05355367186099052,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 15.076346100271646,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5500830105146661,
      "LackOfCohesion" : 0.5518213180827778,
      "MetricsIntensity" : 0.05355367186099052,
      "Density" : 3.0439367311072045
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "40e5cd14-9d27-4c34-8cb4-57a0fef63eee",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5519146498274857,
      "MetricsIntensity" : 0.05355187156430165,
      "Density" : 0.9969313387034906
    },
    "euclideanDistance" : 15.076398453488713,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550636413945766,
      "LackOfCohesion" : 0.5519146498274857,
      "MetricsIntensity" : 0.05355187156430165,
      "Density" : 3.0451083772700644
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "cf1dea43-4632-4a55-bbb3-fade645c080b",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5546023861917296,
      "MetricsIntensity" : 0.05344710396383052,
      "Density" : 0.9961641733793632
    },
    "euclideanDistance" : 15.07654042154495,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5511332227750136,
      "LackOfCohesion" : 0.5546023861917296,
      "MetricsIntensity" : 0.053447103963830525,
      "Density" : 3.040983606557377
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.cas.authentication.EhCacheBasedTicketCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "ecebd88b-3d4b-490a-a643-69c08054d9b6",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5545553800419749,
      "MetricsIntensity" : 0.053433747836039096,
      "Density" : 0.9963559647103951
    },
    "euclideanDistance" : 15.076551318714031,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5511332227750134,
      "LackOfCohesion" : 0.5545553800419749,
      "MetricsIntensity" : 0.053433747836039096,
      "Density" : 3.041569086651054
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.web.savedrequest.FastHttpDateFormat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.cas.authentication.EhCacheBasedTicketCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "13603b77-99d7-4cf2-92d7-94f4abefef9d",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5520671016182075,
      "MetricsIntensity" : 0.053547361926234535,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 16.071626970700727,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550636413945766,
      "LackOfCohesion" : 0.5520671016182075,
      "MetricsIntensity" : 0.053547361926234535,
      "Density" : 3.043936731107205
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "4998244b-4a73-4130-9e15-d8f467f00ea3",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.552183774179179,
      "MetricsIntensity" : 0.053535376770487905,
      "Density" : 0.9973149213655543
    },
    "euclideanDistance" : 16.071700657436626,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5511898173768683,
      "LackOfCohesion" : 0.552183774179179,
      "MetricsIntensity" : 0.05353537677048789,
      "Density" : 3.046280023432923
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "cc8f0d64-a0d2-4d39-b69b-db67751e08d3",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5545296694959764,
      "MetricsIntensity" : 0.05344710396383052,
      "Density" : 0.9961641733793632
    },
    "euclideanDistance" : 16.071776206445275,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5511332227750134,
      "LackOfCohesion" : 0.5545296694959764,
      "MetricsIntensity" : 0.05344710396383052,
      "Density" : 3.0409836065573774
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.web.savedrequest.FastHttpDateFormat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.cas.authentication.EhCacheBasedTicketCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "f2706d93-39f0-4c2e-83f9-83e1f735d4b0",
    "objectives" : {
      "NumberOfConcerns" : 0.9971499821873887,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5515354370811243,
      "MetricsIntensity" : 0.05355449517726602,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 17.067317554176146,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5489762036524632,
      "LackOfCohesion" : 0.5515354370811243,
      "MetricsIntensity" : 0.05355449517726602,
      "Density" : 3.0421792618629175
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.putInCache(MutableAcl)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "d901c6ac-dc32-44ce-b399-f6264f9e9050",
    "objectives" : {
      "NumberOfConcerns" : 0.9971499821873887,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5517538730793767,
      "MetricsIntensity" : 0.05355092855175029,
      "Density" : 0.9959723820483314
    },
    "euclideanDistance" : 17.06732460320557,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.548976203652463,
      "LackOfCohesion" : 0.5517538730793767,
      "MetricsIntensity" : 0.05355092855175028,
      "Density" : 3.0421792618629175
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.putInCache(MutableAcl)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "4429b6b3-e784-40f5-bd2d-a0c53fa4b023",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5521036809798198,
      "MetricsIntensity" : 0.05354556162954566,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 17.067431959214552,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5506364139457662,
      "LackOfCohesion" : 0.5521036809798198,
      "MetricsIntensity" : 0.05354556162954566,
      "Density" : 3.0439367311072054
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "fab86d1c-143d-4bb0-97a5-65d2826f4d1b",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5543582658559862,
      "MetricsIntensity" : 0.05345960392958404,
      "Density" : 0.996547756041427
    },
    "euclideanDistance" : 17.067588173749353,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5511332227750136,
      "LackOfCohesion" : 0.5543582658559862,
      "MetricsIntensity" : 0.05345960392958404,
      "Density" : 3.042154566744731
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.instance], extractedMethods=[org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget(), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonExpired(boolean), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name), org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.createLogoutHandler()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.crypto.password.Md4PasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.web.savedrequest.FastHttpDateFormat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.cas.authentication.EhCacheBasedTicketCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    } ]
  }, {
    "solutionId" : "518cd38a-a689-4c39-a55c-eefeeb4b4e96",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5523316271167715,
      "MetricsIntensity" : 0.05355377214705943,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 20.057271847835704,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5523316271167715,
      "MetricsIntensity" : 0.05355377214705943,
      "Density" : 3.0427901524032825
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      } ]
    } ]
  }, {
    "solutionId" : "29612ae5-e870-469f-9aff-e2482bc10b32",
    "objectives" : {
      "NumberOfConcerns" : 0.9975062344139651,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5522351820094781,
      "MetricsIntensity" : 0.05354928030168203,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 21.054549317589963,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5495296070835642,
      "LackOfCohesion" : 0.5522351820094781,
      "MetricsIntensity" : 0.053549280301682024,
      "Density" : 3.0427901524032825
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials()', targetType='org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "1c2a1f52-fbdb-4d89-ab79-406dd52fc468",
    "objectives" : {
      "NumberOfConcerns" : 0.9960812255076594,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.551862710748445,
      "MetricsIntensity" : 0.053586777586355834,
      "Density" : 0.9946298427311085
    },
    "euclideanDistance" : 26.04397992485225,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5473159933591587,
      "LackOfCohesion" : 0.551862710748445,
      "MetricsIntensity" : 0.05358677758635583,
      "Density" : 3.039859320046893
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurerUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.EhCacheBasedAclCache(Ehcache, PermissionGrantingStrategy, AclAuthorizationStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "1c00527c-d036-4d9f-a939-406778031df6",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5518758618844305,
      "MetricsIntensity" : 0.053594836057248955,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 26.043986523926947,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5478693967902601,
      "LackOfCohesion" : 0.5518758618844305,
      "MetricsIntensity" : 0.053594836057248955,
      "Density" : 3.039273153575616
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurerUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.EhCacheBasedAclCache(Ehcache, PermissionGrantingStrategy, AclAuthorizationStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      } ]
    } ]
  }, {
    "solutionId" : "1cc2ea7c-aa65-4025-aa98-eea6a1d5b042",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5518324583678947,
      "MetricsIntensity" : 0.05359483605724897,
      "Density" : 0.9946298427311085
    },
    "euclideanDistance" : 26.043992928113866,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5478693967902601,
      "LackOfCohesion" : 0.5518324583678947,
      "MetricsIntensity" : 0.05359483605724896,
      "Density" : 3.039859320046896
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurerUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.EhCacheBasedAclCache(Ehcache, PermissionGrantingStrategy, AclAuthorizationStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "94a666c7-bbc9-4551-bfb0-4f095cadd06c",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5517887711682442,
      "MetricsIntensity" : 0.05359037817973362,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 26.044006645298776,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5478693967902595,
      "LackOfCohesion" : 0.5517887711682442,
      "MetricsIntensity" : 0.05359037817973362,
      "Density" : 3.041031652989449
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurerUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.EhCacheBasedAclCache(Ehcache, PermissionGrantingStrategy, AclAuthorizationStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "165c078b-726c-4f28-8397-f6e5ffabcee3",
    "objectives" : {
      "NumberOfConcerns" : 0.9964374777342359,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5519307545671083,
      "MetricsIntensity" : 0.0535760615346362,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 26.044009624402165,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5478693967902604,
      "LackOfCohesion" : 0.5519307545671083,
      "MetricsIntensity" : 0.053576061534636205,
      "Density" : 3.0410316529894486
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurerUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "5d051bb5-99d9-42b8-a616-beb0ee18d702",
    "objectives" : {
      "NumberOfConcerns" : 0.9960812255076594,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5518470207677781,
      "MetricsIntensity" : 0.05358231970884044,
      "Density" : 0.9946298427311085
    },
    "euclideanDistance" : 27.042353309783817,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5473159933591587,
      "LackOfCohesion" : 0.5518470207677781,
      "MetricsIntensity" : 0.053582319708840455,
      "Density" : 3.039859320046893
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurerUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.EhCacheBasedAclCache(Ehcache, PermissionGrantingStrategy, AclAuthorizationStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  }, {
    "solutionId" : "6aa2e767-f6a4-4832-a430-45e6819dbb41",
    "objectives" : {
      "NumberOfConcerns" : 0.9960812255076594,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5517999530110119,
      "MetricsIntensity" : 0.053588577883044705,
      "Density" : 0.9948216340621404
    },
    "euclideanDistance" : 27.042359416575124,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5473159933591585,
      "LackOfCohesion" : 0.5517999530110119,
      "MetricsIntensity" : 0.05358857788304471,
      "Density" : 3.040445486518171
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.jackson2.UnmodifiableSetMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.ProviderManager.NullEventPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.oauth2.client.RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.messaging.context.SecurityContextChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.web.util.matcher.OrRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.addAuthority(GrantedAuthority)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.writers.CompositeHeaderWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(String)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setTimeBeforeExpiration(int)', targetType='org.springframework.security.authentication.AbstractAuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setGraceLoginsRemaining(int)', targetType='org.springframework.gradle.maven.SpringMavenPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2ClientConfigurerUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.acls.domain.EhCacheBasedAclCache.cache], extractedMethods=[org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable), org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.EhCacheBasedAclCache.EhCacheBasedAclCache(Ehcache, PermissionGrantingStrategy, AclAuthorizationStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)', targetType='org.springframework.security.rsocket.authentication.AuthenticationPayloadInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.crypto.RsaKeyConversionServicePostProcessor.ResourceKeyConverterAdapter'"
      } ]
    } ]
  } ]
}