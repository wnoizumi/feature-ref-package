{
  "executionId" : "f4b7a959-127f-40c1-ac35-68c1f0ab4ef5",
  "computingTime" : 4651842,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 30,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1561403508771924,
    "meanNumConcerns" : 1.6132963988919662,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "8303297f-8d9d-4fd5-8ea8-9e6fa259d8c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5514499521472577,
      "MetricsIntensity" : 0.05355318608886147,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 19.06025279437756,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6090808416389812,
      "LackOfCohesion" : 0.5514499521472577,
      "MetricsIntensity" : 0.05355318608886147,
      "Density" : 3.142773551784668
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "8ec8f802-65e5-4f90-ad8c-cc65879cf89c",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5514011621394512,
      "MetricsIntensity" : 0.053563909167500236,
      "Density" : 0.9955530850472485
    },
    "euclideanDistance" : 19.06028874811159,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096345514950166,
      "LackOfCohesion" : 0.5514011621394512,
      "MetricsIntensity" : 0.053563909167500236,
      "Density" : 3.142105263157895
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "da0d94fd-fef0-4bf8-8203-2981412a757e",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5514558069481945,
      "MetricsIntensity" : 0.053550526765359034,
      "Density" : 0.9957383731702798
    },
    "euclideanDistance" : 19.06031795925345,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6101882613510523,
      "LackOfCohesion" : 0.5514558069481945,
      "MetricsIntensity" : 0.05355052676535904,
      "Density" : 3.1426900584795328
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "4bc2cd3d-43df-48f6-b444-cff31142f17c",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5514558069481944,
      "MetricsIntensity" : 0.053550526765359055,
      "Density" : 0.9957383731702798
    },
    "euclideanDistance" : 19.06031795925345,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6101882613510523,
      "LackOfCohesion" : 0.5514558069481944,
      "MetricsIntensity" : 0.05355052676535906,
      "Density" : 3.1426900584795328
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "b2f3449f-474e-49d2-ab7b-86a882276307",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5514032638628644,
      "MetricsIntensity" : 0.05357017144542527,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 20.05724774027537,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6090808416389812,
      "LackOfCohesion" : 0.5514032638628644,
      "MetricsIntensity" : 0.05357017144542527,
      "Density" : 3.142773551784669
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "feba07a8-8005-4951-9fc6-02e05571c1ca",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5514579086716077,
      "MetricsIntensity" : 0.053550526765359055,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 20.057249190157343,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6090808416389812,
      "LackOfCohesion" : 0.5514579086716077,
      "MetricsIntensity" : 0.053550526765359055,
      "Density" : 3.1427735517846687
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "f351b9fe-74d1-4383-9ccc-672c56f192f0",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.551256937208341,
      "MetricsIntensity" : 0.05356876457750787,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 21.054541337475168,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096345514950166,
      "LackOfCohesion" : 0.551256937208341,
      "MetricsIntensity" : 0.053568764577507866,
      "Density" : 3.1409356725146185
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.saveTokenIfNecessary()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "d7713aac-27d3-4b04-af39-59de86d84d41",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5523049032071269,
      "MetricsIntensity" : 0.053570171445425266,
      "Density" : 0.9949972206781545
    },
    "euclideanDistance" : 21.05454376862208,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6090808416389812,
      "LackOfCohesion" : 0.5523049032071269,
      "MetricsIntensity" : 0.05357017144542527,
      "Density" : 3.142188414277354
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "1cb76d77-3d5f-48a3-b8a3-70f6d0ea553d",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5514238607523138,
      "MetricsIntensity" : 0.053560752293148974,
      "Density" : 0.9957383731702798
    },
    "euclideanDistance" : 21.054571969490738,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096345514950166,
      "LackOfCohesion" : 0.5514238607523138,
      "MetricsIntensity" : 0.053560752293148974,
      "Density" : 3.142690058479533
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "e38457c0-22d3-4130-95ae-58c87fd4be9f",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5514318005963191,
      "MetricsIntensity" : 0.0535473698910078,
      "Density" : 0.9957383731702798
    },
    "euclideanDistance" : 21.054572143399234,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096345514950163,
      "LackOfCohesion" : 0.5514318005963191,
      "MetricsIntensity" : 0.0535473698910078,
      "Density" : 3.142690058479533
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "04f17b77-ea6f-4dbd-adeb-ce3a9c7e015c",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.551377155787576,
      "MetricsIntensity" : 0.05356075229314901,
      "Density" : 0.9961089494163424
    },
    "euclideanDistance" : 21.05460456041196,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6101882613510523,
      "LackOfCohesion" : 0.551377155787576,
      "MetricsIntensity" : 0.053560752293149,
      "Density" : 3.1420222092343653
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "8a2bc7af-ac02-4d06-bac4-8d65b1a14317",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5514719247102138,
      "MetricsIntensity" : 0.05354553442366043,
      "Density" : 0.9961089494163424
    },
    "euclideanDistance" : 21.05460700372272,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6101882613510523,
      "LackOfCohesion" : 0.5514719247102138,
      "MetricsIntensity" : 0.05354553442366043,
      "Density" : 3.1438596491228075
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "78bb6243-ac5b-429f-af13-c9337674f594",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5513663786169629,
      "MetricsIntensity" : 0.05356963990444038,
      "Density" : 0.9953677969242172
    },
    "euclideanDistance" : 23.049805096946756,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6090808416389812,
      "LackOfCohesion" : 0.5513663786169629,
      "MetricsIntensity" : 0.05356963990444037,
      "Density" : 3.1415204678362567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "1dc5b8e7-e099-400a-a3fb-a1a01a3c946c",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5514111903625943,
      "MetricsIntensity" : 0.05356337762651535,
      "Density" : 0.9953677969242172
    },
    "euclideanDistance" : 23.049806154363292,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609080841638981,
      "LackOfCohesion" : 0.5514111903625943,
      "MetricsIntensity" : 0.05356337762651535,
      "Density" : 3.1415204678362563
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "212d282e-fd58-4ac1-b883-9a595774536f",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5523498333832044,
      "MetricsIntensity" : 0.05354999522437415,
      "Density" : 0.9953677969242172
    },
    "euclideanDistance" : 23.049843467447864,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096345514950166,
      "LackOfCohesion" : 0.5523498333832044,
      "MetricsIntensity" : 0.053549995224374154,
      "Density" : 3.1415204678362567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "06d171a0-dc62-4c45-b453-847086c07d4f",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.551414192824613,
      "MetricsIntensity" : 0.05356337762651533,
      "Density" : 0.9953677969242172
    },
    "euclideanDistance" : 24.0477351753739,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6090808416389804,
      "LackOfCohesion" : 0.551414192824613,
      "MetricsIntensity" : 0.053563377626515335,
      "Density" : 3.1415204678362567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "ea1a9574-50f2-48f1-985d-70a9df424d00",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5514100944639574,
      "MetricsIntensity" : 0.05354999522437415,
      "Density" : 0.9957383731702798
    },
    "euclideanDistance" : 24.047764646310416,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096345514950166,
      "LackOfCohesion" : 0.5514100944639574,
      "MetricsIntensity" : 0.053549995224374154,
      "Density" : 3.1426900584795328
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "dcd6fc47-801d-4fa1-9260-8f10f7978bcc",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5513554496552142,
      "MetricsIntensity" : 0.05356337762651533,
      "Density" : 0.9961089494163424
    },
    "euclideanDistance" : 24.04779302847762,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6101882613510523,
      "LackOfCohesion" : 0.5513554496552142,
      "MetricsIntensity" : 0.053563377626515335,
      "Density" : 3.1420222092343657
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "40b44b3c-3399-4bbc-8414-a1565f9753c1",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5514032638628646,
      "MetricsIntensity" : 0.053563377626515314,
      "Density" : 0.9957383731702798
    },
    "euclideanDistance" : 25.045857509474363,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096345514950166,
      "LackOfCohesion" : 0.5514032638628646,
      "MetricsIntensity" : 0.05356337762651533,
      "Density" : 3.1426900584795328
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "b4a853f0-1add-4bb7-b95b-cb6f75531841",
    "objectives" : {
      "NumberOfConcerns" : 0.9972527472527473,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.551406297714259,
      "MetricsIntensity" : 0.053544590792740224,
      "Density" : 0.9949972206781545
    },
    "euclideanDistance" : 27.042400937036316,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6079734219269104,
      "LackOfCohesion" : 0.551406297714259,
      "MetricsIntensity" : 0.05354459079274022,
      "Density" : 3.140350877192982
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "f0bb23f7-6420-4b29-909a-33008c8801cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9972527472527473,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5514062977142591,
      "MetricsIntensity" : 0.05354459079274021,
      "Density" : 0.9949972206781545
    },
    "euclideanDistance" : 27.042400937036316,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6079734219269104,
      "LackOfCohesion" : 0.5514062977142591,
      "MetricsIntensity" : 0.05354459079274021,
      "Density" : 3.1403508771929824
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "625e67fe-b537-446b-84fd-cfe731df71e6",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5521525187063815,
      "MetricsIntensity" : 0.05352896083331633,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 30.038209156766918,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6090808416389812,
      "LackOfCohesion" : 0.5521525187063815,
      "MetricsIntensity" : 0.05352896083331633,
      "Density" : 3.14093567251462
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.context.HttpRequestResponseHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "9f79a36a-8e3d-447f-a06f-b3a630713a79",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5518987081574891,
      "MetricsIntensity" : 0.053546752565393776,
      "Density" : 0.996479525662405
    },
    "euclideanDistance" : 34.03369221972902,
    "generation" : 1,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6057585825027687,
      "LackOfCohesion" : 0.5518987081574891,
      "MetricsIntensity" : 0.053546752565393776,
      "Density" : 3.1450292397660817
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.oauth2.client.web.server.UnAuthenticatedServerOAuth2AuthorizedClientRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='s101.S101Configure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.config.provisioning.UserDetailsManagerResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "8f328146-138f-4385-a8e2-3aa96ec01228",
    "objectives" : {
      "NumberOfConcerns" : 0.9972527472527473,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5518754624293252,
      "MetricsIntensity" : 0.053540541758246206,
      "Density" : 0.9944413563090606
    },
    "euclideanDistance" : 35.0327112820102,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6079734219269106,
      "LackOfCohesion" : 0.5518754624293252,
      "MetricsIntensity" : 0.053540541758246206,
      "Density" : 3.1385964912280695
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy()', targetType='s101.S101Configure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.context.HttpRequestResponseHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.config.provisioning.UserDetailsManagerResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "8bcdd0c6-64c0-4be6-8ab7-1dabc16ae19a",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5519260305618605,
      "MetricsIntensity" : 0.05354184568460868,
      "Density" : 0.9962942375393737
    },
    "euclideanDistance" : 35.03272565050582,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.605758582502768,
      "LackOfCohesion" : 0.5519260305618605,
      "MetricsIntensity" : 0.053541845684608666,
      "Density" : 3.144444444444444
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='s101.S101Configure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.config.provisioning.UserDetailsManagerResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "1820a24f-6ab3-44b9-bf32-176ca7a6796b",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5518846566352408,
      "MetricsIntensity" : 0.05355567416682123,
      "Density" : 0.996479525662405
    },
    "euclideanDistance" : 35.03273028972952,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.605758582502768,
      "LackOfCohesion" : 0.5518846566352408,
      "MetricsIntensity" : 0.053555674166821235,
      "Density" : 3.1450292397660817
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.oauth2.client.web.server.UnAuthenticatedServerOAuth2AuthorizedClientRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='s101.S101Configure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.config.provisioning.UserDetailsManagerResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "2a463d24-1681-4033-b53a-1d7c1e45497f",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.551898708157489,
      "MetricsIntensity" : 0.053546752565393776,
      "Density" : 0.996479525662405
    },
    "euclideanDistance" : 35.032730497454,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6057585825027685,
      "LackOfCohesion" : 0.551898708157489,
      "MetricsIntensity" : 0.05354675256539378,
      "Density" : 3.145029239766082
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.oauth2.client.web.server.UnAuthenticatedServerOAuth2AuthorizedClientRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='s101.S101Configure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.config.provisioning.UserDetailsManagerResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "98fa71d4-b1e0-4bec-818a-8fb9482a1e7c",
    "objectives" : {
      "NumberOfConcerns" : 0.9972527472527473,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.552749779369216,
      "MetricsIntensity" : 0.05354054175824623,
      "Density" : 0.9942560681860293
    },
    "euclideanDistance" : 36.03181173739717,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6079734219269102,
      "LackOfCohesion" : 0.552749779369216,
      "MetricsIntensity" : 0.05354054175824623,
      "Density" : 3.1380116959064326
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy()', targetType='s101.S101Configure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.context.HttpRequestResponseHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.config.provisioning.UserDetailsManagerResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "32794d75-95a3-486d-8ae9-8a50285c6017",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5537905114361775,
      "MetricsIntensity" : 0.053546306485322416,
      "Density" : 0.9961089494163424
    },
    "euclideanDistance" : 36.03184091050588,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.605758582502768,
      "LackOfCohesion" : 0.5537905114361775,
      "MetricsIntensity" : 0.053546306485322416,
      "Density" : 3.143859649122807
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='s101.S101Configure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy()', targetType='s101.S101Configure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.config.provisioning.UserDetailsManagerResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent'"
      } ]
    } ]
  }, {
    "solutionId" : "6eb8f1c7-dcce-40ed-99ff-fa51239dd4e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.552794883020877,
      "MetricsIntensity" : 0.05353918636110627,
      "Density" : 0.996479525662405
    },
    "euclideanDistance" : 36.031845350973605,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.606312292358804,
      "LackOfCohesion" : 0.552794883020877,
      "MetricsIntensity" : 0.05353918636110627,
      "Density" : 3.1450292397660817
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.oauth2.client.web.server.UnAuthenticatedServerOAuth2AuthorizedClientRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='s101.S101Configure'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.web.authentication.rememberme.CookieTheftException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToStringConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.access.hierarchicalroles.NullRoleHierarchy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.config.provisioning.UserDetailsManagerResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.MvcMatchersAuthorizedUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)', targetType='org.springframework.security.access.expression.method.MethodSecurityExpressionOperations'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent'"
      } ]
    } ]
  } ]
}