{
  "executionId" : "36f06315-3c1f-4db3-add2-ca54141b872a",
  "computingTime" : 736745,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2816492450638797,
    "meanNumConcerns" : 1.7074792243767314,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "a391d520-cf67-45e7-8d52-b45ed0723df7",
    "objectives" : {
      "NumberOfConcerns" : 1.0048669695003245,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5532699019555429,
      "MetricsIntensity" : 0.05327627096130657,
      "Density" : 0.9980534418686958
    },
    "euclideanDistance" : 10.115078558502457,
    "generation" : 47,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7072767364939363,
      "LackOfCohesion" : 0.5532699019555429,
      "MetricsIntensity" : 0.05327627096130657,
      "Density" : 3.25635103926097
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "60050bd3-3f7e-4136-b07f-bb46f43cdc70",
    "objectives" : {
      "NumberOfConcerns" : 1.0061648280337443,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5537575457895664,
      "MetricsIntensity" : 0.0532081888127417,
      "Density" : 0.9980534418686958
    },
    "euclideanDistance" : 10.115233900650727,
    "generation" : 45,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7094818081587653,
      "LackOfCohesion" : 0.5537575457895664,
      "MetricsIntensity" : 0.053208188812741704,
      "Density" : 3.25635103926097
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "e3f16ae0-d15e-4c7a-9322-0a4851dcd092",
    "objectives" : {
      "NumberOfConcerns" : 1.0058403634003894,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5543065781879136,
      "MetricsIntensity" : 0.053214452223565675,
      "Density" : 0.9982304016988144
    },
    "euclideanDistance" : 10.115249197724644,
    "generation" : 44,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7089305402425576,
      "LackOfCohesion" : 0.5543065781879136,
      "MetricsIntensity" : 0.053214452223565675,
      "Density" : 3.2569284064665123
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "5a7e88d0-7852-4a6f-89b6-d15f0747c110",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5533144250920424,
      "MetricsIntensity" : 0.05327627096130657,
      "Density" : 1.0014156786409485
    },
    "euclideanDistance" : 10.115381071396905,
    "generation" : 36,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7067254685777289,
      "LackOfCohesion" : 0.5533144250920424,
      "MetricsIntensity" : 0.05327627096130658,
      "Density" : 3.267321016166282
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "47b98556-0ba2-40fa-9429-cf1abd013c8a",
    "objectives" : {
      "NumberOfConcerns" : 1.0042180402336145,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5538914138784243,
      "MetricsIntensity" : 0.05328253437213056,
      "Density" : 1.0015926384710672
    },
    "euclideanDistance" : 10.115397985873193,
    "generation" : 45,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7061742006615213,
      "LackOfCohesion" : 0.5538914138784243,
      "MetricsIntensity" : 0.05328253437213057,
      "Density" : 3.2678983833718243
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "18a7d658-0467-4c37-8a9f-68e72725c666",
    "objectives" : {
      "NumberOfConcerns" : 1.0068137573004543,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5552198201970461,
      "MetricsIntensity" : 0.053205133427554126,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 10.115448476150465,
    "generation" : 36,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7105843439911799,
      "LackOfCohesion" : 0.5552198201970461,
      "MetricsIntensity" : 0.053205133427554126,
      "Density" : 3.258660508083142
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "12d220cf-be3d-4e0e-a8ac-206891ce7b8d",
    "objectives" : {
      "NumberOfConcerns" : 1.0055158987670343,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5543511013244133,
      "MetricsIntensity" : 0.05321445222356567,
      "Density" : 1.0015926384710672
    },
    "euclideanDistance" : 10.115551737674904,
    "generation" : 25,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.70837927232635,
      "LackOfCohesion" : 0.5543511013244133,
      "MetricsIntensity" : 0.05321445222356567,
      "Density" : 3.267898383371825
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "98051d02-e30b-4648-93cd-32e453797ebd",
    "objectives" : {
      "NumberOfConcerns" : 1.0061648280337443,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5535349301070674,
      "MetricsIntensity" : 0.053214418410808,
      "Density" : 1.0019465581313043
    },
    "euclideanDistance" : 10.1156066184732,
    "generation" : 28,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.709481808158765,
      "LackOfCohesion" : 0.5535349301070674,
      "MetricsIntensity" : 0.05321441841080799,
      "Density" : 3.26905311778291
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "b41e6c99-7380-4ee2-8f7b-88b1ec1a6fb8",
    "objectives" : {
      "NumberOfConcerns" : 1.0058403634003894,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5540839625054153,
      "MetricsIntensity" : 0.05322068182163199,
      "Density" : 1.0021235179614227
    },
    "euclideanDistance" : 10.115621971009794,
    "generation" : 29,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7089305402425574,
      "LackOfCohesion" : 0.5540839625054153,
      "MetricsIntensity" : 0.053220681821632,
      "Density" : 3.2696304849884523
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "ed9a7b60-d90b-4639-921e-531ec927a6d9",
    "objectives" : {
      "NumberOfConcerns" : 1.0064892926670992,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5552643433335457,
      "MetricsIntensity" : 0.053205133427554126,
      "Density" : 1.0021235179614227
    },
    "euclideanDistance" : 10.11575115939027,
    "generation" : 18,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.710033076074973,
      "LackOfCohesion" : 0.5552643433335457,
      "MetricsIntensity" : 0.053205133427554126,
      "Density" : 3.2696304849884523
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "684060eb-6dca-44a8-84d2-deb0213b0e9c",
    "objectives" : {
      "NumberOfConcerns" : 1.0071382219338092,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.554642831410664,
      "MetricsIntensity" : 0.05319887001673014,
      "Density" : 1.0019465581313043
    },
    "euclideanDistance" : 10.115764088472876,
    "generation" : 30,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7111356119073866,
      "LackOfCohesion" : 0.554642831410664,
      "MetricsIntensity" : 0.05319887001673014,
      "Density" : 3.26905311778291
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "bd18b60f-1909-4f10-8aad-d77f2730b28f",
    "objectives" : {
      "NumberOfConcerns" : 1.0071382219338092,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5546428314106641,
      "MetricsIntensity" : 0.053198870016730126,
      "Density" : 1.0019465581313043
    },
    "euclideanDistance" : 10.115764088472876,
    "generation" : 39,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7111356119073866,
      "LackOfCohesion" : 0.5546428314106641,
      "MetricsIntensity" : 0.053198870016730126,
      "Density" : 3.26905311778291
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "126ce1a4-dadf-4802-935e-58bca68cd471",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5541161969099875,
      "MetricsIntensity" : 0.05333376926042507,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 12.09623363047624,
    "generation" : 11,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7054605626034194,
      "LackOfCohesion" : 0.5541161969099875,
      "MetricsIntensity" : 0.053333769260425073,
      "Density" : 3.2686308492201053
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "af05a126-e29a-4527-80bf-51368475fa7a",
    "objectives" : {
      "NumberOfConcerns" : 1.0051914341336794,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5539822414398703,
      "MetricsIntensity" : 0.053259375172603166,
      "Density" : 1.0010617589807114
    },
    "euclideanDistance" : 12.09637414060196,
    "generation" : 36,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.70876999448428,
      "LackOfCohesion" : 0.5539822414398703,
      "MetricsIntensity" : 0.05325937517260317,
      "Density" : 3.268053148469093
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "c1ee8d77-0cdf-4eb5-9e17-bd567cfc7096",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5522485013983626,
      "MetricsIntensity" : 0.05329150021458091,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 14.082223420419487,
    "generation" : 46,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7054605626034194,
      "LackOfCohesion" : 0.5522485013983626,
      "MetricsIntensity" : 0.05329150021458091,
      "Density" : 3.2578034682080923
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "11f9388e-0d43-465a-9c63-8bd4fb0b2f2d",
    "objectives" : {
      "NumberOfConcerns" : 1.0035691109669047,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5521047030006477,
      "MetricsIntensity" : 0.053245199668343686,
      "Density" : 0.9975225623783401
    },
    "euclideanDistance" : 14.082253259947567,
    "generation" : 46,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706012134583563,
      "LackOfCohesion" : 0.5521047030006477,
      "MetricsIntensity" : 0.0532451996683437,
      "Density" : 3.258381502890173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "451e2001-8d7a-46f7-a17a-c8b50cb9a7d6",
    "objectives" : {
      "NumberOfConcerns" : 1.0048669695003245,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5524691503461655,
      "MetricsIntensity" : 0.05322960729035485,
      "Density" : 0.9978764820385773
    },
    "euclideanDistance" : 14.082385119466622,
    "generation" : 44,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.708218422504137,
      "LackOfCohesion" : 0.5524691503461655,
      "MetricsIntensity" : 0.05322960729035484,
      "Density" : 3.2595375722543354
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a6221f56-8fdc-442b-b17a-af3965bc303e",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5528424443715484,
      "MetricsIntensity" : 0.053297767713793145,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 14.082451632205007,
    "generation" : 37,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7043574186431327,
      "LackOfCohesion" : 0.5528424443715484,
      "MetricsIntensity" : 0.05329776771379315,
      "Density" : 3.2693641618497105
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "8b120951-6ddc-405b-82c5-bfefb1c03bad",
    "objectives" : {
      "NumberOfConcerns" : 1.0035691109669047,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5515998644246602,
      "MetricsIntensity" : 0.05323893216913143,
      "Density" : 1.0007078393204742
    },
    "euclideanDistance" : 14.082459441961698,
    "generation" : 35,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706012134583563,
      "LackOfCohesion" : 0.5515998644246602,
      "MetricsIntensity" : 0.05323893216913143,
      "Density" : 3.26878612716763
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "f5184c8c-99ca-44dd-8671-7befb28742d8",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5527699175366194,
      "MetricsIntensity" : 0.05329776771379318,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 14.082471889047355,
    "generation" : 24,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.704908990623276,
      "LackOfCohesion" : 0.5527699175366194,
      "MetricsIntensity" : 0.05329776771379318,
      "Density" : 3.269364161849711
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "2d8a1769-4caa-4fd0-8d8a-6fc8501fdcf7",
    "objectives" : {
      "NumberOfConcerns" : 1.0055158987670343,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5536223270215354,
      "MetricsIntensity" : 0.053214048747194674,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 14.082715313840582,
    "generation" : 37,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7093215664644232,
      "LackOfCohesion" : 0.5536223270215354,
      "MetricsIntensity" : 0.053214048747194674,
      "Density" : 3.2705202312138724
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "0af9ab96-897c-4355-85ce-8d9f693dc27a",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.552500351061806,
      "MetricsIntensity" : 0.053342774424058145,
      "Density" : 0.9969916828879845
    },
    "euclideanDistance" : 16.071920923421352,
    "generation" : 47,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7047461368653423,
      "LackOfCohesion" : 0.552500351061806,
      "MetricsIntensity" : 0.05334277442405813,
      "Density" : 3.2585309427414684
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "175f143f-ae45-43b7-a489-be8982b65265",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5530946819794549,
      "MetricsIntensity" : 0.05334904601699945,
      "Density" : 1.0005308794903558
    },
    "euclideanDistance" : 16.072120867110993,
    "generation" : 24,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7036423841059596,
      "LackOfCohesion" : 0.5530946819794549,
      "MetricsIntensity" : 0.053349046016999455,
      "Density" : 3.2700983227299023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "064d2b76-ea5b-4931-9d05-eef8eaf0c235",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5518512904192768,
      "MetricsIntensity" : 0.053290172042850685,
      "Density" : 1.0003539196602371
    },
    "euclideanDistance" : 16.072127607309312,
    "generation" : 42,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7052980132450328,
      "LackOfCohesion" : 0.5518512904192768,
      "MetricsIntensity" : 0.053290172042850685,
      "Density" : 3.26951995373048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "5076a2c6-bfa6-4c88-adbd-70b3aaf84a37",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5518792833277402,
      "MetricsIntensity" : 0.05329017204285066,
      "Density" : 1.0003539196602371
    },
    "euclideanDistance" : 16.07212856849593,
    "generation" : 35,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7052980132450328,
      "LackOfCohesion" : 0.5518792833277402,
      "MetricsIntensity" : 0.05329017204285067,
      "Density" : 3.26951995373048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "b87ec6dd-5074-45f9-8405-d5eb8d3595e1",
    "objectives" : {
      "NumberOfConcerns" : 1.0051914341336794,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.554953064930276,
      "MetricsIntensity" : 0.05324202338352441,
      "Density" : 0.9976995222084587
    },
    "euclideanDistance" : 17.06799993476682,
    "generation" : 47,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7087699944842802,
      "LackOfCohesion" : 0.554953064930276,
      "MetricsIntensity" : 0.05324202338352441,
      "Density" : 3.257076834199884
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "08d6f41a-e996-4b02-890c-65a74f048b07",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5528302485483819,
      "MetricsIntensity" : 0.053325411301348345,
      "Density" : 1.0003539196602371
    },
    "euclideanDistance" : 18.06415568221318,
    "generation" : 45,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7047461368653423,
      "LackOfCohesion" : 0.5528302485483819,
      "MetricsIntensity" : 0.05332541130134834,
      "Density" : 3.26951995373048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "38c39997-9be5-4021-9a0b-d4ea025c54e8",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5549026587800004,
      "MetricsIntensity" : 0.0532083457346581,
      "Density" : 0.9968147230578659
    },
    "euclideanDistance" : 19.06074998503504,
    "generation" : 42,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7065637065637067,
      "LackOfCohesion" : 0.5549026587800004,
      "MetricsIntensity" : 0.0532083457346581,
      "Density" : 3.2541883304448294
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "9ccf896f-781b-4d54-8ccb-94bfdeb99664",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5532384755180884,
      "MetricsIntensity" : 0.053331682894289675,
      "Density" : 1.0003539196602371
    },
    "euclideanDistance" : 19.060767883850836,
    "generation" : 46,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7036423841059603,
      "LackOfCohesion" : 0.5532384755180884,
      "MetricsIntensity" : 0.05333168289428968,
      "Density" : 3.26951995373048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "137f2279-71c4-4f23-bd04-be94f2b16382",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5537940343032297,
      "MetricsIntensity" : 0.05322390427781829,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 19.06084267440065,
    "generation" : 48,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.704908990623277,
      "LackOfCohesion" : 0.5537940343032297,
      "MetricsIntensity" : 0.05322390427781829,
      "Density" : 3.265164644714038
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "16685304-f8c9-49a9-842b-7ac1215d0acf",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.554397820204013,
      "MetricsIntensity" : 0.053202045653759,
      "Density" : 1.0
    },
    "euclideanDistance" : 19.060902122193486,
    "generation" : 44,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7065637065637067,
      "LackOfCohesion" : 0.554397820204013,
      "MetricsIntensity" : 0.053202045653759,
      "Density" : 3.264586943963027
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "c9111c5e-e42f-464f-b823-284fe9e62ab0",
    "objectives" : {
      "NumberOfConcerns" : 1.0051914341336794,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5552391314891885,
      "MetricsIntensity" : 0.0531927207749824,
      "Density" : 1.0005308794903558
    },
    "euclideanDistance" : 19.061022842931326,
    "generation" : 14,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.70876999448428,
      "LackOfCohesion" : 0.5552391314891885,
      "MetricsIntensity" : 0.053192720774982404,
      "Density" : 3.26632004621606
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "9b66232f-1133-46b8-973b-909d624867eb",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5523605365399236,
      "MetricsIntensity" : 0.05332410442564102,
      "Density" : 1.0
    },
    "euclideanDistance" : 20.057712805502586,
    "generation" : 41,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7051352843732743,
      "LackOfCohesion" : 0.5523605365399236,
      "MetricsIntensity" : 0.05332410442564103,
      "Density" : 3.2702546296296284
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "b7ea4007-c556-4d10-bae3-a7dfeb335e4d",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5515029342250679,
      "MetricsIntensity" : 0.05328528439216663,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 20.057765662232747,
    "generation" : 20,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7052980132450333,
      "LackOfCohesion" : 0.5515029342250679,
      "MetricsIntensity" : 0.05328528439216663,
      "Density" : 3.2712550607287447
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "bc515573-74d0-4bb1-948e-1324cb2890dd",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5526848570268476,
      "MetricsIntensity" : 0.05326971568666604,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 20.057830600924014,
    "generation" : 46,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7064017660044146,
      "LackOfCohesion" : 0.5526848570268476,
      "MetricsIntensity" : 0.05326971568666603,
      "Density" : 3.2712550607287447
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a5bd6ac4-9698-43d4-b2e9-470a6c92a442",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5522023221598955,
      "MetricsIntensity" : 0.053324104425641006,
      "Density" : 0.9964608033976288
    },
    "euclideanDistance" : 21.054799983922962,
    "generation" : 41,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7051352843732748,
      "LackOfCohesion" : 0.5522023221598955,
      "MetricsIntensity" : 0.053324104425641006,
      "Density" : 3.2586805555555545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "4c5be6e7-3178-476a-8aa5-87ed5590aa69",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5529410278986013,
      "MetricsIntensity" : 0.053376741187489744,
      "Density" : 0.9998230401698814
    },
    "euclideanDistance" : 21.054932597939697,
    "generation" : 45,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7034787410270573,
      "LackOfCohesion" : 0.5529410278986013,
      "MetricsIntensity" : 0.053376741187489744,
      "Density" : 3.2696759259259256
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "b9034081-ccaf-4f06-a45e-136868e73b90",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5538315294994507,
      "MetricsIntensity" : 0.0532572402146403,
      "Density" : 0.9968147230578659
    },
    "euclideanDistance" : 21.054952092083692,
    "generation" : 40,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7075055187637975,
      "LackOfCohesion" : 0.5538315294994507,
      "MetricsIntensity" : 0.05325724021464031,
      "Density" : 3.257952573742047
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "d35d16f1-d4aa-4fad-baf7-78ecfe1c4869",
    "objectives" : {
      "NumberOfConcerns" : 1.0035691109669047,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5517704220170498,
      "MetricsIntensity" : 0.053263477950653185,
      "Density" : 0.997168642718103
    },
    "euclideanDistance" : 22.052409933138904,
    "generation" : 36,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7069536423841059,
      "LackOfCohesion" : 0.5517704220170498,
      "MetricsIntensity" : 0.05326347795065319,
      "Density" : 3.2591093117408905
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a6527179-ecc2-4ab2-badc-2815041c6cc5",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5521945664189866,
      "MetricsIntensity" : 0.05323280507820714,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 23.05015367999486,
    "generation" : 42,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7036423841059605,
      "LackOfCohesion" : 0.5521945664189866,
      "MetricsIntensity" : 0.05323280507820714,
      "Density" : 3.2660497397339494
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "d0d14fa4-c8af-420f-8b44-2b2cd6ff7216",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5527443160379721,
      "MetricsIntensity" : 0.05323910927411663,
      "Density" : 0.9994691205096443
    },
    "euclideanDistance" : 23.050160446426933,
    "generation" : 41,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.703090507726269,
      "LackOfCohesion" : 0.5527443160379721,
      "MetricsIntensity" : 0.05323910927411663,
      "Density" : 3.2666281087333724
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "c56d53b1-c994-4aa5-850b-0bc2d18d78e3",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5533039150136386,
      "MetricsIntensity" : 0.05321723637270653,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 23.050222564888454,
    "generation" : 46,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7052980132450326,
      "LackOfCohesion" : 0.5533039150136386,
      "MetricsIntensity" : 0.05321723637270653,
      "Density" : 3.26604973973395
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "af7f34e0-1635-41cf-aa3b-51ca9c2c21a9",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5537860325671353,
      "MetricsIntensity" : 0.053363812939267403,
      "Density" : 1.0
    },
    "euclideanDistance" : 24.048107501458272,
    "generation" : 45,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.703478741027057,
      "LackOfCohesion" : 0.5537860325671353,
      "MetricsIntensity" : 0.05336381293926741,
      "Density" : 3.2702546296296298
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "1159b668-2ce8-4897-81fd-7c9c2e480967",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5520845743031773,
      "MetricsIntensity" : 0.05331921358041401,
      "Density" : 1.0005308794903558
    },
    "euclideanDistance" : 24.04811738233993,
    "generation" : 40,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7045831032578687,
      "LackOfCohesion" : 0.5520845743031773,
      "MetricsIntensity" : 0.05331921358041402,
      "Density" : 3.271990740740741
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "ccbc461a-8037-42e8-abc9-2a7f29d73cfb",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5535846303020076,
      "MetricsIntensity" : 0.053268495556280215,
      "Density" : 0.995576004247036
    },
    "euclideanDistance" : 25.046031868023007,
    "generation" : 39,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7045831032578687,
      "LackOfCohesion" : 0.5535846303020076,
      "MetricsIntensity" : 0.05326849555628021,
      "Density" : 3.2557870370370368
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "d1b0b37e-b8a1-4f82-ad70-ea8c4d17d022",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5519263599231486,
      "MetricsIntensity" : 0.05331921358041404,
      "Density" : 0.9969916828879845
    },
    "euclideanDistance" : 25.04605169162055,
    "generation" : 48,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7045831032578689,
      "LackOfCohesion" : 0.5519263599231486,
      "MetricsIntensity" : 0.05331921358041404,
      "Density" : 3.2604166666666665
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "99377a87-a1f0-437e-ad87-f945f45c3355",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5540298180304476,
      "MetricsIntensity" : 0.05341703217742245,
      "Density" : 0.9996460803397629
    },
    "euclideanDistance" : 25.046139317358517,
    "generation" : 44,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7027624309392262,
      "LackOfCohesion" : 0.5540298180304476,
      "MetricsIntensity" : 0.05341703217742245,
      "Density" : 3.270990156340475
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "846cc38f-2a41-4575-bb9e-5fa99e7c6765",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5530311954409156,
      "MetricsIntensity" : 0.05342324417145657,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 26.044366982077406,
    "generation" : 41,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7027624309392264,
      "LackOfCohesion" : 0.5530311954409156,
      "MetricsIntensity" : 0.05342324417145658,
      "Density" : 3.2727272727272725
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "2213af71-2be1-4c5c-8970-9d09f08d6d9b",
    "objectives" : {
      "NumberOfConcerns" : 1.0035691109669047,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5554493900118247,
      "MetricsIntensity" : 0.05323589831168202,
      "Density" : 0.9961068837373916
    },
    "euclideanDistance" : 26.044399358980222,
    "generation" : 33,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7069536423841056,
      "LackOfCohesion" : 0.5554493900118247,
      "MetricsIntensity" : 0.05323589831168201,
      "Density" : 3.2537572254335263
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "122dad16-5c4c-4f93-a3cb-89e6fd174c79",
    "objectives" : {
      "NumberOfConcerns" : 1.00064892926671,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5521783283294647,
      "MetricsIntensity" : 0.05337057298399512,
      "Density" : 0.9966377632277473
    },
    "euclideanDistance" : 27.04260221271377,
    "generation" : 45,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7038674033149177,
      "LackOfCohesion" : 0.5521783283294647,
      "MetricsIntensity" : 0.05337057298399511,
      "Density" : 3.2611464968152877
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "1189fd61-9553-4e46-8089-d84fbcab0086",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5559507340721123,
      "MetricsIntensity" : 0.053399612441761134,
      "Density" : 0.9964608033976288
    },
    "euclideanDistance" : 28.041162861146255,
    "generation" : 45,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027622,
      "LackOfCohesion" : 0.5559507340721123,
      "MetricsIntensity" : 0.053399612441761134,
      "Density" : 3.2605674580196875
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "4fe5661e-c609-4c33-b70c-3d568a017fed",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.55481931630196,
      "MetricsIntensity" : 0.053404095473838245,
      "Density" : 0.9998230401698814
    },
    "euclideanDistance" : 28.041225411575894,
    "generation" : 24,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702762430939226,
      "LackOfCohesion" : 0.55481931630196,
      "MetricsIntensity" : 0.05340409547383825,
      "Density" : 3.271569195136074
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "e7c37fb7-7ffe-4814-a05d-e9fb15cd88a2",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.551718150376704,
      "MetricsIntensity" : 0.053309876512253405,
      "Density" : 1.0007078393204742
    },
    "euclideanDistance" : 28.041276695320434,
    "generation" : 9,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7056874654886807,
      "LackOfCohesion" : 0.551718150376704,
      "MetricsIntensity" : 0.05330987651225341,
      "Density" : 3.2725694444444446
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "c9148ec6-f306-4834-bb93-1216b560f9a4",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5521705832016861,
      "MetricsIntensity" : 0.053279183592178356,
      "Density" : 0.9994691205096443
    },
    "euclideanDistance" : 29.03975410677153,
    "generation" : 48,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7023743787962449,
      "LackOfCohesion" : 0.5521705832016861,
      "MetricsIntensity" : 0.05327918359217836,
      "Density" : 3.268518518518518
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "c04428e9-e429-4a6b-a5dc-d393ed3c85ba",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5531751770678928,
      "MetricsIntensity" : 0.053405858337010115,
      "Density" : 1.0
    },
    "euclideanDistance" : 29.039780559815338,
    "generation" : 44,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702762430939226,
      "LackOfCohesion" : 0.5531751770678928,
      "MetricsIntensity" : 0.053405858337010115,
      "Density" : 3.272148233931673
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "048eed2e-2826-4b3c-8b31-2542694e2a5d",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5546998506629555,
      "MetricsIntensity" : 0.05330688508556152,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 30.03845379974924,
    "generation" : 38,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.703314917127071,
      "LackOfCohesion" : 0.5546998506629555,
      "MetricsIntensity" : 0.05330688508556152,
      "Density" : 3.268094962362479
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "702ac931-9b25-4398-abb8-86d0e5bf4bcf",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5538235036291163,
      "MetricsIntensity" : 0.05327300828254834,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 30.03847095653252,
    "generation" : 45,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7034787410270569,
      "LackOfCohesion" : 0.5538235036291163,
      "MetricsIntensity" : 0.05327300828254834,
      "Density" : 3.2673611111111116
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "3c2fc936-d62b-4c1f-b3fa-945baf0d5a5b",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5519699826093464,
      "MetricsIntensity" : 0.05336122980918432,
      "Density" : 1.0003539196602371
    },
    "euclideanDistance" : 30.038489037377225,
    "generation" : 46,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7049723756906074,
      "LackOfCohesion" : 0.5519699826093464,
      "MetricsIntensity" : 0.05336122980918431,
      "Density" : 3.2733063115228713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "3688ce12-8bfe-4e2a-a02c-f18bdecdb55b",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5550508093662261,
      "MetricsIntensity" : 0.05325742940142323,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 30.038498510505462,
    "generation" : 48,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7040309221424628,
      "LackOfCohesion" : 0.5550508093662261,
      "MetricsIntensity" : 0.05325742940142323,
      "Density" : 3.266782407407409
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "622a0903-c271-40fa-b4ed-b7a02fb81b30",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5529157331135027,
      "MetricsIntensity" : 0.05326367121438771,
      "Density" : 0.9959299239072731
    },
    "euclideanDistance" : 31.037123362860697,
    "generation" : 46,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7040309221424628,
      "LackOfCohesion" : 0.5529157331135027,
      "MetricsIntensity" : 0.053263671214387714,
      "Density" : 3.256944444444445
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "66122c97-2e6c-4a62-9316-f4bc4e437a69",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5524227113354565,
      "MetricsIntensity" : 0.05333051681525699,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 31.037154327405197,
    "generation" : 29,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.701657458563536,
      "LackOfCohesion" : 0.5524227113354565,
      "MetricsIntensity" : 0.05333051681525699,
      "Density" : 3.269253039953676
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "545a089e-c182-4a45-9292-f498b6191e8a",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5543631729521771,
      "MetricsIntensity" : 0.05340768900261163,
      "Density" : 0.9964608033976288
    },
    "euclideanDistance" : 31.037156003357875,
    "generation" : 48,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027622,
      "LackOfCohesion" : 0.5543631729521771,
      "MetricsIntensity" : 0.053407689002611634,
      "Density" : 3.2605674580196875
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "a04c5fd9-ca4d-49f6-8aa7-20e3f9d71359",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.553456175532067,
      "MetricsIntensity" : 0.05345730805744991,
      "Density" : 0.9996460803397629
    },
    "euclideanDistance" : 31.03717960555781,
    "generation" : 47,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7020453289110005,
      "LackOfCohesion" : 0.553456175532067,
      "MetricsIntensity" : 0.05345730805744991,
      "Density" : 3.2728852838933955
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "84cfb14d-1ad4-4bb7-b945-584b26d5d2b7",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5536342096692571,
      "MetricsIntensity" : 0.05331492774519719,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 31.037196788759854,
    "generation" : 47,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702762430939226,
      "LackOfCohesion" : 0.5536342096692571,
      "MetricsIntensity" : 0.053314927745197194,
      "Density" : 3.2692530399536777
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "129e4c65-5150-411f-904e-6b3d068e6eab",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5546050993249697,
      "MetricsIntensity" : 0.05344480809169639,
      "Density" : 0.9957529640771545
    },
    "euclideanDistance" : 32.035937918300256,
    "generation" : 43,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7031509121061357,
      "LackOfCohesion" : 0.5546050993249697,
      "MetricsIntensity" : 0.05344480809169639,
      "Density" : 3.2601390498261877
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "bb5d9217-53d5-4b5c-8cef-1cc9f82d6458",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5570141585975763,
      "MetricsIntensity" : 0.05343994476824105,
      "Density" : 0.9962838435675102
    },
    "euclideanDistance" : 32.03600633814284,
    "generation" : 35,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037037037037044,
      "LackOfCohesion" : 0.5570141585975763,
      "MetricsIntensity" : 0.05343994476824105,
      "Density" : 3.2618771726535343
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "3ea0f051-9e15-4b27-b361-6eff9d4c0cfe",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.55401640986398,
      "MetricsIntensity" : 0.05346176010004706,
      "Density" : 0.9998230401698814
    },
    "euclideanDistance" : 32.03602416688464,
    "generation" : 46,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7014925373134315,
      "LackOfCohesion" : 0.55401640986398,
      "MetricsIntensity" : 0.05346176010004706,
      "Density" : 3.273464658169177
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "20074d16-aae4-426f-a869-3160238dd592",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5551653336568829,
      "MetricsIntensity" : 0.05344926013429353,
      "Density" : 0.9959299239072731
    },
    "euclideanDistance" : 33.0348549920688,
    "generation" : 42,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702598120508568,
      "LackOfCohesion" : 0.5551653336568829,
      "MetricsIntensity" : 0.05344926013429354,
      "Density" : 3.2607184241019698
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "1c116d0a-f316-412f-8abd-8f92d39ff7c9",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5526803712051994,
      "MetricsIntensity" : 0.053313130980810496,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 33.034919104535874,
    "generation" : 41,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7022099447513814,
      "LackOfCohesion" : 0.5526803712051994,
      "MetricsIntensity" : 0.053313130980810496,
      "Density" : 3.2692530399536777
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "5e439891-27c1-4d03-961d-69d50813a4b8",
    "objectives" : {
      "NumberOfConcerns" : 1.00064892926671,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.553437684480907,
      "MetricsIntensity" : 0.053303787805999696,
      "Density" : 0.9961068837373916
    },
    "euclideanDistance" : 34.03384582688048,
    "generation" : 46,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7038674033149175,
      "LackOfCohesion" : 0.553437684480907,
      "MetricsIntensity" : 0.05330378780599969,
      "Density" : 3.2594093804284894
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "85fc6ed0-c141-4bce-899c-5e8c0ae3ab53",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5525947224868659,
      "MetricsIntensity" : 0.05331313098081051,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 34.03387699615197,
    "generation" : 39,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.701657458563535,
      "LackOfCohesion" : 0.5525947224868659,
      "MetricsIntensity" : 0.05331313098081051,
      "Density" : 3.268674001158078
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "b5f178b0-4509-45ab-a480-b59b3fb7be9e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5537428948580599,
      "MetricsIntensity" : 0.05330063919031256,
      "Density" : 0.9950451247566803
    },
    "euclideanDistance" : 35.032835839424216,
    "generation" : 36,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7027624309392262,
      "LackOfCohesion" : 0.5537428948580599,
      "MetricsIntensity" : 0.05330063919031256,
      "Density" : 3.255935147654893
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "c98d7a39-16c1-49fe-9f39-6edf41282358",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5536337720774647,
      "MetricsIntensity" : 0.05338720518670565,
      "Density" : 0.9962838435675102
    },
    "euclideanDistance" : 36.031957233048225,
    "generation" : 47,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037037037037044,
      "LackOfCohesion" : 0.5536337720774647,
      "MetricsIntensity" : 0.05338720518670565,
      "Density" : 3.2618771726535343
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "8a13d01f-195c-44ed-a74a-00057de975d8",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5545280743590909,
      "MetricsIntensity" : 0.053495871517025714,
      "Density" : 0.9994691205096443
    },
    "euclideanDistance" : 36.03200538314176,
    "generation" : 41,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283188,
      "LackOfCohesion" : 0.5545280743590909,
      "MetricsIntensity" : 0.053495871517025714,
      "Density" : 3.274202898550724
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "f37aff53-4326-4521-8771-4ec821d392f5",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5562289402544558,
      "MetricsIntensity" : 0.05348965138678459,
      "Density" : 0.9957529640771545
    },
    "euclideanDistance" : 37.0310752440143,
    "generation" : 23,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7018805309734513,
      "LackOfCohesion" : 0.5562289402544558,
      "MetricsIntensity" : 0.05348965138678459,
      "Density" : 3.262028985507247
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "4e34605c-01bc-405b-8690-3e9d3f3180e7",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.556405276269535,
      "MetricsIntensity" : 0.05334718939357815,
      "Density" : 0.9952220845867988
    },
    "euclideanDistance" : 37.0310896722511,
    "generation" : 44,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702598120508568,
      "LackOfCohesion" : 0.556405276269535,
      "MetricsIntensity" : 0.053347189393578145,
      "Density" : 3.258400926998841
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "39255f3b-53fb-4383-a520-72b239f07ed3",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5523137076293303,
      "MetricsIntensity" : 0.053303787805999696,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 37.03116424827026,
    "generation" : 28,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7033149171270716,
      "LackOfCohesion" : 0.5523137076293303,
      "MetricsIntensity" : 0.0533037878059997,
      "Density" : 3.2698320787492765
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "ebec9bda-08a9-4969-a723-daba3740baaf",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5545826475963752,
      "MetricsIntensity" : 0.05349141655888006,
      "Density" : 0.9959299239072731
    },
    "euclideanDistance" : 38.03023872714439,
    "generation" : 46,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7018805309734515,
      "LackOfCohesion" : 0.5545826475963752,
      "MetricsIntensity" : 0.05349141655888007,
      "Density" : 3.262608695652174
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "ecc9a93d-dc43-4490-a302-480cc5d370bb",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5531051216993379,
      "MetricsIntensity" : 0.0533471228031974,
      "Density" : 0.9985843213590515
    },
    "euclideanDistance" : 38.030295131715654,
    "generation" : 41,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7014925373134326,
      "LackOfCohesion" : 0.5531051216993379,
      "MetricsIntensity" : 0.0533471228031974,
      "Density" : 3.269409038238702
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "756b5e45-43d9-400b-85e9-f0c9bb11c2e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5525941423046052,
      "MetricsIntensity" : 0.05335517072635378,
      "Density" : 0.995576004247036
    },
    "euclideanDistance" : 39.029451459163,
    "generation" : 46,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702598120508568,
      "LackOfCohesion" : 0.5525941423046052,
      "MetricsIntensity" : 0.05335517072635378,
      "Density" : 3.2595596755504053
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "b448086a-76b4-4fd6-9406-c50d8492d7fe",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5551432488139018,
      "MetricsIntensity" : 0.05349587151702572,
      "Density" : 0.9961068837373916
    },
    "euclideanDistance" : 39.02946816154667,
    "generation" : 44,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283188,
      "LackOfCohesion" : 0.5551432488139018,
      "MetricsIntensity" : 0.05349587151702573,
      "Density" : 3.263188405797101
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "0051081e-70b4-42d3-87c6-7060141fdac1",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5533301258330482,
      "MetricsIntensity" : 0.05339856775231215,
      "Density" : 0.9982304016988144
    },
    "euclideanDistance" : 40.0287515696379,
    "generation" : 47,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7007743362831862,
      "LackOfCohesion" : 0.5533301258330482,
      "MetricsIntensity" : 0.05339856775231215,
      "Density" : 3.2701449275362324
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "fd3c2cf2-1acd-4cea-b47e-2652af0375be",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5560965610002128,
      "MetricsIntensity" : 0.05324809233326262,
      "Density" : 0.9953990444169174
    },
    "euclideanDistance" : 40.028824556408125,
    "generation" : 41,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7051352843732748,
      "LackOfCohesion" : 0.5560965610002128,
      "MetricsIntensity" : 0.05324809233326263,
      "Density" : 3.25709322524609
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a3061706-8680-47dc-a486-b88acd3d58eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.554507868268158,
      "MetricsIntensity" : 0.05338605960059547,
      "Density" : 0.994337285436206
    },
    "euclideanDistance" : 41.027987931047,
    "generation" : 46,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7018805309734515,
      "LackOfCohesion" : 0.554507868268158,
      "MetricsIntensity" : 0.05338605960059547,
      "Density" : 3.2573913043478253
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "2f7a8cf1-93fa-422c-a3cd-e5ccdd9b9a87",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.553719893553066,
      "MetricsIntensity" : 0.053347122803197415,
      "Density" : 0.9952220845867988
    },
    "euclideanDistance" : 41.028006588195915,
    "generation" : 46,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7014925373134315,
      "LackOfCohesion" : 0.553719893553066,
      "MetricsIntensity" : 0.053347122803197415,
      "Density" : 3.2584009269988417
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "34857c32-72ac-49c2-8f32-d8f6169fe948",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5563673154861514,
      "MetricsIntensity" : 0.05337490507077689,
      "Density" : 0.9946912050964432
    },
    "euclideanDistance" : 41.02803746492664,
    "generation" : 47,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7029867256637168,
      "LackOfCohesion" : 0.5563673154861514,
      "MetricsIntensity" : 0.05337490507077689,
      "Density" : 3.2585507246376815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "3c90a29a-4ab8-4e9a-82b1-c67d958521fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5556196591822573,
      "MetricsIntensity" : 0.053396835268588835,
      "Density" : 0.9946912050964432
    },
    "euclideanDistance" : 42.02732965196461,
    "generation" : 46,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7007743362831862,
      "LackOfCohesion" : 0.5556196591822573,
      "MetricsIntensity" : 0.053396835268588835,
      "Density" : 3.2585507246376824
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "9e70ef74-20d4-4541-af16-ec885533c7e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5556559870334196,
      "MetricsIntensity" : 0.0535300276409729,
      "Density" : 0.9957529640771545
    },
    "euclideanDistance" : 43.02671214848826,
    "generation" : 31,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7011621472053131,
      "LackOfCohesion" : 0.5556559870334196,
      "MetricsIntensity" : 0.053530027640972894,
      "Density" : 3.263921113689096
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "3589ad42-d65b-4b4f-aeed-6d523a5dfd41",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5556559870334197,
      "MetricsIntensity" : 0.05353002764097289,
      "Density" : 0.9957529640771545
    },
    "euclideanDistance" : 43.02671214848826,
    "generation" : 24,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7011621472053124,
      "LackOfCohesion" : 0.5556559870334197,
      "MetricsIntensity" : 0.05353002764097289,
      "Density" : 3.2639211136890958
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "dc29976a-2f26-413f-b5bd-9894bc6f6ce2",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5541487243923146,
      "MetricsIntensity" : 0.0533856141047809,
      "Density" : 0.998407361528933
    },
    "euclideanDistance" : 43.026761564703136,
    "generation" : 30,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7007743362831855,
      "LackOfCohesion" : 0.5541487243923146,
      "MetricsIntensity" : 0.053385614104780904,
      "Density" : 3.270724637681159
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "023367ca-49b6-4e83-8dfa-ffa325ba9cd2",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5537101746843642,
      "MetricsIntensity" : 0.0533936672983519,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 44.026163586581575,
    "generation" : 44,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.701327433628318,
      "LackOfCohesion" : 0.5537101746843642,
      "MetricsIntensity" : 0.053393667298351905,
      "Density" : 3.2718840579710147
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "ff81d869-ae88-42a3-a8ea-83b352367382",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5535114114810366,
      "MetricsIntensity" : 0.05333777351374341,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 44.026190460453215,
    "generation" : 47,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702598120508568,
      "LackOfCohesion" : 0.5535114114810366,
      "MetricsIntensity" : 0.05333777351374341,
      "Density" : 3.2699884125144836
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "ba7f57c0-59d9-4574-a5c1-c5b3c7e22c60",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5542032976295992,
      "MetricsIntensity" : 0.0533811591466352,
      "Density" : 0.9980534418686958
    },
    "euclideanDistance" : 45.0255728639899,
    "generation" : 45,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283182,
      "LackOfCohesion" : 0.5542032976295992,
      "MetricsIntensity" : 0.0533811591466352,
      "Density" : 3.2695652173913055
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "392169a4-9aeb-4da1-bffa-ae691c83b70f",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5561327095972983,
      "MetricsIntensity" : 0.05343092649329066,
      "Density" : 0.994337285436206
    },
    "euclideanDistance" : 46.02493903587336,
    "generation" : 24,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7006087437742117,
      "LackOfCohesion" : 0.5561327095972983,
      "MetricsIntensity" : 0.05343092649329066,
      "Density" : 3.259280742459397
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "8b2a8484-2f60-4b49-95f8-2642cd287184",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5542045471707797,
      "MetricsIntensity" : 0.05335202005005426,
      "Density" : 0.9939833657759689
    },
    "euclideanDistance" : 46.024950257542734,
    "generation" : 46,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7020453289110002,
      "LackOfCohesion" : 0.5542045471707797,
      "MetricsIntensity" : 0.05335202005005426,
      "Density" : 3.2562318840579714
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "37571c10-0e1a-4702-9e9f-ec75d119ef12",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5542500584272946,
      "MetricsIntensity" : 0.0534277564470575,
      "Density" : 0.998407361528933
    },
    "euclideanDistance" : 48.02396985064431,
    "generation" : 46,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7011621472053127,
      "LackOfCohesion" : 0.5542500584272946,
      "MetricsIntensity" : 0.05342775644705751,
      "Density" : 3.2726218097447792
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "87302b4e-2c40-4fd2-93ee-9d0aa837d48b",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5554004880180912,
      "MetricsIntensity" : 0.053415240098648994,
      "Density" : 0.9945142452663246
    },
    "euclideanDistance" : 49.023427987936394,
    "generation" : 47,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7022689540675155,
      "LackOfCohesion" : 0.5554004880180912,
      "MetricsIntensity" : 0.05341524009864899,
      "Density" : 3.2598607888631093
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "feec4618-a6ed-4c00-97a8-4f65e8a64891",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5553044731039241,
      "MetricsIntensity" : 0.05341969797616436,
      "Density" : 0.9946912050964432
    },
    "euclideanDistance" : 50.022942691124626,
    "generation" : 46,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.700608743774212,
      "LackOfCohesion" : 0.5553044731039241,
      "MetricsIntensity" : 0.05341969797616436,
      "Density" : 3.260440835266822
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "7d67f66a-f721-4590-b046-9264efca2e9d",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5548656360108439,
      "MetricsIntensity" : 0.0534277564470575,
      "Density" : 0.9950451247566803
    },
    "euclideanDistance" : 51.02250151161838,
    "generation" : 46,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7011621472053133,
      "LackOfCohesion" : 0.5548656360108439,
      "MetricsIntensity" : 0.0534277564470575,
      "Density" : 3.261600928074247
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "ad47ebdc-25e2-4f4c-a0b4-dcc0841e6138",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5563341075464134,
      "MetricsIntensity" : 0.05331902356511314,
      "Density" : 0.9939833657759689
    },
    "euclideanDistance" : 51.02254114276301,
    "generation" : 46,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7031509121061363,
      "LackOfCohesion" : 0.5563341075464134,
      "MetricsIntensity" : 0.05331902356511314,
      "Density" : 3.2562318840579714
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "6007686a-e2fc-4613-8ccb-4eea3895e620",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5555593175671617,
      "MetricsIntensity" : 0.053471257984342206,
      "Density" : 0.994337285436206
    },
    "euclideanDistance" : 52.02203802213736,
    "generation" : 37,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287928,
      "LackOfCohesion" : 0.5555593175671617,
      "MetricsIntensity" : 0.0534712579843422,
      "Density" : 3.2611723737666867
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "94b1597d-e506-4f3e-8520-5743b079fd17",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5574534354983227,
      "MetricsIntensity" : 0.05332979218096775,
      "Density" : 0.994337285436206
    },
    "euclideanDistance" : 52.022114136167005,
    "generation" : 31,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7020453289110005,
      "LackOfCohesion" : 0.5574534354983227,
      "MetricsIntensity" : 0.05332979218096775,
      "Density" : 3.2573913043478253
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "fd099e31-d46d-44f7-a4f4-9bc872d69b33",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5577093534870791,
      "MetricsIntensity" : 0.053381225780624555,
      "Density" : 0.9939833657759689
    },
    "euclideanDistance" : 54.02127360979242,
    "generation" : 37,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283188,
      "LackOfCohesion" : 0.5577093534870791,
      "MetricsIntensity" : 0.053381225780624555,
      "Density" : 3.2581206496519726
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "f96c969b-886f-47fe-8abb-97aff898b104",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5553785284109627,
      "MetricsIntensity" : 0.053461890302843366,
      "Density" : 0.9946912050964432
    },
    "euclideanDistance" : 55.02085273159708,
    "generation" : 33,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7009966777408638,
      "LackOfCohesion" : 0.5553785284109627,
      "MetricsIntensity" : 0.053461890302843366,
      "Density" : 3.262333139872316
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "f645112e-47e0-49cd-a24e-6f6b3419de29",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5557486721902862,
      "MetricsIntensity" : 0.05342460164143126,
      "Density" : 0.9966377632277473
    },
    "euclideanDistance" : 56.02051873055851,
    "generation" : 45,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7000553403431102,
      "LackOfCohesion" : 0.5557486721902862,
      "MetricsIntensity" : 0.053424601641431264,
      "Density" : 3.26871735345328
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "31605a61-5a13-4836-be22-a466c0226899",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5545800395996358,
      "MetricsIntensity" : 0.05343266011232439,
      "Density" : 0.9936294461157317
    },
    "euclideanDistance" : 57.02009500852081,
    "generation" : 42,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7000553403431098,
      "LackOfCohesion" : 0.5545800395996358,
      "MetricsIntensity" : 0.05343266011232439,
      "Density" : 3.2588508415554265
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "749093d8-1a06-4005-9bff-29d685622752",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5566685048283524,
      "MetricsIntensity" : 0.05337942666291191,
      "Density" : 0.9938064059458503
    },
    "euclideanDistance" : 57.02012974085179,
    "generation" : 44,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7002212389380533,
      "LackOfCohesion" : 0.5566685048283524,
      "MetricsIntensity" : 0.05337942666291191,
      "Density" : 3.2575406032482603
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "eb5bab2d-535b-469a-a2c6-34b40de977dc",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5563548320854373,
      "MetricsIntensity" : 0.053426468615775304,
      "Density" : 0.9932755264554946
    },
    "euclideanDistance" : 58.01975958751684,
    "generation" : 37,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.70005534034311,
      "LackOfCohesion" : 0.5563548320854373,
      "MetricsIntensity" : 0.05342646861577529,
      "Density" : 3.2576900754497964
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "143be887-ff59-4934-b242-c292e78ff7ba",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5576639469184708,
      "MetricsIntensity" : 0.05340898192444475,
      "Density" : 0.9934524862856131
    },
    "euclideanDistance" : 58.01979189977564,
    "generation" : 34,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7017155506364132,
      "LackOfCohesion" : 0.5576639469184708,
      "MetricsIntensity" : 0.05340898192444475,
      "Density" : 3.258270458502611
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "77e8c192-8618-4f33-8c9f-b2b7d9d421f0",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5582154978140583,
      "MetricsIntensity" : 0.05341530677630413,
      "Density" : 0.9936294461157317
    },
    "euclideanDistance" : 58.019794661105095,
    "generation" : 35,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7011621472053124,
      "LackOfCohesion" : 0.5582154978140583,
      "MetricsIntensity" : 0.05341530677630413,
      "Density" : 3.258850841555427
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "1427d62a-4429-42ba-ae7d-dbee599d79ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5549494478538928,
      "MetricsIntensity" : 0.05338115914663522,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 58.01983263800808,
    "generation" : 45,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7007743362831862,
      "LackOfCohesion" : 0.5549494478538928,
      "MetricsIntensity" : 0.05338115914663522,
      "Density" : 3.269141531322506
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "95d674bc-ffe8-4f6c-92b6-a59dda82740f",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.554787086566777,
      "MetricsIntensity" : 0.05337625869267498,
      "Density" : 0.9978764820385773
    },
    "euclideanDistance" : 59.019504046234914,
    "generation" : 43,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7007743362831862,
      "LackOfCohesion" : 0.554787086566777,
      "MetricsIntensity" : 0.05337625869267498,
      "Density" : 3.2708816705336425
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "f1460aa5-bfd3-498f-a527-08b13140a006",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5552767046640489,
      "MetricsIntensity" : 0.053432660112324414,
      "Density" : 0.9936294461157317
    },
    "euclideanDistance" : 60.01909163975007,
    "generation" : 46,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6995019369120092,
      "LackOfCohesion" : 0.5552767046640489,
      "MetricsIntensity" : 0.053432660112324414,
      "Density" : 3.2588508415554265
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "00a8dfcf-b2c7-47b1-a8f9-085f1ebcd370",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.55713737039267,
      "MetricsIntensity" : 0.05342149827285325,
      "Density" : 0.9939833657759689
    },
    "euclideanDistance" : 60.01912551013607,
    "generation" : 44,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.700608743774212,
      "LackOfCohesion" : 0.55713737039267,
      "MetricsIntensity" : 0.053421498272853245,
      "Density" : 3.260011607661056
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "fd5ca59c-366d-4645-8586-70f98a018d37",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5554719865925001,
      "MetricsIntensity" : 0.05341969797616435,
      "Density" : 0.997168642718103
    },
    "euclideanDistance" : 60.01915213172092,
    "generation" : 44,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6995019369120088,
      "LackOfCohesion" : 0.5554719865925001,
      "MetricsIntensity" : 0.053419697976164346,
      "Density" : 3.2704585026117234
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "31206776-4e4d-4f18-8110-be8cda3ce8dd",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.5571739670788841,
      "MetricsIntensity" : 0.05341350647961523,
      "Density" : 0.9934524862856131
    },
    "euclideanDistance" : 61.01879845514688,
    "generation" : 29,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7000553403431102,
      "LackOfCohesion" : 0.5571739670788841,
      "MetricsIntensity" : 0.05341350647961523,
      "Density" : 3.2582704585026114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "559d3329-faaa-42df-9990-35a0f5730528",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.5548416598040614,
      "MetricsIntensity" : 0.05337180373452932,
      "Density" : 0.994337285436206
    },
    "euclideanDistance" : 61.01881279301064,
    "generation" : 38,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283188,
      "LackOfCohesion" : 0.5548416598040614,
      "MetricsIntensity" : 0.05337180373452932,
      "Density" : 3.2592807424593975
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "aacbe9ba-2d56-4364-8168-524a3a4ea448",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.555726940900648,
      "MetricsIntensity" : 0.05347125798434217,
      "Density" : 0.9968147230578659
    },
    "euclideanDistance" : 62.01851551613433,
    "generation" : 8,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6987818383167217,
      "LackOfCohesion" : 0.555726940900648,
      "MetricsIntensity" : 0.05347125798434217,
      "Density" : 3.2711962833914057
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "cb76f91b-de2f-48ce-87d4-a5facecd5d80",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.5554537835926455,
      "MetricsIntensity" : 0.053415240098648994,
      "Density" : 0.9969916828879845
    },
    "euclideanDistance" : 62.01854192637385,
    "generation" : 30,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7006087437742117,
      "LackOfCohesion" : 0.5554537835926455,
      "MetricsIntensity" : 0.053415240098648994,
      "Density" : 3.269878119558908
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "42c774dc-1315-4c84-bf0e-e5ef71b705d9",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5568781248715041,
      "MetricsIntensity" : 0.05345873342849209,
      "Density" : 0.9929216067952574
    },
    "euclideanDistance" : 63.01818064977845,
    "generation" : 16,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287925,
      "LackOfCohesion" : 0.5568781248715041,
      "MetricsIntensity" : 0.0534587334284921,
      "Density" : 3.2584204413472713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "b144968b-24ab-406d-98e0-94cf0ea5a3c0",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5574300374398099,
      "MetricsIntensity" : 0.05346506242779534,
      "Density" : 0.993098566625376
    },
    "euclideanDistance" : 63.01818319528079,
    "generation" : 36,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699335548172757,
      "LackOfCohesion" : 0.5574300374398099,
      "MetricsIntensity" : 0.053465062427795335,
      "Density" : 3.2590011614401853
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "2c98d47e-4953-4950-9a95-b228aef568b2",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.5557815857093912,
      "MetricsIntensity" : 0.05346679718362844,
      "Density" : 0.9932755264554946
    },
    "euclideanDistance" : 64.01788757724098,
    "generation" : 13,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6993355481727577,
      "LackOfCohesion" : 0.5557815857093912,
      "MetricsIntensity" : 0.05346679718362844,
      "Density" : 3.2595818815331006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "776d704b-a3e2-49b5-85c7-0ac788ae2b90",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.5563512030496208,
      "MetricsIntensity" : 0.05347125798434217,
      "Density" : 0.9934524862856131
    },
    "euclideanDistance" : 65.01761506933093,
    "generation" : 8,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6987818383167215,
      "LackOfCohesion" : 0.5563512030496208,
      "MetricsIntensity" : 0.053471257984342185,
      "Density" : 3.2601626016260163
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "4dff73e9-17ac-461c-9d9a-33104b54a550",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 66.0,
      "LackOfCohesion" : 0.5559151689738762,
      "MetricsIntensity" : 0.0534103364333821,
      "Density" : 0.9941603256060875
    },
    "euclideanDistance" : 66.01737966063334,
    "generation" : 43,
    "numberOfRefactorings" : 66,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7006087437742117,
      "LackOfCohesion" : 0.5559151689738762,
      "MetricsIntensity" : 0.053410336433382104,
      "Density" : 3.260591990713871
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "c453e9c0-8343-48dd-8bb8-93f94a3a3f33",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5566012578405387,
      "MetricsIntensity" : 0.05345382654770699,
      "Density" : 0.9934524862856131
    },
    "euclideanDistance" : 67.01709626524939,
    "generation" : 14,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6993355481727572,
      "LackOfCohesion" : 0.5566012578405387,
      "MetricsIntensity" : 0.05345382654770699,
      "Density" : 3.2601626016260163
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "6966dbae-d4d6-4493-b8b8-9aa85359f61f",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.5561704138934217,
      "MetricsIntensity" : 0.05346189030284335,
      "Density" : 0.9938064059458503
    },
    "euclideanDistance" : 68.01685131556911,
    "generation" : 46,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998892580287925,
      "LackOfCohesion" : 0.5561704138934217,
      "MetricsIntensity" : 0.053461890302843346,
      "Density" : 3.2613240418118465
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "698e4b58-e04c-4c88-baf9-289a61be14b1",
    "objectives" : {
      "NumberOfConcerns" : 0.9948085658663206,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5568571204331725,
      "MetricsIntensity" : 0.053505442781986996,
      "Density" : 0.993098566625376
    },
    "euclideanDistance" : 69.01658381527398,
    "generation" : 30,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.698614958448753,
      "LackOfCohesion" : 0.5568571204331725,
      "MetricsIntensity" : 0.053505442781986996,
      "Density" : 3.26089482858803
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "8935c7aa-9fce-4ea5-8857-ee331b52d845",
    "objectives" : {
      "NumberOfConcerns" : 0.9948085658663206,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5568571204331726,
      "MetricsIntensity" : 0.05350544278198699,
      "Density" : 0.993098566625376
    },
    "euclideanDistance" : 69.01658381527398,
    "generation" : 37,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6986149584487533,
      "LackOfCohesion" : 0.5568571204331726,
      "MetricsIntensity" : 0.05350544278198699,
      "Density" : 3.260894828588031
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.NonceExpiredException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.oauth2.core.AuthorizationGrantType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.annotation.web.configurers.CsrfConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.core.authority.SimpleGrantedAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.XssProtectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.OpaqueTokenConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.acls.model.UnloadedSidException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.method.MethodSecurityMetadataSourceBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorParametersConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OrderedWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry.UrlMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.PublicKeyJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      } ]
    } ]
  } ]
}