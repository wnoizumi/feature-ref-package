{
  "executionId" : "9a405ee7-f807-4bce-ae35-42de828ed3ce",
  "computingTime" : 10466,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2816492450638797,
    "meanNumConcerns" : 1.7074792243767314,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "f896253a-9719-4e6f-97ad-8ddef927e7c8",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 6.0,
      "LackOfCohesion" : 0.5560791173418377,
      "MetricsIntensity" : 0.053343496475316894,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 6.190610158093485,
    "generation" : 0,
    "numberOfRefactorings" : 6,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.709552733296521,
      "LackOfCohesion" : 0.5560791173418377,
      "MetricsIntensity" : 0.05334349647531689,
      "Density" : 3.274305555555555,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    } ]
  }, {
    "solutionId" : "a50c153e-fe43-4dcf-8a9c-2740e842c4db",
    "objectives" : {
      "NumberOfConcerns" : 1.0061648280337443,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5526496444859701,
      "MetricsIntensity" : 0.0532299668048859,
      "Density" : 1.0021235179614227
    },
    "euclideanDistance" : 9.12824595775881,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7094818081587653,
      "LackOfCohesion" : 0.5526496444859701,
      "MetricsIntensity" : 0.0532299668048859,
      "Density" : 3.271519352975159,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    } ]
  }, {
    "solutionId" : "0a322853-4dba-47a6-baf9-6932fb929905",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5530169296900448,
      "MetricsIntensity" : 0.05328217533580432,
      "Density" : 0.9980534418686958
    },
    "euclideanDistance" : 14.082396210575906,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.707666850523994,
      "LackOfCohesion" : 0.5530169296900448,
      "MetricsIntensity" : 0.053282175335804316,
      "Density" : 3.2582322357019065,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "40b8b44d-5234-49dc-82f5-419a438fac9c",
    "objectives" : {
      "NumberOfConcerns" : 1.0048669695003245,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5530810955158784,
      "MetricsIntensity" : 0.05325449071229161,
      "Density" : 1.0014156786409485
    },
    "euclideanDistance" : 16.072377724743117,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7082184225041366,
      "LackOfCohesion" : 0.5530810955158784,
      "MetricsIntensity" : 0.05325449071229161,
      "Density" : 3.2692085499711157,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "d7c6f7cc-ea03-4b35-bc0a-26e2c2b2df61",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5516472078609324,
      "MetricsIntensity" : 0.05328352383188591,
      "Density" : 1.0010617589807114
    },
    "euclideanDistance" : 19.060827036411823,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.705849889624724,
      "LackOfCohesion" : 0.5516472078609324,
      "MetricsIntensity" : 0.05328352383188591,
      "Density" : 3.269942196531791,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "379dd0e5-8f21-482e-97a7-335191afb580",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5519239294061178,
      "MetricsIntensity" : 0.053540909442026545,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 22.05228828085424,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7058171745152353,
      "LackOfCohesion" : 0.5519239294061178,
      "MetricsIntensity" : 0.053540909442026545,
      "Density" : 3.2762623331398726,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "6201bc9e-1b98-4035-8f60-ea8808760300",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5553967292869008,
      "MetricsIntensity" : 0.05336430886413306,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 22.052593167226817,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7062396466040863,
      "LackOfCohesion" : 0.5553967292869008,
      "MetricsIntensity" : 0.05336430886413306,
      "Density" : 3.270833333333333,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "00c5bd2b-cb8b-42f4-bafb-43ad2167af1b",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5540432499321959,
      "MetricsIntensity" : 0.05333759732481648,
      "Density" : 1.0
    },
    "euclideanDistance" : 24.048153903941706,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7051352843732748,
      "LackOfCohesion" : 0.5540432499321959,
      "MetricsIntensity" : 0.05333759732481649,
      "Density" : 3.2702546296296298,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "2f55db8a-8124-4f00-ac58-b29c7fd4cbcd",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5528369139473562,
      "MetricsIntensity" : 0.05334721774286181,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 24.04823181382587,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7064017660044133,
      "LackOfCohesion" : 0.5528369139473562,
      "MetricsIntensity" : 0.05334721774286181,
      "Density" : 3.2705202312138733,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "ad85f145-3352-4c9c-8f2a-8ceeae1382f9",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5529963885238149,
      "MetricsIntensity" : 0.05329341150556594,
      "Density" : 0.9957529640771545
    },
    "euclideanDistance" : 25.04605192085877,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7056874654886807,
      "LackOfCohesion" : 0.5529963885238149,
      "MetricsIntensity" : 0.05329341150556594,
      "Density" : 3.2563657407407414,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "ae41fc20-a553-400f-a983-8ca91de387a9",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5547011815521374,
      "MetricsIntensity" : 0.053284140940739806,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 25.046243542590723,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7062396466040863,
      "LackOfCohesion" : 0.5547011815521374,
      "MetricsIntensity" : 0.053284140940739806,
      "Density" : 3.267939814814814,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "048578ea-9cb1-422c-b3fa-57d0285290ad",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5541723700500432,
      "MetricsIntensity" : 0.05335498391393532,
      "Density" : 0.9961068837373916
    },
    "euclideanDistance" : 29.03971039964703,
    "generation" : 0,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7049723756906077,
      "LackOfCohesion" : 0.5541723700500432,
      "MetricsIntensity" : 0.05335498391393531,
      "Density" : 3.25940938042849,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.task.DelegatingSecurityContextTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "8994a984-e1b4-4b6e-9c91-79f99df37686",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5530106859094359,
      "MetricsIntensity" : 0.053288089697221035,
      "Density" : 1.0
    },
    "euclideanDistance" : 29.039877915206446,
    "generation" : 0,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706791827719492,
      "LackOfCohesion" : 0.5530106859094359,
      "MetricsIntensity" : 0.05328808969722103,
      "Density" : 3.2702546296296284,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "721f3e60-c019-4543-9d36-aab78a2ef95d",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5529274363141687,
      "MetricsIntensity" : 0.053245229281169745,
      "Density" : 1.0007078393204742
    },
    "euclideanDistance" : 30.038626560281216,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7086092715231789,
      "LackOfCohesion" : 0.5529274363141687,
      "MetricsIntensity" : 0.05324522928116974,
      "Density" : 3.26878612716763,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "c61ec11f-d86f-409d-97f7-8b98dcf43cb1",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5513939499289973,
      "MetricsIntensity" : 0.05333450079992703,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 32.03603303180163,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027622,
      "LackOfCohesion" : 0.5513939499289973,
      "MetricsIntensity" : 0.053334500799927034,
      "Density" : 3.2698320787492774,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "36e0a65c-d17b-4cdc-bf28-6a9e1923b4bf",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5530767994535735,
      "MetricsIntensity" : 0.053377828812577695,
      "Density" : 0.9998230401698814
    },
    "euclideanDistance" : 32.03607867679271,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027622,
      "LackOfCohesion" : 0.5530767994535735,
      "MetricsIntensity" : 0.053377828812577695,
      "Density" : 3.2715691951360744,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "27834484-4570-459e-bc02-633de6ca1993",
    "objectives" : {
      "NumberOfConcerns" : 1.0035691109669047,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5539267560411921,
      "MetricsIntensity" : 0.05336381293926739,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 32.03621876064843,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7078961899503033,
      "LackOfCohesion" : 0.5539267560411921,
      "MetricsIntensity" : 0.05336381293926739,
      "Density" : 3.272411798727588,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "85993528-33af-4e73-ae48-c5272529a5ca",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5531846926594883,
      "MetricsIntensity" : 0.05331802502475902,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 33.03497582095458,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7055248618784538,
      "LackOfCohesion" : 0.5531846926594883,
      "MetricsIntensity" : 0.05331802502475902,
      "Density" : 3.268094962362478,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "b542fdf9-20f7-4885-bf19-780a9c77373b",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5529135609483402,
      "MetricsIntensity" : 0.05324487927215975,
      "Density" : 0.9998230401698814
    },
    "euclideanDistance" : 34.03402260026136,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7073440088348988,
      "LackOfCohesion" : 0.5529135609483402,
      "MetricsIntensity" : 0.05324487927215975,
      "Density" : 3.2677848467322157,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "150b9c19-6bef-41f4-8d71-ad829704e9e0",
    "objectives" : {
      "NumberOfConcerns" : 1.00064892926671,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5532480991316641,
      "MetricsIntensity" : 0.05333022216456901,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 35.0329523441607,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.704809286898839,
      "LackOfCohesion" : 0.5532480991316641,
      "MetricsIntensity" : 0.053330222164569015,
      "Density" : 3.2699884125144836,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "fc74ce15-ca2b-45a7-90da-29fd90290d0a",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5553436960365635,
      "MetricsIntensity" : 0.05335002964817316,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 35.03297626490986,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7023743787962446,
      "LackOfCohesion" : 0.5553436960365635,
      "MetricsIntensity" : 0.053350029648173175,
      "Density" : 3.2662037037037037,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "6134d9ba-9cea-4e91-b2f1-c2ffa92f699f",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5565437287562042,
      "MetricsIntensity" : 0.05334546307392213,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 37.03129538615962,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7051352843732748,
      "LackOfCohesion" : 0.5565437287562042,
      "MetricsIntensity" : 0.05334546307392213,
      "Density" : 3.268941584731058,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "3f06ba3f-fbea-451c-8df9-a7784c1ccfb6",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5514939127276086,
      "MetricsIntensity" : 0.05334222555634054,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 38.03033295654591,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7042564953012713,
      "LackOfCohesion" : 0.5514939127276086,
      "MetricsIntensity" : 0.05334222555634054,
      "Density" : 3.2717265353418297,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "3559e499-c368-42fd-a938-8cb0ea2b9549",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5535732466426756,
      "MetricsIntensity" : 0.05338451996101344,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 38.03035857660932,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.704256495301271,
      "LackOfCohesion" : 0.5535732466426756,
      "MetricsIntensity" : 0.053384519961013434,
      "Density" : 3.2692530399536777,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.task.DelegatingSecurityContextTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "607364be-ff28-4725-bbbf-981df0ba85e4",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5557322974328124,
      "MetricsIntensity" : 0.05333273793675518,
      "Density" : 0.9994691205096443
    },
    "euclideanDistance" : 40.02889667509578,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027622,
      "LackOfCohesion" : 0.5557322974328124,
      "MetricsIntensity" : 0.05333273793675517,
      "Density" : 3.2704111175448762,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "13324127-793c-424c-9d21-5e2c13fb2faf",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.554614878512403,
      "MetricsIntensity" : 0.053291151073359945,
      "Density" : 0.9966377632277473
    },
    "euclideanDistance" : 42.02749367094996,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7073440088348977,
      "LackOfCohesion" : 0.554614878512403,
      "MetricsIntensity" : 0.053291151073359945,
      "Density" : 3.2573742047426264,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "36d4e0bf-40d8-40df-a440-99eca660273d",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5533339048326533,
      "MetricsIntensity" : 0.05332837285456713,
      "Density" : 0.9980534418686958
    },
    "euclideanDistance" : 43.02679552323662,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.703703703703704,
      "LackOfCohesion" : 0.5533339048326533,
      "MetricsIntensity" : 0.05332837285456713,
      "Density" : 3.2676709154113555,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "e751ff97-2385-40a3-89b9-4cffd0ded74e",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5559672143943483,
      "MetricsIntensity" : 0.05343833699230481,
      "Density" : 0.9998230401698814
    },
    "euclideanDistance" : 43.0268782314676,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7033149171270716,
      "LackOfCohesion" : 0.5559672143943483,
      "MetricsIntensity" : 0.053438336992304804,
      "Density" : 3.269675925925926,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.acls.domain.EhCacheBasedAclCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.DelegatingPathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "5415860d-7c77-4fc4-89d1-0cfc40189b2c",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5546413584956503,
      "MetricsIntensity" : 0.053298842425925856,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 45.02566260642728,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027631,
      "LackOfCohesion" : 0.5546413584956503,
      "MetricsIntensity" : 0.05329884242592586,
      "Density" : 3.266782407407408,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "e8995d01-ea96-41d6-81eb-19fdfd7b7d98",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.554072986640534,
      "MetricsIntensity" : 0.05344436288743669,
      "Density" : 0.9962838435675102
    },
    "euclideanDistance" : 49.02346875559805,
    "generation" : 0,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7020453289110007,
      "LackOfCohesion" : 0.554072986640534,
      "MetricsIntensity" : 0.05344436288743669,
      "Density" : 3.2599884192240887,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.task.DelegatingSecurityContextTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "ad3e26e2-3b9c-444d-8407-5cade5c11ecb",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5559343902165973,
      "MetricsIntensity" : 0.05341676022333439,
      "Density" : 0.9959299239072731
    },
    "euclideanDistance" : 50.02305209146208,
    "generation" : 0,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7053620784964068,
      "LackOfCohesion" : 0.5559343902165973,
      "MetricsIntensity" : 0.05341676022333439,
      "Density" : 3.2588303416328896,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "85bad5d8-c2f1-46c4-907b-c143b4432d48",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.555786998210107,
      "MetricsIntensity" : 0.05338874658478522,
      "Density" : 0.9946912050964432
    },
    "euclideanDistance" : 54.02130283637315,
    "generation" : 0,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7046460176991147,
      "LackOfCohesion" : 0.555786998210107,
      "MetricsIntensity" : 0.05338874658478522,
      "Density" : 3.258550724637682,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.messaging.access.expression.MessageExpressionVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "16be88bc-0a44-4d71-b55b-cf42c6eeb854",
    "objectives" : {
      "NumberOfConcerns" : 0.9944841012329656,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.5549323616011361,
      "MetricsIntensity" : 0.05350233534074684,
      "Density" : 0.9936294461157317
    },
    "euclideanDistance" : 68.01681491020902,
    "generation" : 0,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6980609418282544,
      "LackOfCohesion" : 0.5549323616011361,
      "MetricsIntensity" : 0.05350233534074684,
      "Density" : 3.2607433217189308,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler.DelegateEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.ClientRegistrationMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.taglibs.authz.JspAuthorizeTag.PageContextVariableLookupEvaluationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.taglibs.authz.JspAuthorizeTag.PageContextVariableLookupEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.web.server.authorization.AuthorizationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='s101.S101Configure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.config.annotation.AbstractSecurityBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.config.annotation.AbstractSecurityBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.authentication.AuthenticationManagerFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.ReactiveJwtAuthenticationConverterAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.ReactiveJwtAuthenticationConverterAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.AuthorizePayloadsSpec.Access'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.gradle.maven.SpringSigningPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.firewall.RequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.core.context.InheritableThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.core.context.InheritableThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.core.context.InheritableThreadLocalSecurityContextHolderStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.authorization.method.AuthorizationAnnotationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.authorization.method.AuthorizationAnnotationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.core.context.InheritableThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.core.context.InheritableThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.crypto.keygen.KeyGenerators'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationRequestFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationRequestFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterResponse'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterResponse'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='s101.S101Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.savedrequest.SavedCookie'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.cas.web.authentication.DefaultServiceAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.cas.web.authentication.DefaultServiceAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.cas.web.authentication.DefaultServiceAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.cas.web.authentication.DefaultServiceAuthenticationDetails'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.access.vote.AuthenticatedVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.PortMapperImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.PortMapperImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.oauth2.server.resource.introspection.SpringReactiveOpaqueTokenIntrospector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.server.resource.introspection.SpringReactiveOpaqueTokenIntrospector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.util.matcher.RequestMatcherEditor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration.ProviderDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration.ProviderDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration.ProviderDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.authentication.AuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.authentication.AuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.authentication.AuthenticationEntryPointFailureHandler'"
      } ]
    } ]
  }, {
    "solutionId" : "68d5afa8-8002-42b6-8bde-4d2143c035a0",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.5551894029644603,
      "MetricsIntensity" : 0.05347125798434219,
      "Density" : 0.9941603256060875
    },
    "euclideanDistance" : 68.01686274274685,
    "generation" : 0,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.701550387596899,
      "LackOfCohesion" : 0.5551894029644603,
      "MetricsIntensity" : 0.053471257984342185,
      "Density" : 3.260591990713871,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.server.context.ReactorContextWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.web.util.matcher.AndRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.oauth2.core.AuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.config.websocket.WebSocketMessageBrokerSecurityBeanDefinitionParser.MessageSecurityPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.ChannelAttributeFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.taglibs.csrf.CsrfMetaTagsTag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.client.ClientCredentialsOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.access.channel.SecureChannelProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.access.vote.UnanimousBased'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.task.DelegatingSecurityContextTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.access.vote.RoleVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.core.context.SecurityContextImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  } ]
}